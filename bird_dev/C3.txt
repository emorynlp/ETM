SELECT MAX(1.0 * frpm.`free meal count (K-12)` / frpm.`enrollment (k-12)`) AS highest_eligible_free_rate FROM frpm JOIN schools ON frpm.cdscode = schools.cdscode WHERE schools.county = 'Alameda';
SELECT `free meal count (ages 5-17)` / `enrollment (ages 5-17)` AS free_rate, `school name` FROM frpm WHERE `school name` IN ('Continuation #2', 'Continuation School') ORDER BY free_rate LIMIT 3;
SELECT zip FROM schools WHERE charter = 1 AND district = 'Fresno County Office of Education';
SELECT mailstreet, mailstrabr, mailcity, mailzip FROM schools WHERE cdscode IN (SELECT cdscode FROM frpm ORDER BY "frpm count (k-12)" DESC LIMIT 1);
SELECT phone FROM schools JOIN frpm ON schools.cdscode = frpm.cdscode WHERE charter = 1 AND opendate > '2000-01-01';
SELECT COUNT(*) FROM schools JOIN satscores ON schools.cdscode = satscores.cds WHERE satscores.avgscrmath < 400 AND schools.virtual = 'F';
SELECT school FROM schools JOIN satscores ON schools.cdscode = satscores.cds WHERE numtsttakr > 500 AND (magnet = 1 OR gsoffered = 1);
SELECT schools.phone FROM satscores JOIN schools ON satscores.cds = schools.cdscode WHERE numge1500 > 0 ORDER BY numtsttakr DESC LIMIT 1;
SELECT MAX("frpm count (k-12)"), "numtsttakr" FROM frpm JOIN schools ON frpm.cdscode = schools.cdscode JOIN satscores ON satscores.cds = schools.cdscode;
SELECT schools.school, schools.charternum FROM schools JOIN satscores ON schools.cdscode = satscores.cds JOIN frpm ON frpm.cdscode = schools.cdscode WHERE satscores.avgscrmath > 560 AND frpm."charter funding type" = 'Direct' 
SELECT satscores.sname, MAX(satscores.avgscrread) as max_avg_score FROM satscores;
SELECT cdscode FROM frpm WHERE "Enrollment (k-12)" + "Enrollment (ages 5-17)" > 500;
SELECT ```sql MAX(`percent (%) eligible free (ages 5-17)`) FROM frpm JOIN schools ON frpm.cdscode = schools.cdscode JOIN satscores ON satscores.cds = schools.cdscode WHERE satscores.numge1500 / satscores.numtsttakr > 0.3; ```
SELECT satscores.sname, schools.phone FROM satscores JOIN schools ON satscores.cds = schools.cdscode ORDER BY (CAST(numge1500 AS REAL) / numtsttakr) DESC LIMIT 3;
SELECT school, cdscode FROM schools ORDER BY gsserved DESC LIMIT 5;
SELECT district, MAX(avgscrread) as highest_avg_reading_score FROM satscores JOIN schools ON satscores.cds = schools.cdscode WHERE statustype = 'Active' GROUP BY district;
SELECT COUNT(*) FROM schools JOIN frpm ON schools.cdscode = frpm.cdscode JOIN satscores ON satscores.cds = schools.cdscode WHERE schools.statustype = 'Merged' AND schools.county = 'Alameda' AND satscores.numtsttakr < 100;
SELECT charternum FROM schools JOIN satscores ON schools.cdscode = satscores.cds WHERE avgscrwrite = 499;
SELECT COUNT(*) FROM schools WHERE county = 'Contra Costa' AND fundingtype = 'Directly funded' AND cdscode IN (SELECT cds FROM satscores WHERE numtsttakr <= 250);
SELECT schools.phone FROM schools JOIN satscores ON schools.cdscode = satscores.cds ORDER BY satscores.avgscrmath DESC LIMIT 1;
SELECT COUNT(*) FROM frpm WHERE `county name` = 'Amador' AND `low grade` = 9 AND `high grade` = 12;
SELECT school FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE `county` = "Los Angeles" AND `gsserved` = "K-12" AND `free meal count (k-12)` > 500 AND `free meal count (k-12)` < 700;
SELECT `sname` FROM satscores WHERE cname = 'Contra Costa' ORDER BY numtsttakr DESC LIMIT 1;
SELECT I'll craft the SQL query for you: ```sql SELECT school, street FROM schools WHERE ABS(gsoffered - gsserved) > 30; ```
SELECT school FROM schools JOIN frpm ON schools.cdscode = frpm.cdscode JOIN satscores ON satscores.cds = schools.cdscode WHERE frpm.`percent (%) eligible frpm (K-12)` > 0.1 AND satscores.avgscrread + satscores.avgscrmath >= 1500;
SELECT s.fundingtype FROM schools s JOIN satscores ss ON s.cdscode = ss.cds WHERE s.city = 'Riverside' GROUP BY s.cdscode HAVING AVG(ss.avgscrmath) > 400;
SELECT school, street, city, zip FROM schools JOIN frpm ON schools.cdscode = frpm.cdscode WHERE city = "Monterey" AND `free meal count (ages 5-17)` > 800;
SELECT satscores.sname, avg(satscores.avgscrwrite) as average_writing_score, schools.phone FROM schools JOIN satscores ON satscores.cds = schools.cdscode WHERE schools.opendate > '1991' OR schools.closeddate < '2000' GROUP BY satscores.sname;
SELECT school, doc FROM schools JOIN frpm ON schools.cdscode = frpm.cdscode WHERE fundingtype = 'Locally funded' AND ABS(enrollment - enrollment_ages_5_17) > (SELECT AVG(enrollment - enrollment_ages_5_17) FROM frpm WHERE charter_funding_type = 'Locally funded');
SELECT opendate FROM schools ORDER BY gsserved DESC LIMIT 1;
SELECT city FROM schools ORDER BY gsserved LIMIT 5;
SELECT `percent (%) eligible free (k-12)` FROM frpm ORDER BY `enrollment (k-12)` DESC LIMIT 11;
SELECT frpm."percent (%) eligible free (k-12)" FROM schools JOIN frpm ON frpm.cdscode = schools.cdscode WHERE schools.charter = 66 AND schools.gsoffered = '1-12' ORDER BY frpm."free meal count (k-12)" DESC LIMIT 5;
SELECT school, website FROM schools JOIN frpm ON frpm.cdscode = schools.cdscode WHERE frpm."free meal count (ages 5-17)" BETWEEN 1900 AND 2000;
SELECT frpm.`free meal count (ages 5-17)` / frpm.`enrollment (ages 5-17)` AS "Free Rate" FROM frpm JOIN schools ON frpm.cdscode = schools.cdscode WHERE schools.admfname1 = 'Kacey' AND schools.admlname1 = 'Gibson';
SELECT admemail1 FROM schools WHERE charter = 1 ORDER BY "enrollment (K-12)" LIMIT 1;
SELECT satscores.sname, schools.admfname1, schools.admlname1 FROM satscores JOIN schools ON satscores.cds = schools.cdscode ORDER BY satscores.numtsttakr DESC, satscores.numge1500 DESC LIMIT 1;
SELECT street, city, zip, state FROM schools WHERE cdscode IN ( SELECT cds FROM satscores WHERE numtsttakr > 0 ORDER BY CAST(numge1500 AS FLOAT) / numtsttakr LIMIT 1 )
SELECT website FROM schools WHERE city = 'Los Angeles' AND school = 'Los Angeles County ROP' AND cdscode IN (SELECT cdscode FROM satscores WHERE numtsttakr BETWEEN 2000 AND 3000);
SELECT AVG(numtsttakr) FROM satscores JOIN schools ON satscores.cds = schools.cdscode WHERE schools.city = 'Fresno' AND schools.opendate BETWEEN '1980-01-01' AND '1980-12-31';
SELECT phone FROM schools WHERE district = 'Fresno Unified' AND cdscode IN (SELECT cds FROM satscores WHERE avgscrread = (SELECT MIN(avgscrread) FROM satscores WHERE dname = 'Fresno Unified'));
SELECT satscores.sname, satscores.avgscrread FROM satscores JOIN schools ON satscores.cds = schools.cdscode WHERE schools.virtual = 'F' ORDER BY satscores.avgscrread DESC LIMIT 5;
SELECT MAX(avgscrmath) AS highest_avg_math FROM satscores;
SELECT MIN(avgscrread + avgscrmath + avgscrwrite) AS min_avg_score, county FROM satscores JOIN schools ON satscores.cds = schools.cdscode;
SELECT avg(satscores.avgscrwrite) AS average_writing_score, schools.city AS school_city FROM satscores JOIN schools ON satscores.cds = schools.cdscode WHERE satscores.avgscrwrite >= 1500 GROUP BY schools.school ORDER BY sum(satscores.numtsttakr) DESC LIMIT 1;
SELECT satscores.sname, AVG(satscores.avgscrwrite) FROM satscores JOIN schools ON satscores.cds = schools.cdscode WHERE schools.admfname1 = "Ricci" AND schools.admlname1 = "Ulrich" GROUP BY satscores.sname;
SELECT `school name` FROM frpm WHERE `school type` = 'State Special Schools' ORDER BY `enrollment (k-12)` DESC LIMIT 1;
SELECT count(schools.doc) / 12 as monthly_average_schools FROM schools WHERE county = 'Alameda' and district = 52 and strftime('%Y', opendate) = '1980';
SELECT COUNT(CASE WHEN statustype = 'Merged' AND doctype = 'Unified School District' THEN 1 END) / COUNT(CASE WHEN statustype = 'Merged' AND doctype = 'Elementary School District' THEN 1 END) AS ratio_merged_schools FROM schools WHERE county = 'Orange';
SELECT county, school, closeddate FROM schools WHERE statustype = 'Closed' GROUP BY county ORDER BY count(*) DESC LIMIT 1;
SELECT sname, street FROM satscores JOIN schools ON satscores.cds = schools.cdscode ORDER BY avgscrmath DESC LIMIT 1 OFFSET 5;
SELECT mailstreet, school FROM schools WHERE cdscode IN (SELECT cds FROM satscores WHERE avgscrread = (SELECT MIN(avgscrread) FROM satscores));
SELECT schools.school FROM schools JOIN satscores ON satscores.cds = schools.cdscode WHERE schools.mailcity = 'Lakeport' AND (satscores.avgscrread + satscores.avgscrmath + satscores.avgscrwrite) >= 1500;
SELECT COUNT(numtsttakr) FROM satscores JOIN schools ON satscores.cds = schools.cdscode WHERE schools.mailcity = 'Fresno';
SELECT schools.school, schools.mailzip FROM schools WHERE schools.admfname1 = 'Avetik' AND schools.admlname1 = 'Atoian';
SELECT COUNT(*) AS colusa_count FROM schools WHERE mailstate = 'California' AND county = 'Colusa' INTERSECT SELECT COUNT(*) AS humboldt_count FROM schools WHERE mailstate = 'California' AND county = 'Humboldt';
SELECT COUNT(*) FROM schools WHERE statustype = 'Active' AND mailstate = 'California' AND county = 'San Joaquin';
SELECT phone, ext FROM schools JOIN satscores ON schools.cdscode = satscores.cds ORDER BY avgscrwrite DESC LIMIT 1 OFFSET 332;
SELECT phone, ext, sname FROM schools JOIN satscores ON satscores.cds = schools.cdscode WHERE zip = '95203-3704';
SELECT website FROM schools WHERE (admfname1 = 'Dante' AND admlname1 = 'Alvarez') OR (admfname1 = 'Mike' AND admlname1 = 'Larson');
SELECT website FROM schools WHERE virtual = 'P' AND charter = 1 AND city = 'San Joaquin';
SELECT COUNT(*) FROM schools WHERE charter = 1 AND city = 'Hickman' AND doctype = 'Elementary School District' AND doc = 52;
SELECT COUNT(*) FROM schools JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.county = 'Los Angeles' AND schools.charter = 0 AND (frpm."free meal count (k-12)" * 100 / frpm."enrollment (k-12)") < 0.18;
SELECT admfname1, school, city FROM schools WHERE charter = 1 AND charternum = "00D2";
SELECT COUNT(*) FROM schools WHERE charternum = '00D4' AND mailcity = 'Hickman';
SELECT count(*) * 100.0 / (select count(*) from schools where county = 'Santa Clara') FROM schools where county = 'Santa Clara' and fundingtype = 'Locally funded';
SELECT COUNT(*) FROM schools WHERE fundingtype = 'Directly funded' AND opendate BETWEEN '2000-01-01' AND '2005-12-31' AND county = 'Stanislaus';
SELECT COUNT(*) FROM schools WHERE doctype = 'Community College District' AND closeddate = '1989' AND city IN ('S. San Francisco', 'San Francisco, CA');
SELECT county FROM schools WHERE closeddate BETWEEN 1980 AND 1989 AND soctype = 'Youth Authority Facilities (CEA)' GROUP BY county ORDER BY COUNT(*) DESC LIMIT 1;
SELECT `ncesdist` FROM schools WHERE soctype = "State Special Schools";
SELECT COUNT(*) FROM schools WHERE statustype IN ('Active', 'Closed') AND soctype = 'District Community Day Schools' AND county = 'Alpine';
SELECT district code FROM frpm JOIN schools ON frpm.cdscode = schools.cdscode WHERE city = 'Fresno' AND magnet = 0;
SELECT enrollment FROM frpm WHERE "school type" = 'State Special Schools' AND city = 'Fremont' AND "academic year" = '2014-2015';
SELECT frpm."free meal count (ages 5-17)" FROM frpm JOIN schools ON frpm.cdscode = schools.cdscode WHERE schools.mailstreet = 'PO Box 1040' AND schools.edopsname = 'Youth Authority School';
SELECT min("low grade") AS "Lowest Grade" FROM frpm WHERE "educational option type" = 'District Special Education Consortia School' AND "district code" = 613360;
SELECT satscores.rtype, schools.school FROM frpm JOIN schools ON frpm.cdscode = schools.cdscode JOIN satscores ON schools.cdscode = satscores.cds WHERE frpm."county code" = 37 AND frpm."nslp provision status" = "Breakfast Provision 2";
SELECT city FROM schools WHERE eilcode = 'HS' AND cdscode IN (SELECT cdscode FROM frpm WHERE `low grade` = 9 AND `high grade` = 12 AND `county name` = 'Merced' AND `nslp provision status` = 'Lunch Provision 2');
SELECT school, (frpm.`percent (%) eligible frpm (ages 5-17)` / satscores.enroll12 * 100) as "Percent(%) Eligible FRPM (Ages 5-17)" FROM schools JOIN frpm ON frpm.cdscode = schools.cdscode JOIN satscores ON satscores.cds = schools.cdscode WHERE schools.county = 'Los Angeles' AND schools.gsserved = 'K-9';
SELECT DISTINCT "school type" FROM frpm JOIN schools ON frpm.cdscode = schools.cdscode WHERE city = "Adelanto" GROUP BY "school type" ORDER BY COUNT(*) DESC LIMIT 1;
SELECT COUNT(*) AS number_of_school_without_physical_building FROM schools WHERE county = 'San Diego' AND virtual = 'F' UNION ALL SELECT COUNT(*) FROM schools WHERE county = 'Santa Barbara' AND virtual = 'F' ORDER BY number_of_school_without_physical_building DESC LIMIT 1;
SELECT school type, school, latitude FROM schools JOIN frpm ON schools.cdscode = frpm.cdscode ORDER BY latitude DESC LIMIT 1;
SELECT city, MIN(latitude) as lowest_latitude, `low grade` as lowest_grade, `school name` as school_name FROM schools JOIN frpm ON schools.cdscode = frpm.cdscode WHERE state = 'CA' GROUP BY city ORDER BY lowest_latitude LIMIT 1;
SELECT `gsoffered` FROM schools WHERE longitude = (SELECT MAX(longitude) FROM schools);
SELECT city, COUNT(*) as num_schools FROM schools WHERE magnet = 1 AND gsoffered LIKE '%K-8%' GROUP BY city;
SELECT admfname1, district FROM schools UNION ALL SELECT admfname2, district FROM schools;
SELECT frpm."district code", ((frpm."free meal count (K-12)" * 1.0) / frpm."enrollment (K-12)") * 100 as "Percent Eligible Free (K-12)" FROM frpm JOIN schools ON frpm.cdscode = schools.cdscode WHERE schools.admfname1 = 'Alusine';
SELECT admlname1, district, county name, sname FROM schools JOIN frpm ON schools.cdscode = frpm.cdscode JOIN satscores ON satscores.cds = schools.cdscode WHERE charternum = 40;
SELECT admemail1 FROM schools WHERE mailcity = 'San Bernardino' AND district = 'San Bernardino City Unified' AND (soctype = 'Intermediate/Middle Schools (Public)' OR soctype = 'Unified School') AND opendate BETWEEN '2009-01-01' AND '2010-12-31';
SELECT admemail1, schools.school FROM schools JOIN satscores ON schools.cdscode = satscores.cds WHERE (satscores.avgscrread + satscores.avgscrmath) >= 1500 ORDER BY satscores.numtsttakr DESC LIMIT 1;
SELECT COUNT(DISTINCT account.account_id) FROM account JOIN trans ON trans.account_id = account.account_id JOIN district ON account.district_id = district.district_id WHERE account.frequency = 'POPLATEK PO OBRATU' AND district.a3 = 'east Bohemia';
SELECT COUNT(DISTINCT account.account_id) FROM account JOIN district ON account.district_id = district.district_id WHERE district.a3 = "Prague";
SELECT avg(a12) as avg_unemployment_1995, avg(a13) as avg_unemployment_1996 FROM district;
SELECT d.district_id FROM district d INNER JOIN client c ON d.district_id = c.district_id WHERE c.gender = 'F' GROUP BY d.district_id HAVING AVG(c.birth_date) > 6000 AND AVG(c.birth_date) < 10000;
SELECT COUNT(*) FROM client JOIN district ON client.district_id = district.district_id JOIN account ON account.district_id = district.district_id JOIN trans ON trans.account_id = account.account_id WHERE client.gender = 'M' AND district.a3 = 'north Bohemia' GROUP BY client.client_id HAVING AVG(trans.amount) > 8000;
SELECT account.account_id FROM account JOIN (SELECT client_id, MIN(birth_date) AS oldest_date FROM client WHERE gender = 'F' GROUP BY client_id ORDER BY oldest_date ASC LIMIT 1) AS oldest_client ON account.district_id = (SELECT district_id FROM client WHERE client_id = oldest_client.client_id) JOIN (SELECT district_id, MIN(a11) AS lowest_avg_salary FROM district GROUP BY district_id ORDER BY lowest_avg_salary ASC LIMIT 1) AS lowest_salary_district ON account.district_id = lowest_salary_district.district_id JOIN (SELECT district_id, MAX(a11) AS highest_avg_salary FROM district GROUP BY district_id ORDER BY highest_avg_salary DESC LIMIT 1) AS highest_salary_district ON account.district_id = highest_salary_district.district_id;
SELECT account.account_id FROM account JOIN client ON account.account_id = client.client_id JOIN ( SELECT district_id, MIN(birth_date) as min_birth_date FROM client GROUP BY district_id ) AS youngest_client ON client.district_id = youngest_client.district_id AND client.birth_date = youngest_client.min_birth_date JOIN ( SELECT district_id, MAX(a11) as max_avg_salary FROM district GROUP BY district_id ) AS highest_avg_salary ON account.district_id = highest_avg_salary.district_id;
SELECT COUNT(DISTINCT client_id) FROM disp JOIN account ON disp.account_id = account.account_id WHERE disp.type = 'OWNER' AND account.frequency = 'POPLATEK TYDNE';
SELECT client.client_id FROM disp JOIN account ON disp.account_id = account.account_id JOIN client ON disp.client_id = client.client_id JOIN card ON card.disp_id = disp.disp_id WHERE account.frequency = 'POPLATEK PO OBRATU' AND disp.type = 'DISPONENT';
SELECT account_id FROM loan WHERE date LIKE '1997%' AND amount = (SELECT MIN(amount) FROM loan WHERE date LIKE '1997%')
SELECT account_id, MAX(amount) as max_approved_amount FROM loan WHERE duration > 12 AND date LIKE '1993%' GROUP BY account_id;
SELECT COUNT(*) FROM client JOIN district ON client.district_id = district.district_id WHERE gender = 'F' AND birth_date < '1950-01-01' AND district.a2 = 'Slokolov';
SELECT account_id, MIN(date) AS earliest_trading_date FROM trans WHERE date LIKE '1995%' GROUP BY account_id;
SELECT account_id FROM account WHERE date < '1997-01-01' AND account_id IN (SELECT account_id FROM trans WHERE amount > 3000);
SELECT client_id FROM card JOIN disp ON card.disp_id = disp.disp_id WHERE issued = '1994-03-03';
SELECT date FROM account WHERE account_id = ( SELECT account_id FROM trans WHERE amount = 840 AND date = '1998-10-14' );
SELECT district.district_id FROM account JOIN loan ON account.account_id = loan.account_id JOIN district ON account.district_id = district.district_id WHERE loan.date = '1994-08-25';
SELECT MAX(amount) FROM trans WHERE account_id IN (SELECT account_id FROM disp INNER JOIN card ON disp.disp_id = card.disp_id WHERE issued = '1996-10-21')
SELECT client.gender FROM client JOIN account ON client.client_id = account.account_id WHERE client.birth_date = (SELECT MIN(birth_date) FROM client) AND account.district_id = (SELECT district_id FROM district ORDER BY a11 DESC LIMIT 1);
SELECT Max(amount) FROM loan WHERE loan_id = (SELECT loan_id FROM loan ORDER BY amount DESC LIMIT 1)
SELECT count(*) FROM client JOIN account ON client.client_id = account.account_id JOIN district ON account.district_id = district.district_id WHERE district.a2 = 'Jesenik' AND client.gender = 'F';
SELECT disp.disp_id FROM disp JOIN trans ON disp.account_id = trans.account_id WHERE trans.amount = 5100 AND trans.date = '1998-09-02';
SELECT COUNT(*) FROM account INNER JOIN district ON account.district_id = district.district_id WHERE district.a2 = 'Litomerice' AND strftime('%Y', account.date) = '1996';
SELECT district.a2 FROM client JOIN account ON client.district_id = account.district_id JOIN district ON account.district_id = district.district_id WHERE client.gender = 'F' AND client.birth_date = '1976-01-29';
SELECT client.birth_date FROM client JOIN loan ON client.client_id = loan.account_id WHERE loan.amount = 98832 AND loan.date = '1996-01-03';
SELECT account.account_id FROM account JOIN district ON account.district_id = district.district_id JOIN client ON account.account_id = client.client_id WHERE district.a3 = 'Prague' ORDER BY account.date LIMIT 1;
SELECT COUNT(CASE WHEN c.gender = 'M' THEN 1 END) * 100.0 / COUNT(c.client_id) AS percentage_male_clients FROM client c JOIN district d ON c.district_id = d.district_id WHERE d.a3 = 'south Bohemia';
SELECT balance FROM trans WHERE account_id = (SELECT account_id FROM loan WHERE date = '1993-07-05' LIMIT 1) AND date = '1993-07-05' INTERSECT SELECT balance FROM trans WHERE account_id = (SELECT account_id FROM loan WHERE date = '1993-07-05' LIMIT 1) AND date = '1993-03-22';
SELECT (100.0 * SUM(CASE WHEN l.status = 'A' THEN l.amount ELSE 0 END)) / SUM(l.amount) as percentage_fully_paid FROM loan l;
SELECT COUNT(account_id) * 100.0 / (SELECT COUNT(*) FROM loan WHERE amount < 100000 AND status = 'C') FROM loan WHERE amount < 100000 AND status = 'C';
SELECT account.account_id, district.a2, district.a3 FROM account JOIN district ON account.district_id = district.district_id JOIN trans ON account.account_id = trans.account_id JOIN card ON account.account_id = card.disp_id WHERE account.date = '1993' AND card.issued > trans.date AND account.frequency = 'POPLATEK PO OBRATU';
SELECT account.account_id, account.frequency FROM account JOIN district ON account.district_id = district.district_id WHERE district.a3 = 'east Bohemia' AND account.date BETWEEN 1995 AND 2000;
SELECT account_id, date FROM account WHERE district_id IN (SELECT district_id FROM district WHERE a2 = 'Prachatice');
SELECT district.a2, district.a3 FROM loan JOIN account ON loan.account_id = account.account_id JOIN district ON account.district_id = district.district_id WHERE loan.loan_id = '4990';
SELECT account.account_id, district.a2, district.a3 FROM loan INNER JOIN account ON loan.account_id = account.account_id INNER JOIN district ON account.district_id = district.district_id WHERE loan.amount > 300000;
SELECT loan.loan_id, district.a3, AVG(district.a11) as average_salary FROM loan JOIN account ON loan.account_id = account.account_id JOIN district ON account.district_id = district.district_id WHERE loan.duration = 60 GROUP BY loan.loan_id, district.a3;
SELECT district.a12, ((district.a13 - district.a12) / district.a12) * 100 as unemployment_increment_rate FROM district JOIN account ON district.district_id = account.district_id JOIN loan ON loan.account_id = account.account_id JOIN client ON client.client_id = account.account_id WHERE loan.status = 'D';
SELECT COUNT(account.account_id) * 100.0 / (SELECT COUNT(*) FROM account WHERE date LIKE '1993%') AS percentage FROM account JOIN district ON account.district_id = district.district_id WHERE district.a2 = 'Decin' AND account.date LIKE '1993%';
SELECT `account_id` FROM account WHERE `frequency` = 'POPLATEK MESICNE';
SELECT `a2`, COUNT(*) as num_female_accounts FROM district JOIN client ON client.district_id = district.district_id JOIN account ON account.district_id = district.district_id WHERE client.gender = 'F' GROUP BY `a2` ORDER BY num_female_accounts DESC LIMIT 10;
SELECT district.a2, SUM(trans.amount) AS total_withdrawal FROM trans JOIN account ON trans.account_id = account.account_id JOIN district ON account.district_id = district.district_id WHERE trans.type = 'VYDAJ' AND trans.date LIKE '1996-01%' GROUP BY district.a2 ORDER BY total_withdrawal DESC LIMIT 10;
SELECT COUNT(DISTINCT account.account_id) FROM account JOIN district ON account.district_id = district.district_id LEFT JOIN disp ON account.account_id = disp.account_id LEFT JOIN card ON disp.disp_id = card.disp_id WHERE district.a3 = 'south Bohemia' AND card.card_id IS NULL;
SELECT district.a3 FROM district JOIN account ON district.district_id = account.district_id JOIN loan ON account.account_id = loan.account_id WHERE loan.status = 'C' GROUP BY district.a3 ORDER BY COUNT(loan.loan_id) DESC LIMIT 1;
SELECT AVG(amount) FROM loan WHERE account_id IN (SELECT account_id FROM disp WHERE client_id IN (SELECT client_id FROM client WHERE gender = 'M'));
SELECT district.a2, district.a13 FROM district WHERE district.a13 = ( SELECT MAX(a13) FROM district WHERE district_id IN ( SELECT district_id FROM account WHERE account_id IN ( SELECT account_id FROM loan WHERE date LIKE '1996%' ) ) );
SELECT a16, COUNT(account_id) AS num_of_accounts FROM district JOIN account ON district.district_id = account.district_id WHERE a16 = (SELECT MAX(a16) FROM district) GROUP BY a16;
SELECT COUNT(DISTINCT account.account_id) FROM trans JOIN account ON trans.account_id = account.account_id JOIN disp ON disp.account_id = account.account_id JOIN card ON card.disp_id = disp.disp_id WHERE trans.operation = 'VYBER KARTOU' AND account.frequency = 'POPLATEK MESICNE' AND trans.balance < 0;
SELECT count(distinct loan.loan_id) FROM loan JOIN account ON loan.account_id = account.account_id WHERE loan.date >= '1995-01-01' AND loan.date <= '1997-12-31' AND loan.amount >= 250000 AND account.frequency = 'POPLATEK MESICNE' AND loan.status = 'approved';
SELECT COUNT(DISTINCT account.account_id) FROM account JOIN loan ON account.account_id = loan.account_id WHERE loan.status IN ('C', 'D') AND account.district_id = 1;
SELECT COUNT(*) FROM client WHERE district_id = (SELECT district_id FROM district ORDER BY a15 DESC LIMIT 1 OFFSET 1) AND gender = 'M';
SELECT COUNT(*) FROM card INNER JOIN disp ON card.disp_id = disp.disp_id WHERE card.type = 'gold' AND disp.type = 'DISPONENT';
SELECT COUNT(*) FROM account WHERE district_id = (SELECT district_id FROM district WHERE a2 = 'Pisek');
SELECT district.a2 FROM district JOIN account ON account.district_id = district.district_id JOIN trans ON trans.account_id = account.account_id WHERE trans.date LIKE '1997%' GROUP BY district.a2 HAVING SUM(trans.amount) > 10000;
SELECT account.account_id FROM account JOIN district ON account.district_id = district.district_id JOIN "order" ON "order".account_id = account.account_id WHERE "order".k_symbol = 'SIPO' AND district.a2 = 'Pisek';
SELECT account_id FROM disp WHERE type = 'gold' INTERSECT SELECT account_id FROM disp WHERE type = 'junior';
SELECT AVG(amount) FROM trans WHERE operation = 'VYBER KARTOU' AND strftime('%Y', date) = '2021'
SELECT account_id FROM trans WHERE type = 'VYBER KARTOU' AND strftime('%Y', date) = '1998' GROUP BY account_id, strftime('%m', date) HAVING SUM(amount) / COUNT(DISTINCT strftime('%m', date)) < (SELECT AVG(avg_spent) FROM (SELECT SUM(amount) / COUNT(DISTINCT strftime('%m', date)) AS avg_spent FROM trans WHERE type = 'VYBER KARTOU' AND strftime('%Y', date) = '1998' GROUP BY account_id, strftime('%m', date)));
SELECT client.client_id FROM client JOIN disp ON client.client_id = disp.client_id JOIN account ON disp.account_id = account.account_id JOIN card ON disp.disp_id = card.disp_id WHERE client.gender = 'F' AND account.frequency = 'monthly' AND EXISTS (SELECT 1 FROM loan WHERE loan.account_id = account.account_id)
SELECT count(distinct account.account_id) FROM client JOIN district ON client.district_id = district.district_id JOIN account ON client.client_id = account.account_id WHERE client.gender = 'F' and district.a3 = 'south Bohemia';
SELECT account.account_id FROM account JOIN district ON account.district_id = district.district_id JOIN disp ON account.account_id = disp.account_id JOIN loan ON account.account_id = loan.account_id WHERE district.a2 = 'Tabor' AND disp.type = 'OWNER';
SELECT type FROM disp WHERE type != 'OWNER' AND account_id IN ( SELECT account_id FROM account JOIN district ON account.district_id = district.district_id WHERE a11 > 8000 AND a11 <= 9000 )
SELECT COUNT(DISTINCT account.account_id) FROM account JOIN district ON account.district_id = district.district_id JOIN trans ON account.account_id = trans.account_id WHERE district.a3 = 'north Bohemia' AND trans.bank = 'AB';
SELECT district.a2 FROM district JOIN account ON account.district_id = district.district_id JOIN trans ON trans.account_id = account.account_id WHERE trans.type = 'VYDAJ';
SELECT avg(A15) FROM district WHERE A15 > 4000 AND district_id IN (SELECT district_id FROM account WHERE substr(date, 1,4) >= '1997');
SELECT COUNT(*) FROM card INNER JOIN disp ON card.disp_id = disp.disp_id INNER JOIN account ON disp.account_id = account.account_id INNER JOIN loan ON loan.account_id = account.account_id WHERE card.type = 'classic' AND disp.type = 'OWNER';
SELECT count(*) FROM client WHERE gender = 'M' AND district_id = (SELECT district_id FROM district WHERE a2 = 'Hl.m. Praha');
SELECT count(*) * 100.0 / (SELECT count(*) FROM card) FROM card WHERE type = 'gold' AND issued < '1998-01-01';
SELECT disp.client_id FROM disp JOIN loan ON disp.account_id = loan.account_id WHERE loan.amount = (SELECT MAX(amount) FROM loan);
SELECT count(a15) FROM district WHERE district_id = (SELECT district_id FROM account WHERE account_id = 532) AND a2 = 1995;
SELECT district.district_id FROM district JOIN account ON account.district_id = district.district_id JOIN `order` ON `order`.account_id = account.account_id WHERE `order`.order_id = 33333;
SELECT trans.trans_id FROM trans JOIN disp ON trans.account_id = disp.account_id WHERE disp.client_id = 3356 AND trans.type = 'VYBER';
SELECT COUNT(DISTINCT account.account_id) FROM loan JOIN account ON loan.account_id = account.account_id WHERE account.frequency = 'POPLATEK TYDNE' AND loan.amount < 200000;
SELECT type FROM card WHERE disp_id = (SELECT disp_id FROM disp WHERE client_id = 13539);
SELECT district.a3 FROM client JOIN district ON client.district_id = district.district_id WHERE client.client_id = 3541;
SELECT district.district_id FROM district JOIN account ON district.district_id = account.district_id JOIN loan ON account.account_id = loan.account_id WHERE loan.status = 'A' GROUP BY district.district_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT account_id FROM `order` WHERE order_id = 32423;
SELECT trans.* FROM trans JOIN account ON trans.account_id = account.account_id WHERE account.district_id = 5;
SELECT COUNT(account.account_id) FROM account JOIN district ON account.district_id = district.district_id WHERE district.a2 = 'Jesenik';
SELECT DISTINCT client_id FROM disp JOIN card ON disp.disp_id = card.disp_id WHERE card.type = 'junior' AND card.issued >= '1997-01-01';
SELECT COUNT(client.gender) * 100.0 / (SELECT COUNT(*) FROM client INNER JOIN account ON client.district_id = account.district_id WHERE district.a11 > 10000) AS percentage_female FROM client INNER JOIN account ON client.district_id = account.district_id INNER JOIN district ON client.district_id = district.district_id WHERE client.gender = 'F'
SELECT SUM(amount) AS amount_1997, (SELECT SUM(amount) FROM loan l JOIN client c ON l.account_id = c.client_id WHERE gender = 'M' AND date LIKE '1996%' ) AS amount_1996 FROM loan l JOIN client c ON l.account_id = c.client_id WHERE gender = 'M' AND date LIKE '1997%' ;
SELECT COUNT(*) FROM trans WHERE operation = 'VYBER KARTOU' AND date > '1995-01-01';
SELECT sum(CASE WHEN d.a3 = 'north Bohemia' THEN d.a16 ELSE 0 END) - sum(CASE WHEN d.a3 = 'east Bohemia' THEN d.a16 ELSE 0 END) AS crime_difference FROM district as d JOIN trans as t ON t.account_id = (SELECT account_id FROM account WHERE district_id = d.district_id) WHERE t.date BETWEEN '1996-01-01' AND '1996-12-31';
SELECT type, COUNT(type) FROM disp WHERE account_id BETWEEN 1 AND 10 GROUP BY type;
SELECT COUNT(*) as statement_request_frequency, SUM(amount) as total_debit FROM trans WHERE account_id = 3 and type = 'SI' and k_symbol = 'SLIPOVANI'
SELECT birth_date FROM client WHERE client_id = (SELECT client_id FROM disp WHERE type = 'OWNER' AND account_id = 130);
SELECT COUNT(DISTINCT account_id) FROM disp WHERE type = 'OWNER' AND account_id IN (SELECT account_id FROM account WHERE frequency = 'POPLATEK PO OBRATU');
SELECT amount, status, payments FROM loan WHERE account_id IN (SELECT account_id FROM client WHERE client_id = 992);
SELECT SUM(t.amount) AS total_amount, c.gender AS account_owner_gender FROM trans t JOIN disp d ON t.account_id = d.account_id JOIN client c ON d.client_id = c.client_id WHERE t.trans_id = 851 AND d.client_id = 4;
SELECT type FROM card WHERE disp_id = 9;
SELECT SUM(amount) FROM trans WHERE account_id IN ( SELECT account_id FROM client WHERE client_id = 617 ) AND date LIKE '1998%' ;
SELECT client.client_id FROM client JOIN district ON client.district_id = district.district_id JOIN account ON client.district_id = account.district_id WHERE client.birth_date BETWEEN '1983-01-01' AND '1987-12-31' AND district.a3 = 'east Bohemia';
SELECT client.client_id FROM client JOIN disp ON client.client_id = disp.client_id JOIN loan ON disp.account_id = loan.account_id WHERE client.gender = 'F' ORDER BY loan.amount DESC LIMIT 3;
SELECT COUNT(client_id) FROM client WHERE gender = 'M' AND birth_date BETWEEN '1974-01-01' AND '1976-12-31' AND client_id IN (SELECT client_id FROM trans JOIN account ON trans.account_id = account.account_id WHERE type = 'PRIJEM' AND amount > 4000 AND k_symbol = 'SIPO');
SELECT COUNT(*) FROM account JOIN district ON account.district_id = district.district_id WHERE district.a2 = 'Beroun' AND account.date > '1996-01-01';
SELECT COUNT(*) FROM client JOIN disp ON client.client_id = disp.client_id JOIN card ON disp.disp_id = card.disp_id WHERE client.gender = 'F' AND card.type = 'junior';
SELECT COUNT(DISTINCT client.client_id) * 100.0 / COUNT(DISTINCT client.client_id) FROM client JOIN disp ON client.client_id = disp.client_id JOIN account ON disp.account_id = account.account_id JOIN district ON account.district_id = district.district_id WHERE district.a3 = 'Prague' AND client.gender = 'F';
SELECT COUNT(client.client_id) * 100.0 / (SELECT COUNT(*) FROM client WHERE gender = 'M') FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN account ON disp.account_id = account.account_id WHERE account.frequency = 'POPLATEK TYDNE';
SELECT count(distinct client.client_id) from account join disp on account.account_id = disp.account_id join client on disp.client_id = client.client_id where account.frequency = 'POPLATEK TYDNE' and client.gender = 'F';
SELECT account_id FROM loan WHERE duration > 24 AND date < '1997-01-01' AND amount = (SELECT MIN(amount) FROM loan WHERE duration > 24 AND date < '1997-01-01');
SELECT client.client_id FROM client WHERE gender = 'F' ORDER BY birth_date ASC LIMIT 1;
SELECT COUNT(*) FROM client JOIN district ON client.district_id = district.district_id WHERE client.birth_date LIKE '1920%' AND district.a3 = 'east Bohemia';
SELECT COUNT(*) FROM loan l JOIN account a ON l.account_id = a.account_id WHERE l.duration = 24 AND a.frequency = 'POPLATEK TYDNE';
SELECT AVG(amount) FROM loan WHERE status IN ('C', 'D') AND account_id IN (SELECT account_id FROM account WHERE frequency = 'POPLATEK PO OBRATU');
SELECT client.client_id, district.district_id FROM client JOIN disp ON client.client_id = disp.client_id JOIN account ON account.account_id = disp.account_id JOIN district ON client.district_id = district.district_id WHERE disp.type = 'OWNER';
SELECT client.client_id, (strftime('%Y', 'now') - strftime('%Y', client.birth_date) - (strftime('%m-%d', 'now') < strftime('%m-%d', client.birth_date))) AS age FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN card ON disp.disp_id = card.disp_id WHERE card.type = 'gold';
SELECT MAX(bond_type) AS most_common_bond_type FROM ( SELECT bond_type, COUNT(*) AS bond_count FROM bond GROUP BY bond_type ORDER BY bond_count DESC LIMIT 1 );
SELECT COUNT(DISTINCT molecule.molecule_id) FROM molecule JOIN atom ON molecule.molecule_id = atom.molecule_id JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE molecule.label = '-' AND atom.element = 'cl';
SELECT AVG(CASE WHEN bond_type = '-' AND element = 'O' THEN 1 ELSE 0 END) FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id JOIN bond ON bond.molecule_id = molecule.molecule_id JOIN connected ON connected.atom_id = atom.atom_id AND connected.bond_id = bond.bond_id;
SELECT AVG(single_bonded) FROM ( SELECT COUNT(*) as single_bonded, molecule_id FROM bond WHERE bond_type = '-' AND molecule_id IN (SELECT molecule_id FROM molecule WHERE label = '+') GROUP BY molecule_id );
SELECT COUNT(*) FROM molecule WHERE label = '-' AND molecule_id IN ( SELECT molecule_id FROM atom WHERE element = 'na' );
SELECT molecule.molecule_id FROM molecule JOIN bond ON molecule.molecule_id = bond.molecule_id JOIN connected ON bond.bond_id = connected.bond_id JOIN atom ON connected.atom_id = atom.atom_id WHERE bond.bond_type = '#' AND molecule.label = '+' GROUP BY molecule.molecule_id HAVING COUNT(bond.bond_id) = 3;
SELECT ( (SELECT COUNT(DISTINCT atom_id) FROM atom WHERE element = 'c' AND molecule_id IN (SELECT molecule_id FROM bond WHERE bond_type = ' = ') ) * 100.0 ) / ( SELECT COUNT(DISTINCT atom_id) FROM atom WHERE molecule_id IN (SELECT molecule_id FROM bond WHERE bond_type = ' = ') );
SELECT COUNT(*) FROM bond WHERE bond_type = '#';
SELECT COUNT(DISTINCT atom_id) FROM atom WHERE element != 'br';
SELECT COUNT(*) FROM molecule WHERE molecule_id BETWEEN 'TR000' AND 'TR099' AND label = '+';
SELECT molecule.molecule_id FROM molecule WHERE molecule_id IN (SELECT molecule_id FROM atom WHERE element = 'si');
SELECT element FROM atom JOIN connected ON connected.atom_id = atom.atom_id WHERE connected.bond_id = 'TR004_8_9';
SELECT element FROM atom JOIN bond ON atom.molecule_id = bond.molecule_id JOIN connected ON bond.bond_id = connected.bond_id AND connected.atom_id = atom.atom_id WHERE bond_type = ' = ';
SELECT MAX(label) as most_numerous_label FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id JOIN bond ON connected.bond_id = bond.bond_id WHERE atom.element = 'h' GROUP BY molecule.label ORDER BY COUNT(molecule.label) DESC LIMIT 1;
SELECT bond.bond_type FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id JOIN bond ON bond.molecule_id = molecule.molecule_id WHERE atom.element = 'te';
SELECT a1.element, a2.element FROM connected c JOIN bond b ON c.bond_id = b.bond_id JOIN atom a1 ON c.atom_id = a1.atom_id JOIN atom a2 ON c.atom_id2 = a2.atom_id WHERE b.bond_type = '-';
SELECT atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON bond.bond_id = connected.bond_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '-';
SELECT element, COUNT(element) as num_elements FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE label = '-' GROUP BY element ORDER BY num_elements LIMIT 1;
SELECT bond.bond_type FROM bond JOIN connected ON bond.bond_id = connected.bond_id JOIN atom ON connected.atom_id = atom.atom_id JOIN atom AS a2 ON connected.atom_id2 = a2.atom_id WHERE atom.atom_id = 'TR004_8' AND a2.atom_id = 'TR004_20';
SELECT DISTINCT label FROM molecule WHERE molecule_id IN ( SELECT molecule_id FROM atom WHERE element != 'sn' );
SELECT COUNT(DISTINCT atom.atom_id) FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id JOIN bond ON atom.molecule_id = bond.molecule_id JOIN connected ON bond.bond_id = connected.bond_id AND atom.atom_id = connected.atom_id WHERE atom.element IN ('i', 's') AND bond.bond_type = '-';
SELECT c.atom_id, c.atom_id2 FROM connected c JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_type = '#';
SELECT atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR181';
SELECT SUM(CASE WHEN label = '+' THEN 1 ELSE 0 END) * 100.0 / COUNT(DISTINCT molecule_id) FROM molecule WHERE label = '+' AND molecule_id NOT IN (SELECT molecule_id FROM atom WHERE element = 'f');
SELECT SUM(CASE WHEN molecule.label = '+' THEN 1 ELSE 0 END) * 100 / COUNT(DISTINCT bond.molecule_id) as percent FROM molecule JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_type = '#' AND molecule.label = '+';
SELECT element FROM atom WHERE molecule_id = 'TR000' ORDER BY element LIMIT 3;
SELECT atom.element FROM atom JOIN connected ON connected.atom_id = atom.atom_id JOIN bond ON bond.bond_id = connected.bond_id JOIN molecule ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_id = 'TR001_2_6' AND molecule.molecule_id = 'TR001';
SELECT SUM(CASE WHEN molecule.label = '+' THEN 1 ELSE 0 END) - SUM(CASE WHEN molecule.label = '-' THEN 1 ELSE 0 END) AS difference FROM molecule;
SELECT atom_id FROM connected WHERE bond_id = 'TR_000_2_5';
SELECT bond_id FROM connected WHERE atom_id2 = 'TR000_2';
SELECT molecule.label FROM molecule JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_type = ' = ' GROUP BY molecule.label HAVING COUNT(bond.bond_id) >= 2 ORDER BY molecule.label LIMIT 5;
SELECT SUM(CASE WHEN bond_type = ' = ' THEN 1 ELSE 0 END) * 100.0 / COUNT(bond_id) as percent FROM bond WHERE molecule_id = 'TR008';
SELECT SUM(CASE WHEN label = '+' THEN 1 ELSE 0 END) * 100.0 / COUNT(molecule_id) as percent FROM molecule;
SELECT SUM(CASE WHEN element = 'h' THEN 1 ELSE 0 END) * 100.0 / COUNT(atom_id) as percent FROM atom WHERE molecule_id = 'TR206';
SELECT bond_type FROM bond WHERE molecule_id = 'TR000';
SELECT element FROM atom WHERE molecule_id = 'TR060' UNION SELECT label FROM molecule WHERE molecule_id = 'TR060';
SELECT MAX(bond_type), CASE WHEN label = '+' THEN 'carcinogenic' ELSE 'non-carcinogenic' END AS carcinogenic_status FROM molecule JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE molecule.molecule_id = 'TR018' GROUP BY label;
SELECT m.label FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id JOIN connected c ON b.bond_id = c.bond_id JOIN atom a1 ON c.atom_id = a1.atom_id JOIN atom a2 ON c.atom_id2 = a2.atom_id WHERE b.bond_type = 'single' AND m.label != '-' ORDER BY m.label LIMIT 3;
SELECT bond.bond_id, bond.bond_type FROM bond JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR006' ORDER BY bond.bond_id LIMIT 2;
SELECT COUNT(*) FROM bond WHERE molecule_id = 'TR009' AND bond_id LIKE 'TR009_%';
SELECT COUNT(DISTINCT m.label) FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id JOIN bond b ON m.molecule_id = b.molecule_id JOIN connected c ON b.bond_id = c.bond_id WHERE m.label = '+' AND a.element = 'br';
SELECT bond_type, atom_id, atom_id2 FROM bond JOIN connected ON bond.bond_id = connected.bond_id WHERE bond.bond_id = 'TR001_6_9';
SELECT molecule.label, molecule.molecule_id FROM molecule JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.atom_id = 'TR001_10';
SELECT COUNT(DISTINCT bond.molecule_id) FROM bond WHERE bond.bond_type = '#';
SELECT COUNT(*) FROM connected WHERE atom_id = (SELECT atom_id FROM atom WHERE atom_id LIKE 'TR%_19') ;
SELECT element FROM atom WHERE molecule_id = 'TR004';
SELECT COUNT(*) FROM molecule WHERE label = '-';
SELECT molecule.label FROM molecule WHERE molecule.molecule_id IN (SELECT atom.molecule_id FROM atom WHERE SUBSTR(atom.atom_id, 7, 2) BETWEEN '21' AND '25') AND molecule.label = '+'; 
SELECT bond.bond_id FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE atom.element = 'p' INTERSECT SELECT bond.bond_id FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE atom.element = 'n';
SELECT molecule.label FROM molecule JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_type = ' = ' GROUP BY molecule.molecule_id, molecule.label HAVING COUNT(bond.bond_id) = ( SELECT COUNT(bond.bond_id) FROM bond WHERE bond.bond_type = ' = ' GROUP BY molecule_id ORDER BY COUNT(bond.bond_id) DESC LIMIT 1 ) AND molecule.label = '+';
SELECT AVG(bonds_per_atom) FROM ( SELECT COUNT(bond_id) AS bonds_per_atom FROM atom JOIN bond ON atom.molecule_id = bond.molecule_id WHERE element = 'i' GROUP BY atom.atom_id ) as subquery;
SELECT bond.bond_type, connected.bond_id FROM connected JOIN atom ON connected.atom_id = atom.atom_id JOIN bond ON bond.bond_id = connected.bond_id WHERE atom.atom_id = 'ATOM45';
SELECT element FROM atom WHERE atom_id NOT IN (SELECT atom_id FROM connected);
SELECT atom.element FROM atom JOIN bond ON atom.molecule_id = bond.molecule_id JOIN connected ON bond.bond_id = connected.bond_id AND connected.atom_id = atom.atom_id WHERE atom.molecule_id = 'TR447' AND bond.bond_type = '#';
SELECT element FROM atom WHERE atom_id IN (SELECT atom_id FROM connected WHERE bond_id = 'TR144_8_19');
SELECT molecule.label, COUNT(bond_id) AS double_bonds FROM molecule JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE molecule.label = '+' AND bond.bond_type = ' = ' GROUP BY molecule.label ORDER BY double_bonds DESC LIMIT 1;
SELECT A.element FROM atom A JOIN molecule M ON A.molecule_id = M.molecule_id WHERE M.label = '+' GROUP BY A.element ORDER BY COUNT(*) ASC LIMIT 1;
SELECT atom.element, connected.atom_id2 FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE atom.element = 'pb';
SELECT element FROM atom JOIN connected ON connected.atom_id = atom.atom_id JOIN bond ON bond.bond_id = connected.bond_id WHERE bond.bond_type = '#'
SELECT COUNT(bond_id) * 100.0 / ( SELECT COUNT(atom_id) FROM connected GROUP BY atom_id ORDER BY COUNT(atom_id) DESC LIMIT 1 ) FROM connected;
SELECT SUM(CASE WHEN bond.bond_type = '-' THEN CASE WHEN molecule.label = '+' THEN 1 ELSE 0 END ELSE 0 END) * 1.0 / COUNT(bond.bond_id) FROM bond JOIN molecule ON bond.molecule_id = molecule.molecule_id;
SELECT atom.element, count( * ) as total_atoms FROM atom WHERE atom.element IN ('c', 'h') GROUP BY atom.element;
SELECT atom.atom_id FROM atom WHERE element = 's';
SELECT bond_type FROM bond JOIN atom ON bond.molecule_id = atom.molecule_id WHERE element = 'sn';
SELECT COUNT(DISTINCT atom.element) FROM bond JOIN molecule ON bond.molecule_id = molecule.molecule_id JOIN atom ON atom.molecule_id = molecule.molecule_id WHERE bond.bond_type = '-';
SELECT COUNT(DISTINCT atom.atom_id) FROM atom JOIN bond ON atom.molecule_id = bond.molecule_id JOIN connected ON bond.bond_id = connected.bond_id WHERE bond.bond_type = '#' AND (atom.element = 'p' OR atom.element = 'br');
SELECT bond.bond_id FROM molecule JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE molecule.label = '+';
SELECT molecule.molecule_id FROM molecule WHERE molecule.molecule_id NOT IN (SELECT molecule_id FROM bond WHERE bond_type = '-' AND molecule_id IN (SELECT molecule_id FROM molecule WHERE label = '-'));
SELECT SUM(CASE WHEN a.element = 'cl' THEN 1 ELSE 0 END) * 100.0 / COUNT(DISTINCT a.atom_id) as percent FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id JOIN bond b ON b.molecule_id = m.molecule_id JOIN connected c ON c.bond_id = b.bond_id AND c.atom_id = a.atom_id WHERE b.bond_type = '-';
SELECT m.label FROM molecule m WHERE m.molecule_id IN ('TR000', 'TR001', 'TR002');
SELECT molecule.molecule_id FROM molecule WHERE label = '-' ;
SELECT COUNT(*) FROM molecule WHERE molecule_id BETWEEN 'TR000' AND 'TR030' AND label = '+';
SELECT bond_type FROM bond WHERE molecule_id BETWEEN 'TR000' AND 'TR050';
SELECT element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_id = 'TR001_10_11';
SELECT COUNT(DISTINCT bond.bond_id) FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE atom.element = 'i';
SELECT molecule.label, MAX(molecule.label) as max_label FROM molecule JOIN atom ON molecule.molecule_id = atom.molecule_id JOIN bond ON molecule.molecule_id = bond.molecule_id JOIN connected ON bond.bond_id = connected.bond_id JOIN atom AS atom2 ON connected.atom_id2 = atom2.atom_id WHERE atom.element = 'ca' GROUP BY molecule.molecule_id;
SELECT bond.bond_id FROM bond JOIN molecule ON bond.molecule_id = molecule.molecule_id JOIN atom ON bond.molecule_id = atom.molecule_id JOIN connected ON bond.bond_id = connected.bond_id WHERE bond.bond_id = 'TR001_1_8' AND atom.element IN ('cl', 'c') GROUP BY bond.bond_id HAVING COUNT(DISTINCT atom.element) = 2;
SELECT molecule_id FROM molecule WHERE molecule_id IN ( SELECT molecule_id FROM bond WHERE bond_type = 'triple' ) AND molecule_id IN ( SELECT molecule_id FROM atom WHERE element = 'carbon' ) AND label = '-';
SELECT SUM(CASE WHEN element = 'cl' THEN 1 ELSE 0 END) * 100.0 / COUNT(DISTINCT molecule_id) as percentage FROM atom WHERE molecule_id IN (SELECT molecule_id FROM molecule WHERE label = '+');
SELECT element FROM atom WHERE molecule_id = 'TR001';
SELECT molecule_id FROM bond WHERE bond_type = ' = ';
SELECT atom_id, atom_id2 FROM connected JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_type = '#'
SELECT element FROM connected JOIN bond ON connected.bond_id = bond.bond_id JOIN atom ON connected.atom_id2 = atom.atom_id WHERE bond.bond_id = 'TR005_16_26' AND atom.element = 'cl';
SELECT COUNT(*) FROM molecule WHERE label = '-' AND molecule_id IN (SELECT molecule_id FROM bond WHERE bond_type = '-' );
SELECT label FROM bond JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond_id = 'TR001_10_11';
SELECT bond.bond_id, molecule.label FROM bond JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_type = '#' AND (molecule.label = '+' OR molecule.label = '-');
SELECT atom.element FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id JOIN bond ON bond.molecule_id = molecule.molecule_id JOIN connected ON connected.bond_id = bond.bond_id AND connected.atom_id = atom.atom_id WHERE molecule.label = '+' AND substr(atom.atom_id, 7, 1) = '4'
SELECT SUM(CASE WHEN element = 'h' THEN 1 ELSE 0 END) * 1.0 / COUNT(*), label FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.molecule_id = 'TR006';
SELECT molecule.label FROM molecule JOIN atom ON molecule.molecule_id = atom.molecule_id JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE atom.element = 'ca' AND molecule.label = '+';
SELECT bond_type FROM bond JOIN atom ON bond.molecule_id = atom.molecule_id WHERE element = 'te';
SELECT element FROM atom JOIN connected ON connected.atom_id = atom.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE connected.bond_id = 'TR001_10_11';
SELECT (CAST(COUNT(*) AS FLOAT) / (SELECT COUNT(*) FROM bond)) * 100 AS triple_bond_percentage FROM bond WHERE bond_type = '#';
SELECT SUM(CASE WHEN bond_type = ' = ' THEN 1 ELSE 0 END) * 100.0 / COUNT(bond_id) as percent FROM bond WHERE molecule_id = 'TR047';
SELECT label FROM molecule WHERE molecule_id = (SELECT molecule_id FROM atom WHERE atom_id = 'TR001_1');
SELECT label FROM molecule WHERE molecule_id = 'TR151';
SELECT element FROM atom WHERE molecule_id = 'TR151' AND element = 'br';
SELECT COUNT(DISTINCT molecule_id) FROM molecule WHERE label = '+';
SELECT atom.atom_id FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.element = 'c' AND substr(molecule.molecule_id, 3, 3) > '010' AND substr(molecule.molecule_id, 3, 3) < '050';
SELECT COUNT(*) FROM molecule JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '+'; 
SELECT b.bond_id FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id JOIN connected c ON b.bond_id = c.bond_id JOIN atom a ON m.molecule_id = a.molecule_id WHERE m.label = '+' AND b.bond_type = ' = ';
SELECT COUNT(*) FROM molecule JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '+' AND atom.element = 'h';
SELECT molecule.molecule_id FROM connected INNER JOIN bond ON connected.bond_id = bond.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE bond.bond_type = 'TR00_1_2' AND atom.element = 'TR00_1';
SELECT atom_id FROM atom WHERE element = 'c' AND atom.molecule_id NOT IN (SELECT molecule_id FROM molecule WHERE label = '-')
SELECT SUM(CASE WHEN molecule.label = '+' AND atom.element = 'h' THEN 1 ELSE 0 END) * 100.0 / COUNT(DISTINCT atom.molecule_id) FROM molecule JOIN atom ON atom.molecule_id = molecule.molecule_id JOIN connected ON connected.atom_id = atom.atom_id JOIN bond ON bond.bond_id = connected.bond_id WHERE atom.element = 'h';
SELECT label FROM molecule WHERE molecule_id = "TR124"
SELECT element FROM atom WHERE molecule_id = 'TR186';
SELECT bond_type FROM bond WHERE bond_id = 'TR007_4_19';
SELECT element FROM atom JOIN connected ON connected.atom_id = atom.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_id = 'TR001_2_4';
SELECT COUNT(*) FROM bond WHERE molecule_id = 'TR006' AND bond_type = ' = ';
SELECT molecule.label, atom.element FROM molecule JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '+';
SELECT bond.bond_id, bond.bond_type, connected.atom_id, connected.atom_id2 FROM bond JOIN connected ON bond.bond_id = connected.bond_id WHERE bond.bond_type = '-';
SELECT bond.molecule_id, element FROM molecule JOIN bond ON molecule.molecule_id = bond.molecule_id JOIN connected ON bond.bond_id = connected.bond_id JOIN atom ON connected.atom_id = atom.atom_id WHERE bond_type = '#' AND element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca');
SELECT element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_id = 'TR000_2_3';
SELECT COUNT(*) FROM atom JOIN connected ON connected.atom_id = atom.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE atom.element = 'cl';
SELECT atom_id, COUNT(DISTINCT bond_type) FROM atom JOIN bond ON atom.molecule_id = bond.molecule_id WHERE atom.molecule_id = 'TR346' GROUP BY atom_id;
SELECT COUNT(DISTINCT molecule.molecule_id) FROM bond JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_type = ' = ' AND molecule.label = '+';
SELECT COUNT(DISTINCT molecule.molecule_id) FROM molecule LEFT JOIN atom ON molecule.molecule_id = atom.molecule_id LEFT JOIN bond ON molecule.molecule_id = bond.molecule_id LEFT JOIN connected ON bond.bond_id = connected.bond_id AND connected.atom_id = atom.atom_id WHERE atom.element != 's' OR bond.bond_type != ' = ';
SELECT m.label FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id WHERE b.bond_id = 'TR001_2_4' AND m.label = '+';
SELECT COUNT(*) FROM atom WHERE molecule_id = 'TR005';
SELECT COUNT(*) FROM bond WHERE bond_type = '-';
SELECT label FROM molecule WHERE molecule_id IN ( SELECT molecule_id FROM atom WHERE element = 'cl' );
SELECT m.label FROM molecule m WHERE m.molecule_id IN ( SELECT DISTINCT m1.molecule_id FROM molecule m1 JOIN atom a ON m1.molecule_id = a.molecule_id JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE a.element = 'c' ) AND m.label != '-'; 
SELECT SUM(CASE WHEN molecule.label = '+' AND atom.element = 'cl' THEN 1 ELSE 0 END) * 100.0 / COUNT(DISTINCT molecule.molecule_id) as percentage FROM molecule JOIN atom ON molecule.molecule_id = atom.molecule_id;
SELECT molecule_id FROM bond WHERE bond_id = 'TR001_1_7';
SELECT COUNT(DISTINCT element) FROM connected JOIN atom ON connected.atom_id = atom.atom_id WHERE bond_id = 'TR001_3_4';
SELECT bond.bond_type FROM bond JOIN connected ON bond.bond_id = connected.bond_id JOIN atom ON connected.atom_id = atom.atom_id WHERE atom.atom_id = 'TR000_1' AND connected.atom_id2 = 'TR000_2';
SELECT molecule.label FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.atom_id = 'TR000_2' INTERSECT SELECT molecule.label FROM atom JOIN connected ON atom.atom_id = connected.atom_id2 JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.atom_id = 'TR000_4';
SELECT element FROM atom WHERE atom_id = 'TR000_1';
SELECT label FROM molecule WHERE molecule_id = 'TR000';
SELECT SUM(CASE WHEN bond_type = '-' THEN 1 ELSE 0 END) * 100.0 / COUNT(bond_id) AS percentage FROM bond;
SELECT COUNT(DISTINCT molecule.molecule_id) FROM molecule JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element = 'n' AND molecule.label = '+';
SELECT molecule.label FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id INNER JOIN connected ON atom.atom_id = connected.atom_id INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE atom.element = 's' AND bond.bond_type = ' = ';
SELECT molecule.label, COUNT(atom.atom_id) FROM molecule JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '-' GROUP BY molecule.molecule_id HAVING COUNT(atom.atom_id) > 5;
SELECT element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_type = ' = ' AND atom.molecule_id = 'TR024';
SELECT label, MAX(total_atoms) FROM ( SELECT m.label, COUNT(a.atom_id) as total_atoms FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE m.label = '+' GROUP BY m.molecule_id ) as subquery;
SELECT (COUNT(DISTINCT molecule_id) * 100.0) / (SELECT COUNT(DISTINCT molecule_id) FROM molecule) FROM atom WHERE element = 'h' AND molecule_id IN (SELECT molecule_id FROM bond WHERE bond_type = '#') AND molecule_id IN (SELECT molecule_id FROM molecule WHERE label = '+');
SELECT COUNT(DISTINCT molecule_id) FROM molecule WHERE label = '+';
SELECT COUNT(*) FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id WHERE m.molecule_id BETWEEN 'TR004' AND 'TR010' AND b.bond_type = '-';
SELECT COUNT(*) FROM atom WHERE element = 'c' AND molecule_id = 'TR008';
SELECT element FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE atom.atom_id = 'TR004_7' AND label = '-'; 
SELECT COUNT(DISTINCT molecule.molecule_id) FROM molecule JOIN bond ON molecule.molecule_id = bond.molecule_id JOIN connected ON bond.bond_id = connected.bond_id JOIN atom ON atom.atom_id = connected.atom_id WHERE atom.element = 'o' AND bond.bond_type = ' = ';
SELECT COUNT(DISTINCT molecule.molecule_id) FROM bond JOIN molecule ON bond.molecule_id = molecule.molecule_id JOIN connected ON connected.bond_id = bond.bond_id JOIN atom ON connected.atom_id = atom.atom_id WHERE bond.bond_type = '#' AND molecule.label = '-';
SELECT element, bond_type FROM atom JOIN bond ON atom.molecule_id = bond.molecule_id JOIN connected ON bond.bond_id = connected.bond_id WHERE atom.molecule_id = 'TR016';
SELECT connected.atom_id FROM atom JOIN bond ON atom.molecule_id = bond.molecule_id JOIN connected ON atom.atom_id = connected.atom_id AND bond.bond_id = connected.bond_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR012' AND element = 'c' AND bond_type = ' = '
SELECT atom_id FROM atom WHERE molecule_id IN (SELECT molecule_id FROM molecule WHERE label = '+') AND element = 'o';
SELECT `name` FROM cards WHERE cardkingdomfoilid = cardkingdomid AND cardkingdomid IS NOT NULL;
SELECT ```sql name FROM cards WHERE bordercolor = 'borderless' AND (cardkingdomfoilid IS NULL OR cardkingdomid IS NULL) ```
SELECT name, MAX(faceconvertedmanacost) as max_converted_mana_cost FROM cards GROUP BY name;
SELECT name FROM cards WHERE frameversion = '2015' AND edhrecrank < 100;
SELECT name FROM cards JOIN legalities ON cards.uuid = legalities.uuid WHERE rarity = 'mythic' AND legalities.format = 'gladiator' AND legalities.status = 'Banned';
SELECT c.name, l.status FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE c.types = 'Artifact' AND c.side IS NULL AND l.format = 'vintage';
SELECT cards.id, cards.artist FROM cards JOIN legalities ON cards.uuid = legalities.uuid WHERE format = 'commander' AND (power = '*' OR power IS NULL);
SELECT cards.name, rulings.text FROM cards JOIN rulings ON cards.uuid = rulings.uuid WHERE cards.artist = 'Stephen Daniele';
SELECT rulings.text FROM cards JOIN rulings ON cards.uuid = rulings.uuid WHERE cards.name = 'Sublime Epiphany' AND cards.number = '74s';
SELECT name, artist, ispromo FROM cards WHERE uuid IN (SELECT uuid FROM rulings GROUP BY uuid ORDER BY count(uuid) DESC LIMIT 1) AND ispromo = 1;
SELECT name FROM cards WHERE number = '29' AND name = 'Annul';
SELECT name FROM cards WHERE uuid IN (SELECT uuid FROM foreign_data WHERE language = 'Japanese');
SELECT SUM(CASE WHEN language = 'Chinese Simplified' THEN 1 ELSE 0 END) * 100.0 / COUNT(id) AS percentage FROM foreign_data;
SELECT sets.name, sets.totalsetsize FROM sets JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.language = 'Italian';
SELECT COUNT(DISTINCT types) FROM cards WHERE artist = 'Aaron Boyd';
SELECT keywords FROM cards WHERE name = 'Angel of Mercy';
SELECT COUNT(*) FROM cards WHERE power = '*';
SELECT `promoTypes` FROM cards WHERE name = 'Duress';
SELECT bordercolor FROM cards WHERE name = "Ancestor's Chosen";
SELECT originaltype FROM cards WHERE name = "Ancestor's Chosen";
SELECT foreign_data.language FROM cards JOIN sets ON cards.setcode = sets.code JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.name = 'Angel of Mercy';
SELECT count(*) FROM legalities JOIN cards ON legalities.uuid = cards.uuid WHERE status = 'Restricted' AND istextless = 0;
SELECT text FROM rulings WHERE rulings.uuid = (SELECT uuid FROM cards WHERE name = 'Condemn');
SELECT count(*) FROM legalities JOIN cards ON legalities.uuid = cards.uuid JOIN sets ON cards.id = sets.id WHERE legalities.status = 'Restricted' AND sets.type = 'starter' AND cards.isStarter = 1;
SELECT status FROM cards JOIN legalities ON cards.uuid = legalities.uuid WHERE name = "Cloudchaser Eagle";
SELECT type FROM cards WHERE name = 'Benalish Knight';
SELECT name, text FROM cards WHERE name = 'Benalish Knight';
SELECT artist FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid JOIN sets ON cards.uuid = set_translations.setcode JOIN set_translations ON sets.code = set_translations.setcode WHERE foreign_data.language = 'Phyrexian';
SELECT COUNT(id) * 100.0 / (SELECT COUNT(id) FROM cards) AS percentage FROM cards WHERE borderColor = 'borderless';
SELECT COUNT(cards.uuid) FROM foreign_data JOIN cards ON foreign_data.uuid = cards.uuid WHERE foreign_data.language = 'German' AND cards.isReprint = 1;
SELECT count(distinct cards.uuid) FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid JOIN sets ON cards.id = sets.id JOIN set_translations ON sets.code = set_translations.setcode WHERE cards.bordercolor = 'borderless' AND foreign_data.language = 'Russian';
SELECT COUNT(cards.id) * 100.0 / (SELECT COUNT(id) FROM cards WHERE isStorySpotlight = 1) AS percentage FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE isStorySpotlight = 1 AND foreign_data.language = 'French';
SELECT count(*) FROM cards WHERE toughness = 99;
SELECT name FROM cards WHERE artist = 'Aaron Boyd';
SELECT COUNT(*) FROM cards WHERE bordercolor = 'black' AND availability = 'mtgo';
SELECT `id` FROM cards WHERE convertedmanacost = 0;
SELECT layout FROM cards WHERE keywords LIKE '%Flying%';
SELECT COUNT(*) FROM cards WHERE originaltype = 'Summon - Angel' AND subtypes != 'Angel';
SELECT cards.cardkingdomfoilid FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid JOIN sets ON cards.id = sets.id WHERE cards.hasfoil = 1 AND cards.cardkingdomfoilid IS NOT NULL AND cards.cardkingdomid IS NOT NULL;
SELECT cards.id FROM cards WHERE dueldeck = 'a';
SELECT edhrecrank FROM cards WHERE frameversion = '2015';
SELECT artist FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'Chinese Simplified';
SELECT name FROM cards WHERE availability = 'paper' INTERSECT SELECT name FROM foreign_data WHERE language = 'Japanese';
SELECT count(*) FROM legalities JOIN cards ON legalities.uuid = cards.uuid WHERE status = 'Banned' AND borderColor = 'white';
SELECT cards.uuid, foreign_data.language FROM cards JOIN legalities ON cards.uuid = legalities.uuid JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE legalities.format = 'legacy';
SELECT text FROM rulings WHERE uuid = (SELECT uuid FROM cards WHERE name = 'Beacon of Immortality');
SELECT count(*), status FROM cards JOIN legalities ON cards.uuid = legalities.uuid WHERE frameversion = 'future' AND status = 'legal' GROUP BY status;
SELECT name, colors FROM cards WHERE setCode = 'OGW';
SELECT cards.name, set_translations.language FROM cards JOIN set_translations ON cards.setcode = set_translations.setcode WHERE cards.setcode = '10E' AND cards.convertedmanacost = 5 AND set_translations.translation IS NOT NULL;
SELECT name, date FROM cards JOIN rulings ON cards.uuid = rulings.uuid WHERE originaltype = 'Creature - Elf';
SELECT colors, format FROM cards JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.id BETWEEN 1 AND 20;
SELECT cards.name FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.originalType = 'Artifact' AND cards.colors = 'B' AND foreign_data.language <> 'en' ;
SELECT name FROM cards WHERE rarity = 'uncommon' ORDER BY (SELECT MIN(date) FROM rulings WHERE rulings.uuid = cards.uuid) ASC LIMIT 3;
SELECT count(*) FROM cards WHERE artist = 'John Avon' AND name = 'Foil' AND cardkingdomfoilid IS NOT NULL;
SELECT count(*) FROM cards WHERE bordercolor = 'white' AND cardkingdomfoilid = cardkingdomid AND cardkingdomid IS NOT NULL;
SELECT count(*) FROM cards WHERE artist = 'UDON' AND availability = 'mtgo' AND hand = -1;
SELECT COUNT(*) FROM cards WHERE frameversion = 1993 AND availability = 'paper' AND hascontentwarning = 1;
SELECT manacost FROM cards WHERE layout = 'normal' AND frameversion = 2003 AND bordercolor = 'black' AND availability IN ('paper','mtgo');
SELECT sum(cards.convertedmanacost) as total_unconverted_mana FROM cards WHERE artist = "Rob Alexander";
SELECT types FROM cards WHERE availability = 'arena';
SELECT setcode FROM set_translations WHERE language = 'Spanish';
SELECT COUNT(*) * 100.0 / (SELECT COUNT(*) FROM cards WHERE frameeffects = 'legendary') FROM cards WHERE frameeffects = 'legendary' AND hand = '+3';
SELECT cards.id FROM cards WHERE isStoryspotlight = 1 AND istextless = 0 INTERSECT SELECT cards.id FROM cards WHERE isStoryspotlight = 1;
SELECT SUM(CASE WHEN language = 'Spanish' THEN 1 ELSE 0 END) * 100.0 / COUNT(id) AS percentage, name FROM foreign_data GROUP BY name;
SELECT language FROM set_translations WHERE setcode = (SELECT code FROM sets WHERE totalsetsize = 309);
SELECT count(*) FROM sets JOIN set_translations ON sets.code = set_translations.setcode WHERE block = 'Commander' AND set_translations.language = 'Portuguese (Brasil)';
SELECT cards.name FROM cards JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.types = 'Creature' AND legalities.status = 'Legal';
SELECT Distinct type FROM cards WHERE subtypes is not null AND supertypes is not null;
SELECT COUNT(*) FROM cards WHERE power IS NULL AND text LIKE '%triggered ability%';
SELECT count(*) FROM cards JOIN rulings ON cards.uuid = rulings.uuid JOIN sets ON cards.originalreleasedate = sets.releasedate WHERE rulings.text = "This is a triggered mana ability." AND side IS NULL;
SELECT cards.id FROM cards JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.artist = 'Erica Yang' AND legalities.format = 'pauper' AND cards.availability = 'paper';
SELECT cards.artist FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.flavortext = "Das perfekte Gegenmittel zu einer dichten Formation";
SELECT foreign_data.name FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.layout = 'normal' AND cards.bordercolor = 'black' AND cards.artist = 'Matthew D. Wilson' AND cards.type = 'Creature';
SELECT COUNT(DISTINCT cards.id) FROM cards JOIN rulings ON cards.uuid = rulings.uuid WHERE cards.rarity = 'rare' AND rulings.date = '2009-01-10';
SELECT language FROM set_translations WHERE setcode IN (SELECT code FROM sets WHERE block = 'Ravnica' AND totalsetsize = 180);
SELECT COUNT(*) * 100.0 / (SELECT COUNT(*) FROM cards JOIN legalities ON cards.uuid = legalities.uuid WHERE format = 'commander' AND status = 'Legal') FROM cards JOIN legalities ON cards.uuid = legalities.uuid WHERE format = 'commander' AND hasContentWarning = 0 AND status = 'Legal';
SELECT (COUNT(*) * 100.0) / (SELECT COUNT(*) FROM cards WHERE power IS NULL OR power = '*') AS percentage FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE language = 'French' AND (power IS NULL OR power = '*');
SELECT COUNT(*) * 100.0 / (SELECT COUNT(*) FROM set_translations WHERE language = 'Japanese') AS percentage_expansion_sets_japanese FROM set_translations JOIN sets ON set_translations.setcode = sets.code WHERE set_translations.language = 'Japanese' AND sets.type = 'expansion';
SELECT availability FROM cards WHERE artist = 'Daren Bader';
SELECT count(*) FROM cards WHERE bordercolor = 'borderless' AND edhrecrank > 12000;
SELECT COUNT(*) FROM cards WHERE isOversized = 1 UNION SELECT COUNT(*) FROM cards WHERE isReprint = 1 UNION SELECT COUNT(*) FROM cards WHERE isPromo = 1;
SELECT cards.id, cards.uuid, cards.power FROM cards JOIN legalities ON cards.uuid = legalities.uuid WHERE (cards.power IS NULL OR cards.power = '*') AND legalities.format = 'unknown power cards' AND legalities.status = 'arenaleague' ORDER BY cards.id LIMIT 3;
SELECT language FROM foreign_data WHERE multiverseid = 149934;
SELECT `cardkingdomfoilid`, `cardkingdomid` FROM cards WHERE cardkingdomfoilid IS NOT NULL AND cardkingdomid IS NOT NULL ORDER BY cardkingdomfoilid LIMIT 3;
SELECT COUNT(*) * 100.0 / (SELECT COUNT(*) FROM cards) FROM cards WHERE isTextless = 1 AND layout = 'normal';
SELECT `number` FROM cards WHERE `side` IS NULL AND `subtypes` LIKE '%Angel%' AND `subtypes` LIKE '%Wizard%' AND `uuid` NOT IN ( SELECT `uuid` FROM cards GROUP BY `uuid` HAVING COUNT(*) > 1 );
SELECT sets.name FROM sets LEFT JOIN cards ON sets.code = cards.setcode WHERE (sets.mtgocode IS NULL OR sets.mtgocode = '') GROUP BY sets.name ORDER BY sets.name LIMIT 3;
SELECT language FROM set_translations WHERE setcode = 'ARC' AND translation = 'Archenemy';
SELECT name, translation FROM sets JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.id = 5;
SELECT language, type FROM set_translations JOIN sets ON set_translations.setcode = sets.code WHERE sets.id = 206;
SELECT sets.id, sets.name FROM sets JOIN set_translations ON sets.code = set_translations.setcode JOIN cards ON sets.code = cards.setcode JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'Italian' AND sets.block = 'Shadowmoor' ORDER BY sets.name LIMIT 2;
SELECT sets.code FROM sets WHERE sets.isForeignOnly = 1 AND sets.isFoilOnly = 1 AND sets.code IN (SELECT setcode FROM set_translations WHERE set_translations.language = 'Japanese');
SELECT sets.name FROM sets JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.language = 'Russian' ORDER BY sets.baseSetSize DESC LIMIT 1;
SELECT COUNT(*) * 100 / (SELECT COUNT(*) FROM cards) AS percentage FROM cards WHERE isOnlineOnly = 1 AND setcode IN (SELECT code FROM sets WHERE isOnlineOnly = 1) AND uuid IN (SELECT uuid FROM foreign_data WHERE language = 'Chinese Simplified');
SELECT count(*) FROM sets WHERE isonlineonly = 0 AND releasedate IS NOT NULL AND code IN (SELECT setcode FROM set_translations WHERE language = 'Japanese') AND code NOT IN (SELECT setcode FROM cards WHERE mtgoCode IS NULL OR mtgoCode = '');
SELECT `id` FROM cards WHERE bordercolor = 'black';
SELECT id FROM cards WHERE frameeffects = 'extendedart';
SELECT asciiname FROM cards WHERE bordercolor = 'black' AND isfullart = 1;
SELECT language FROM set_translations WHERE setcode = (SELECT code FROM sets WHERE id = '174');
SELECT name FROM sets WHERE code = 'ALL';
SELECT language FROM foreign_data WHERE name = 'A Pedra Fellwar';
SELECT code FROM sets WHERE releasedate = '07/13/2007';
SELECT basesetsize, code FROM sets WHERE block IN ('Masques', 'Mirage');
SELECT code FROM sets WHERE type = 'expansion';
SELECT foreign_data.name, foreign_data.type FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.watermark = 'boros';
SELECT foreign_data.language, foreign_data.flavortext, cards.type FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid JOIN sets ON cards.flavorname = sets.name JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.name = 'colorpie watermark';
SELECT (COUNT(*) * 100.0) / (SELECT COUNT(*) FROM cards WHERE setcode = (SELECT code FROM sets WHERE name = 'Abyssal Horror')) FROM cards WHERE setcode = (SELECT code FROM sets WHERE name = 'Abyssal Horror') AND convertedmanacost = 10;
SELECT `code` FROM sets WHERE type = 'expansion';
SELECT foreign_data.name, foreign_data.type FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.watermark = "abzan";
SELECT language, type FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE watermark = 'azorius';
SELECT artist, COUNT(*) FROM cards WHERE artist = 'Aaron Miller' AND cardkingdomfoilid = cardkingdomid AND cardkingdomid IS NOT NULL;
SELECT COUNT(*) FROM cards WHERE availability LIKE '%paper%' AND hand LIKE '+%';
SELECT name FROM cards WHERE istextless = 0;
SELECT convertedmanacost FROM cards WHERE name = 'Ancestor`s Chosen';
SELECT COUNT(*) FROM cards WHERE bordercolor = 'white' AND (power = '*' OR power IS NULL);
SELECT `name` FROM cards WHERE ispromo = 1 AND side IS NOT NULL;
SELECT subtypes, supertypes FROM cards WHERE name = 'Molimo, Maro-Sorcerer';
SELECT purchaseurls FROM cards WHERE promotypes = 'bundle';
SELECT count(DISTINCT artist) FROM cards WHERE bordercolor = 'black' AND availability LIKE '%arena%' AND availability LIKE '%mtgo%';
SELECT name, convertedmanacost FROM cards WHERE name IN ('Serra Angel', 'Shrine Keeper') ORDER BY convertedmanacost DESC LIMIT 1;
SELECT artist FROM cards WHERE flavorname = 'Battra, Dark Destroyer';
SELECT name FROM cards WHERE frameversion = '2003' ORDER BY convertedmanacost DESC LIMIT 3;
SELECT foreign_data.name FROM foreign_data JOIN cards ON foreign_data.uuid = cards.uuid WHERE cards.name = 'Ancestor''s Chosen' AND foreign_data.language = 'Italian';
SELECT count(distinct set_translations.translation) as num_translations FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid JOIN sets ON cards.setcode = sets.code JOIN set_translations ON sets.code = set_translations.setcode WHERE cards.name = 'Angel of Mercy';
SELECT cards.name FROM cards JOIN set_translations ON cards.setcode = set_translations.setcode WHERE set_translations.translation = 'Hauptset Zehnte Edition';
SELECT ```sql SELECT c.name FROM cards c JOIN foreign_data f ON c.uuid = f.uuid WHERE c.name = 'Ancestor\'s Chosen' AND f.language = 'Korean'; ```
SELECT COUNT(*) FROM cards JOIN set_translations ON cards.setcode = set_translations.setcode WHERE set_translations.translation = 'Hauptset Zehnte Edition' AND cards.artist = 'Adam Rex';
SELECT basesetsize FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.translation = 'Hauptset Zehnte Edition';
SELECT translation FROM set_translations WHERE setcode = (SELECT code FROM sets WHERE name = 'Eighth Edition') AND language = 'Simplified Chinese';
SELECT name FROM cards WHERE name = 'Angel of Mercy' AND mtgoCode IS NOT NULL;
SELECT releasedate FROM sets WHERE code = (SELECT setcode FROM cards WHERE name = 'Ancestor''s Chosen');
SELECT type FROM sets JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.translation = 'Hauptset Zehnte Edition';
SELECT COUNT(*) FROM sets WHERE block = 'Ice Age' AND code IN (SELECT setcode FROM set_translations WHERE language = 'Italian');
SELECT name FROM cards WHERE name = 'Adarkar Valkyrie' AND availability = '1';
SELECT sets.name FROM sets JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.language = 'Italian' AND sets.basesetsize < 10;
SELECT count(*) FROM cards WHERE setcode = (SELECT code FROM sets WHERE name = 'Coldsnap') AND bordercolor = 'black';
SELECT name FROM cards WHERE setcode = 'CSP' ORDER BY convertedmanacost DESC LIMIT 1;
SELECT artist FROM cards WHERE setcode = (SELECT code FROM sets WHERE name = 'Coldsnap') AND artist IN ('Jeremy Jarvis', 'Aaron Miller','Chippy');
SELECT number FROM cards WHERE setcode = (SELECT code FROM sets WHERE name = 'Coldsnap') AND number = 4;
SELECT count(*) FROM cards WHERE setcode = (SELECT code FROM sets WHERE name = 'Coldsnap') AND convertedmanacost > 5 AND (power = '*' OR power is null);
SELECT flavorText FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE name = 'Ancestor''s Chosen' AND language = 'Italian';
SELECT language FROM foreign_data WHERE name = 'Ancestor''s Chosen' AND flavorText IS NOT NULL;
SELECT set_translations.translation FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid JOIN set_translations ON cards.setcode = set_translations.setcode JOIN sets ON set_translations.setcode = sets.code WHERE foreign_data.name = 'Ancestor''s Chosen' AND foreign_data.language = 'German';
SELECT foreign_data.text FROM foreign_data JOIN sets ON foreign_data.id = sets.id JOIN set_translations ON sets.code = set_translations.setcode JOIN rulings ON foreign_data.multiverseid = rulings.uuid WHERE sets.name = 'Coldsnap' AND foreign_data.language = 'Italian';
SELECT cards.name FROM cards WHERE setcode = 'CSP' ORDER BY convertedmanacost DESC LIMIT 1;
SELECT date FROM rulings WHERE uuid = (SELECT uuid FROM cards WHERE name = 'Reminisce') LIMIT 1;
SELECT SUM(CASE WHEN convertedManaCost = 7 THEN 1 ELSE 0 END) * 100.0 / SUM(1) AS percentage FROM cards WHERE setcode = (SELECT code FROM sets WHERE name = 'Coldsnap');
SELECT SUM(CASE WHEN cards.cardkingdomfoilid = cards.cardkingdomid AND cards.cardkingdomid IS NOT NULL THEN 1 ELSE 0 END) * 100.0 / (SELECT COUNT(*) FROM cards WHERE setcode = 'Coldsnap') FROM cards WHERE setcode = 'Coldsnap';
SELECT code FROM sets WHERE releasedate = '2017-07-14';
SELECT keyrunecode FROM sets WHERE code = 'PKHC';
SELECT mcmid FROM sets WHERE code = 'SS2';
SELECT mcmname FROM sets WHERE releasedate = '2017-06-09';
SELECT type FROM sets WHERE name = 'From the Vault: Lore';
SELECT parentcode FROM sets WHERE name = 'Commander 2014 Oversized';
SELECT cards.text, rulings.text, cards.hasContentWarning FROM cards JOIN rulings ON cards.uuid = rulings.uuid WHERE cards.artist = 'Jim Pavelec';
SELECT releasedate FROM sets JOIN cards ON sets.code = cards.setcode WHERE cards.name = 'Evacuation';
SELECT basesetsize FROM sets WHERE code = (SELECT setcode FROM set_translations WHERE translation = 'Rinascita di Alara');
SELECT sets.type FROM sets JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.translation = 'Huiti��me ��dition';
SELECT foreign_data.name FROM foreign_data JOIN cards ON foreign_data.uuid = cards.uuid JOIN sets ON cards.setcode = sets.code JOIN set_translations ON sets.code = set_translations.setcode WHERE cards.name = 'Tendo Ice Bridge' AND foreign_data.language = 'French';
SELECT COUNT(translation) FROM set_translations INNER JOIN sets ON set_translations.setcode = sets.code WHERE sets.name = 'Salvat 2011' AND set_translations.translation IS NOT NULL;
SELECT set_translations.translation FROM set_translations JOIN sets ON set_translations.setcode = sets.code JOIN cards ON cards.setcode = sets.code JOIN foreign_data ON foreign_data.uuid = cards.uuid WHERE cards.name = 'Fellwar Stone' and foreign_data.language = 'Japanese';
SELECT name FROM cards WHERE setcode = (SELECT code FROM sets WHERE name = 'Journey into Nyx Hero''s Path') ORDER BY convertedmanacost DESC LIMIT 1;
SELECT releasedate FROM sets JOIN set_translations ON sets.code = set_translations.setcode WHERE translation = 'Ola de fr��o';
SELECT type FROM sets WHERE code = (SELECT setcode FROM cards WHERE name = 'Samite Pilgrim');
SELECT count(*) FROM cards JOIN sets ON cards.setcode = sets.code WHERE sets.name = 'World Championship Decks 2004' AND cards.convertedmanacost = 3;
SELECT translation FROM set_translations WHERE language = 'Chinese Simplified' AND setcode = (SELECT code FROM sets WHERE name = 'Mirrodin');
SELECT SUM(CASE WHEN language = 'Japanese' THEN 1 ELSE 0 END) * 100.0 / SUM(CASE WHEN language = 'Japanese' THEN 1 ELSE 0 END) as percentage_japanese_nonfoil FROM foreign_data WHERE language = 'Japanese';
SELECT SUM(CASE WHEN cards.isOnlineOnly = 1 THEN 1 ELSE 0 END) * 100.0 / SUM(CASE WHEN foreign_data.language = 'Portuguese (Brazil)' THEN 1 ELSE 0 END) AS percentage_online_only_brazil_portuguese FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid;
SELECT `availability` FROM cards WHERE artist <> 'Aleksi Briclot' AND isTextless = 1;
SELECT id FROM sets ORDER BY baseSetSize DESC LIMIT 1;
SELECT artist FROM cards WHERE side IS NULL ORDER BY convertedmanacost DESC LIMIT 1;
SELECT `frameeffects` FROM cards WHERE hasfoil = 1 AND cardkingdomfoilid IS NOT NULL AND cardkingdomid IS NOT NULL GROUP BY frameeffects ORDER BY COUNT(*) DESC LIMIT 1;
SELECT COUNT(*) FROM cards WHERE (power IS NULL OR power = '*') AND hasFoil = 0 AND dueldeck = 'A';
SELECT id FROM sets WHERE type = 'commander' AND code NOT LIKE '%Alchemy%' ORDER BY totalsetsize DESC LIMIT 1;
SELECT cards.name, MAX(cards.convertedmanacost) as max_converted_mana_cost FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.format = 'duel' GROUP BY cards.name ORDER BY max_converted_mana_cost DESC LIMIT 10;
SELECT MIN(cards.originalreleasedate) as oldest_release_date, legalities.format FROM cards JOIN legalities ON legalities.uuid = cards.uuid WHERE cards.rarity = 'mythic' AND legalities.status = 'legal';
SELECT artist, count(*) FROM cards WHERE artist = 'Volkan Baga' AND uuid IN (SELECT uuid FROM foreign_data WHERE language = 'French');
SELECT count(*) FROM cards JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.name = 'Abundance' AND cards.rarity = 'rare' AND cards.types = 'Enchantment' AND legalities.status = 'Legal';
SELECT `format`, `name` FROM legalities JOIN cards ON legalities.uuid = cards.uuid WHERE status = 'Banned' GROUP BY format ORDER BY COUNT(*) DESC LIMIT 1;
SELECT language FROM sets JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.name = 'Battlebond';
SELECT artist, layout FROM cards WHERE artist = ( SELECT artist FROM cards GROUP BY artist ORDER BY COUNT(*) ASC LIMIT 1 )
SELECT `status` FROM cards JOIN legalities ON cards.uuid = legalities.uuid WHERE frameversion = '1997' AND artist = 'D. Alexander Gregory' AND (hascontentwarning = 1 OR name LIKE '%Wizards of the Coast%') AND format = 'legacy';
SELECT name, format FROM cards JOIN legalities ON cards.uuid = legalities.uuid WHERE edhrecrank = 1 AND status = 'Banned';
SELECT AVG(totalsetsize), MAX(language) FROM sets JOIN cards ON sets.code = cards.setcode JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE releasedate BETWEEN '2012-01-01' AND '2015-12-31';
SELECT artist FROM cards WHERE bordercolor = 'black' AND availability = 'arena';
SELECT `uuid` FROM legalities WHERE format = 'oldschool' AND status IN ('Banned', 'Restricted');
SELECT COUNT(*) FROM cards WHERE artist = 'Matthew D. Wilson' AND availability = 'paper';
SELECT rulings.text, rulings.date FROM cards JOIN rulings ON cards.uuid = rulings.uuid WHERE cards.artist = 'Kev Walker' ORDER BY rulings.date DESC;
SELECT cards.name FROM cards JOIN sets ON cards.setcode = sets.code JOIN legalities ON cards.uuid = legalities.uuid JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.name = 'Hour of Devastation' AND legalities.status = 'Legal';
SELECT name FROM sets WHERE code IN (SELECT setcode FROM set_translations WHERE language = 'Korean') AND code NOT IN (SELECT setcode FROM set_translations WHERE language = 'Japanese');
SELECT frameversion, c.name FROM cards c JOIN foreign_data f ON c.uuid = f.uuid LEFT JOIN legalities l ON c.uuid = l.uuid WHERE c.artist = 'Allen Williams' AND l.status = 'Banned';
SELECT displayname, max(reputation) as highest_reputation FROM users WHERE displayname IN ("Harlan", "Jarrod Dixon");
SELECT displayname FROM users WHERE strftime('%Y', CreationDate) = '2014';
SELECT COUNT(*) FROM users WHERE LastAccessDate > '2014-09-01 00:00:00';
SELECT displayname FROM users ORDER BY views DESC LIMIT 1;
SELECT COUNT(*) FROM users WHERE upvotes > 100 AND downvotes > 1;
SELECT COUNT(*) FROM users WHERE views > 10 AND creationdate > '2013-01-01';
SELECT COUNT(*) FROM posts JOIN users ON posts.owneruserid = users.id WHERE users.displayname = "csgillespie";
SELECT title FROM posts JOIN users ON posts.owneruserid = users.id WHERE users.displayname = 'csgillespie';
SELECT ownerdisplayname FROM posts WHERE title = "Eliciting priors from experts";
SELECT posts.title FROM posts JOIN users ON posts.owneruserid = users.id WHERE users.displayname = "csgillespie" ORDER BY posts.viewcount DESC LIMIT 1;
SELECT users.displayname FROM users JOIN posts ON users.id = posts.owneruserid ORDER BY posts.favoritecount DESC LIMIT 1;
SELECT SUM(posts.commentcount) AS total_comments FROM posts JOIN users ON posts.owneruserid = users.id WHERE users.displayname = "csgillespie";
SELECT answercount FROM posts JOIN users ON posts.owneruserid = users.id WHERE displayname = "csgillespie" ORDER BY answercount DESC LIMIT 1;
SELECT users.displayname FROM users JOIN posts ON users.id = posts.lasteditoruserid WHERE posts.title = 'Examples for teaching: Correlation does not mean causation';
SELECT COUNT(*) FROM posts WHERE owneruserid = (SELECT id FROM users WHERE displayname = 'csgillespie') AND posttypeid = 1;
SELECT displayname FROM posts JOIN users ON posts.owneruserid = users.id WHERE closeddate IS NOT NULL;
SELECT count(*) FROM posts JOIN users ON posts.owneruserid = users.id WHERE age > 65 AND score >= 20;
SELECT users.location FROM posts JOIN users ON posts.owneruserid = users.id WHERE posts.title = 'Eliciting priors from experts';
SELECT body FROM posts JOIN tags ON posts.id = tags.excerptpostid WHERE tagname = 'bayesian';
SELECT posts.body FROM posts JOIN tags ON posts.id = tags.excerptpostid WHERE tags.count = (SELECT MAX(count) FROM tags);
SELECT COUNT(*) FROM badges WHERE userid = (SELECT id FROM users WHERE displayname = 'csgillespie');
SELECT name FROM badges WHERE userid = (SELECT id FROM users WHERE displayname = "csgillespie");
SELECT COUNT(*) FROM badges WHERE userid = (SELECT id FROM users WHERE displayname = 'csgillespie') AND strftime('%Y', date) = '2011';
SELECT displayname FROM users WHERE id = (SELECT userid FROM badges GROUP BY userid ORDER BY COUNT(id) DESC LIMIT 1);
SELECT AVG(p.score) FROM posts p JOIN users u ON p.owneruserid = u.id WHERE u.displayname = "csgillespie";
SELECT COUNT(badges.id) / COUNT(DISTINCT users.displayname) FROM users JOIN badges ON users.id = badges.userid WHERE users.views > 200;
SELECT COUNT(CASE WHEN users.age > 65 THEN posts.id END) * 100.0 / COUNT(posts.id) AS percentage FROM posts JOIN users ON posts.owneruserid = users.id WHERE posts.score > 20;
SELECT COUNT(*) FROM votes WHERE userid = 58 AND creationdate = '2010-07-19';
SELECT MAX(creationdate) AS max_creation_date FROM (SELECT creationdate, COUNT(id) AS vote_count FROM votes GROUP BY creationdate ORDER BY vote_count DESC LIMIT 1) subquery;
SELECT COUNT(id) FROM badges WHERE name = 'Revival';
SELECT title FROM posts WHERE id = (SELECT postid FROM comments ORDER BY score DESC LIMIT 1);
SELECT commentcount FROM posts WHERE viewcount = 1910;
SELECT favoritecount FROM posts WHERE id IN (SELECT postid FROM comments WHERE userid = '3025' AND creationdate = '2014/4/23 20:29:39.0');
SELECT text FROM comments WHERE postid = 107829;
SELECT posts.id FROM comments JOIN posts ON comments.postid = posts.id WHERE comments.userid = '23853' AND comments.creationdate = '2013-07-12 09:08:18.0' AND posts.closeddate IS NULL;
SELECT reputation FROM users WHERE id = (SELECT owneruserid FROM posts WHERE id = 65041);
SELECT COUNT(id) FROM posts WHERE owneruserid = (SELECT id FROM users WHERE displayname = "Tiago Pasqualini");
SELECT displayname FROM users WHERE id = (SELECT userid FROM votes WHERE id = 6347)
SELECT COUNT(*) FROM votes JOIN posts ON votes.postid = posts.id WHERE posts.title LIKE '%data visualization%';
SELECT badges.name FROM badges JOIN users ON badges.userid = users.id WHERE users.displayname = "DatEpicCoderGuyWhoPrograms";
SELECT COUNT(DISTINCT posts.id) / COUNT(votes.id) AS post_vote_comparison FROM posts LEFT JOIN votes ON posts.id = votes.postid WHERE posts.owneruserid = 24;
SELECT viewcount FROM posts WHERE title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer';
SELECT text FROM comments WHERE score = 17;
SELECT displayname FROM users WHERE websiteurl LIKE 'http://stackoverflow.com%';
SELECT badges.name FROM badges JOIN users ON badges.userid = users.id WHERE users.displayname = 'SilentGhost';
SELECT users.displayname FROM comments JOIN users ON comments.userid = users.id WHERE comments.text = 'thank you user93!';
SELECT text FROM comments WHERE userdisplayname = 'A Lion';
SELECT users.displayname, users.reputation FROM users JOIN posts ON posts.owneruserid = users.id WHERE posts.title = 'Understanding what Dassault iSight is doing?';
SELECT text FROM comments WHERE postid = (SELECT id FROM posts WHERE title = 'How does gentle boosting differ from AdaBoost?');
SELECT users.displayname FROM users JOIN badges ON badges.userid = users.id WHERE badges.name = 'Necromancer' LIMIT 10;
SELECT users.displayname FROM posts JOIN users ON posts.lasteditoruserid = users.id WHERE posts.title = 'Open source tools for visualizing multi-dimensional data?';
SELECT posts.title FROM posts JOIN users ON posts.lasteditoruserid = users.id WHERE users.displayname = 'Vebjorn Ljosa';
SELECT users.websiteurl, SUM(posts.score) AS total_score FROM posts JOIN users ON posts.lasteditoruserid = users.id WHERE users.displayname = 'Yevgeny';
SELECT comments.text FROM comments JOIN posts ON comments.postid = posts.id JOIN posthistory ON posts.id = posthistory.postid JOIN users ON comments.userid = users.id WHERE posts.title = 'Why square the difference instead of taking the absolute value in standard deviation?' AND posthistory.comment = 'Edited'; 
SELECT SUM(bountyamount) FROM votes JOIN posts ON posts.id = votes.postid WHERE title LIKE '%data%';
SELECT users.displayname AS "User" FROM users JOIN votes ON users.id = votes.userid JOIN posts ON votes.postid = posts.id WHERE votes.bountyamount = 50 AND posts.title LIKE '%variance%';
SELECT AVG(p.viewcount) AS average_viewcount, p.title, c.text, c.score FROM posts p LEFT JOIN tags t ON p.id = t.excerptpostid LEFT JOIN comments c ON p.id = c.postid WHERE t.tagname = 'humor' GROUP BY p.title, c.text, c.score;
SELECT count(*) FROM comments WHERE userid = 13;
SELECT `id` FROM users ORDER BY `reputation` DESC LIMIT 1;
SELECT `id` from users order by views asc limit 1;
SELECT count(DISTINCT badges.userid) FROM badges WHERE name = 'Supporter' AND strftime('%Y', date) = '2011';
SELECT COUNT(userid) AS user_count FROM badges GROUP BY userid HAVING COUNT(name) > 5;
SELECT COUNT(DISTINCT u.id) FROM users u JOIN badges b ON u.id = b.userid WHERE u.location = "New York" AND b.name IN ("Supporter", "Teacher");
SELECT users.displayname, users.reputation FROM users JOIN posts ON posts.owneruserid = users.id WHERE posts.id = 1;
SELECT users.id FROM users JOIN posts ON users.id = posts.owneruserid JOIN posthistory ON posthistory.userid = users.id AND posthistory.postid = posts.id GROUP BY users.id HAVING COUNT(DISTINCT posthistory.id) = 1 AND posts.viewcount >= 1000;
SELECT u.displayname, b.name FROM users u JOIN comments c ON u.id = c.userid JOIN badges b ON b.userid = u.id GROUP BY u.id ORDER BY COUNT(c.id) DESC LIMIT 1;
SELECT COUNT(DISTINCT u.id) FROM users u JOIN badges b ON u.id = b.userid WHERE u.location = 'INDIA' AND b.name = 'Teacher';
SELECT ROUND(((CAST(SUM(CASE WHEN STRFTIME('%Y', date) = '2010' THEN 1 ELSE 0 END) AS FLOAT) / COUNT(*)) - (CAST(SUM(CASE WHEN STRFTIME('%Y', date) = '2011' THEN 1 ELSE 0 END) AS FLOAT) / COUNT(*))) * 100, 2) AS percentage_difference FROM badges WHERE name = 'Student';
SELECT posthistorytypeid, COUNT(DISTINCT comments.userid) AS unique_commenters_count FROM posthistory LEFT JOIN comments ON posthistory.postid = comments.postid WHERE posthistory.postid = 3720 GROUP BY posthistorytypeid;
SELECT title FROM posts INNER JOIN postlinks ON posts.id = postlinks.relatedpostid WHERE postlinks.postid = 61217;
SELECT score, linktypeid FROM posts JOIN postlinks ON posts.id = postlinks.postid WHERE posts.id = 395;
SELECT posts.id, posts.owneruserid FROM posts WHERE posts.score > 60;
SELECT sum(favoritecount) FROM posts WHERE owneruserid = 686 AND strftime('%Y', (SELECT creationdate FROM users WHERE id = 686)) = '2011';
SELECT AVG(users.upvotes) AS avg_upvotes, AVG(users.age) AS avg_user_age FROM users JOIN posts ON users.id = posts.owneruserid GROUP BY users.id HAVING COUNT(posts.owneruserid) > 10;
SELECT COUNT(DISTINCT badges.userid) FROM badges WHERE name = 'Announcer';
SELECT name FROM badges WHERE date = '2010-07-19 19:39:08'
SELECT COUNT(*) FROM comments WHERE score > 60;
SELECT text FROM comments WHERE creationdate = '2010-07-19 19:25:47';
SELECT COUNT(id) FROM posts WHERE score = 10;
SELECT name FROM badges WHERE userid IN (SELECT id FROM users ORDER BY reputation DESC LIMIT 1);
SELECT users.reputation FROM users JOIN badges ON users.id = badges.userid WHERE badges.date = '2010-07-19 19:39:08.0';
SELECT name FROM badges WHERE userid = (SELECT id FROM users WHERE displayname = "Pierre");
SELECT date FROM badges JOIN users ON badges.userid = users.id WHERE users.location = 'Rochester, NY';
SELECT COUNT(badges.userid) * 100.0 / (SELECT COUNT(DISTINCT users.id) FROM users) as percentage FROM badges WHERE badges.name = 'Teacher';
SELECT COUNT(users.id) * 100.0 / COUNT(DISTINCT badges.userid) FROM users JOIN badges ON users.id = badges.userid WHERE badges.name = "Organizer" AND users.age BETWEEN 13 AND 18;
SELECT comments.score FROM comments WHERE postid IN (SELECT id FROM posts WHERE creationdate = '2010-07-19 19:19:56.0');
SELECT text FROM comments WHERE postid IN (SELECT id FROM posts WHERE creationdate = '2010-07-19 19:37:33.0');
SELECT age FROM users JOIN badges ON users.id = badges.userid WHERE location = 'Vienna, Austria';
SELECT COUNT(DISTINCT users.id) FROM users JOIN badges ON users.id = badges.userid WHERE badges.name = 'Supporter' AND users.age BETWEEN 19 AND 65;
SELECT users.views FROM users JOIN badges ON users.id = badges.userid WHERE badges.date = '2010-07-19 19:39:08.0';
SELECT name FROM badges WHERE userid IN (SELECT id FROM users WHERE reputation = (SELECT MIN(reputation) FROM users));
SELECT name FROM badges WHERE userid = (SELECT id FROM users WHERE displayname = "Sharpie");
SELECT COUNT(*) FROM users JOIN badges ON users.id = badges.userid WHERE users.age > 65 AND badges.name = 'Supporter';
SELECT displayname FROM users WHERE id = 30;
SELECT COUNT(*) FROM users WHERE location = "New York";
SELECT COUNT(*) FROM votes WHERE strftime('%Y', CreationDate) = '2010';
SELECT COUNT(*) as num_adult_users FROM users WHERE Age BETWEEN 19 AND 65;
SELECT displayname FROM users ORDER BY views DESC LIMIT 1;
SELECT COUNT(CASE WHEN strftime('%Y', CreationDate) = '2010' THEN id END) as count_2010, COUNT(CASE WHEN strftime('%Y', CreationDate) = '2011' THEN id END) as count_2011 FROM votes;
SELECT `tags` FROM posts WHERE ownerdisplayname = 'John Stauffer';
SELECT COUNT(*) FROM posts JOIN users ON posts.owneruserid = users.id WHERE users.displayname = 'Daniel Vassallo';
SELECT COUNT(*) FROM votes JOIN users ON votes.userid = users.id WHERE displayname = 'Harlan';
SELECT `id` FROM posts WHERE owneruserid = (SELECT id FROM users WHERE displayname = 'slashnick') ORDER BY answercount DESC LIMIT 1;
SELECT MAX(SUM(viewcount)) AS popularity, displayname FROM ( SELECT p.viewcount, u.displayname FROM posts p JOIN users u ON p.owneruserid = u.id WHERE u.displayname = 'Harvey Motulsky' OR u.displayname = 'Noah Snyder' GROUP BY u.displayname, p.id ) GROUP BY displayname;
SELECT COUNT(*) FROM posts p JOIN users u ON p.owneruserid = u.id JOIN votes v ON p.id = v.postid WHERE u.displayname = 'Matt Parker' AND v.postid > 4;
SELECT COUNT(*) FROM comments JOIN users ON comments.userid = users.id JOIN posts ON comments.postid = posts.id WHERE users.displayname = 'Neil McGuigan' AND comments.score < 60;
SELECT tags.tagname FROM posts JOIN tags ON tags.excerptpostid = posts.id JOIN users ON posts.owneruserid = users.id WHERE users.displayname = 'Mark Meckes' AND posts.id NOT IN (SELECT postid FROM comments WHERE postid IS NOT NULL)
SELECT displayname FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.name = 'Organizer';
SELECT COUNT(posts.id) AS TotalPosts, COUNT(CASE WHEN tags.tagname = 'r' THEN posts.id END) AS RLanguagePosts FROM posts JOIN users ON posts.owneruserid = users.id LEFT JOIN tags ON tags.excerptpostid = posts.id WHERE users.displayname = 'Community';
SELECT SUM(CASE WHEN u.displayname = 'Mornington' THEN p.viewcount ELSE 0 END) - SUM(CASE WHEN u.displayname = 'Amos' THEN p.viewcount ELSE 0 END) AS viewcount_difference FROM posts p JOIN users u ON p.owneruserid = u.id;
SELECT COUNT(DISTINCT badges.userid) FROM badges JOIN users ON badges.userid = users.id WHERE badges.name = 'Commentator' AND strftime('%Y', badges.date) = '2014';
SELECT COUNT(*) FROM posts WHERE CreationDate BETWEEN '2010-07-21 00:00:00' AND '2010-07-21 23:59:59';
SELECT `displayname`, `age` FROM users WHERE views = (SELECT MAX(views) FROM users);
SELECT lasteditdate, lasteditoruserid FROM posts WHERE title = 'Detecting a given face in a database of facial images';
SELECT COUNT(*) FROM comments WHERE userid = 13 AND score < 60;
SELECT posts.title, comments.text, users.displayname FROM posts JOIN comments ON posts.id = comments.postid JOIN users ON comments.userid = users.id WHERE comments.score > 60;
SELECT badges.name FROM badges JOIN users ON badges.userid = users.id WHERE users.location = 'North Pole' AND strftime('%Y', badges.date) = '2011';
SELECT users.displayname, users.websiteurl FROM users JOIN posts ON posts.owneruserid = users.id WHERE posts.favoritecount > 150;
SELECT COUNT(*) AS post_history_count, MAX(creationdate) AS last_edit_date FROM posthistory WHERE postid = (SELECT id FROM posts WHERE title = 'What is the best introductory Bayesian statistics textbook?');
SELECT lastaccessdate, location FROM users WHERE id IN (SELECT userid FROM badges WHERE name = 'outliers');
SELECT title FROM posts JOIN postlinks ON postlinks.postid = posts.id WHERE postlinks.relatedpostid IN (SELECT id FROM posts WHERE title = "How to tell if something happened in a data set which monitors a value over time");
SELECT posts.id, badges.name FROM posts JOIN users ON posts.owneruserid = users.id JOIN badges ON badges.userid = users.id WHERE users.displayname = 'Samuel' AND strftime('%Y', users.creationdate) = '2013' AND strftime('%Y', badges.date) = '2013';
SELECT ownerdisplayname FROM posts ORDER BY viewcount DESC LIMIT 1;
SELECT displayname AS name, location AS "Location" FROM users JOIN posts ON posts.owneruserid = users.id JOIN tags ON tags.excerptpostid = posts.id WHERE tags.tagname = 'hypothesis-testing';
SELECT title, linktypeid FROM posts JOIN postlinks ON posts.id = postlinks.relatedpostid WHERE title = 'What are principal component scores?';
SELECT MAX(posts.score) AS highest_score, posts.parentid AS parent_id FROM posts WHERE posts.parentid IS NOT NULL GROUP BY parent_id;
SELECT displayname, websiteurl FROM users u JOIN votes v ON u.id = v.userid WHERE v.votetypeid = 8 AND v.bountyamount = (SELECT MAX(bountyamount) FROM votes WHERE votetypeid = 8);
SELECT title FROM posts ORDER BY viewcount DESC LIMIT 5;
SELECT COUNT(tagname) FROM tags WHERE count BETWEEN 5000 AND 7000;
SELECT owneruserid FROM posts WHERE favoritecount = ( SELECT MAX(favoritecount) FROM posts ); 
SELECT MAX(age) as "Oldest_user_age" FROM users WHERE reputation = (SELECT MAX(reputation) FROM users);
SELECT COUNT(DISTINCT posts.id) FROM posts JOIN votes ON posts.id = votes.postid WHERE strftime('%Y', votes.creationdate) = '2011' AND votes.bountyamount = 50;
SELECT MIN(id) FROM users WHERE age = (SELECT MIN(age) FROM users);
SELECT MAX(tags.count) as max_tag_count FROM tags;
SELECT ROUND(CAST(COUNT(pl.id) as decimal) / 12, 2) as avg_monthly_links FROM postlinks pl JOIN posts p ON pl.postid = p.id WHERE strftime('%Y', pl.creationdate) = '2010' AND p.answercount <= 2;
SELECT id FROM posts WHERE id IN (SELECT postid FROM votes WHERE userid = 1465) ORDER BY favoritecount DESC LIMIT 1;
SELECT posts.title FROM posts JOIN postlinks ON posts.id = postlinks.postid WHERE postlinks.creationdate = (SELECT MIN(creationdate) FROM postlinks);
SELECT MAX(displayname) AS user_with_highest_badges FROM users JOIN badges ON users.id = badges.userid GROUP BY users.id ORDER BY COUNT(badges.name) DESC LIMIT 1;
SELECT MIN(votes.creationdate) FROM votes JOIN users ON votes.userid = users.id WHERE users.displayname = 'chl';
SELECT MIN(users.creationdate) FROM users WHERE age = (SELECT MIN(age) FROM users);
SELECT users.displayname FROM users JOIN badges ON users.id = badges.userid WHERE badges.name = 'Autobiographer' ORDER BY badges.date LIMIT 1;
SELECT COUNT(DISTINCT users.id) FROM users JOIN posts ON posts.owneruserid = users.id WHERE users.location = 'United Kingdom' GROUP BY users.id HAVING SUM(posts.favoritecount) >= 4;
SELECT AVG(PostId) FROM votes WHERE userid IN (SELECT id FROM users WHERE age = (SELECT MAX(age) FROM users));
SELECT `displayname` FROM users ORDER BY reputation DESC LIMIT 1;
SELECT COUNT(*) FROM users WHERE reputation > 2000 AND views > 1000;
SELECT displayname FROM users WHERE age BETWEEN 19 AND 65;
SELECT count(*) FROM posts JOIN users ON posts.owneruserid = users.id WHERE users.displayname = 'Jay Stevens' AND strftime('%Y', creationdate) = '2010';
SELECT id, title FROM posts WHERE owneruserid = (SELECT id FROM users WHERE displayname = 'Harvey Motulsky') ORDER BY viewcount DESC LIMIT 1;
SELECT posts.id, posts.title FROM posts ORDER BY score DESC LIMIT 1;
SELECT AVG(p.score) FROM posts p JOIN users u ON p.owneruserid = u.id WHERE u.displayname = 'Stephen Turner';
SELECT displayname FROM posts JOIN users ON posts.owneruserid = users.id WHERE viewcount > 20000 AND strftime('%Y', creationdate) = '2011';
SELECT MAX(FavoriteCount) as MaxFavoriteCountIn2010, posts.id, users.displayname FROM posts JOIN users ON posts.owneruserid = users.id WHERE strftime('%Y', creationdate) = '2010'
SELECT ROUND((COUNT(p.id) * 100.0 / (SELECT COUNT(*) FROM posts)) ,2) AS percentage FROM posts p JOIN users u ON p.owneruserid = u.id WHERE u.creationdate LIKE '2011%' AND u.reputation > 1000;
SELECT COUNT(id) FROM users WHERE age BETWEEN 13 AND 18; 
SELECT SUM(viewcount) AS total_views, ownerdisplayname AS last_posted_user FROM posts WHERE title = 'Computer game datasets';
SELECT COUNT(*) FROM posts WHERE viewcount > (SELECT AVG(viewcount) FROM posts);
SELECT COUNT(*) FROM comments WHERE postid = (SELECT id FROM posts ORDER BY score DESC LIMIT 1);
SELECT COUNT(*) FROM posts WHERE ViewCount > 35000 AND CommentCount = 0;
SELECT displayname, location FROM users WHERE id = (SELECT lasteditoruserid FROM posts WHERE id = 183) LIMIT 1;
SELECT name FROM badges WHERE userid = (SELECT id FROM users WHERE displayname = 'Emmett') ORDER BY date DESC LIMIT 1;
SELECT COUNT(*) FROM users WHERE age BETWEEN 19 AND 65 AND upvotes > 5000;
SELECT strftime('%s', b.date) - strftime('%s', u.creationdate) AS days_to_get_badge FROM badges b JOIN users u ON b.userid = u.id WHERE u.displayname = 'Zolomon' AND b.name = 'stats_badge';
SELECT * FROM users ORDER BY creationdate DESC LIMIT 1;
SELECT text, userdisplayname FROM comments WHERE postid = (SELECT id FROM posts WHERE title = 'Analysing wind data with R') ORDER BY creationdate DESC LIMIT 1;
SELECT COUNT(DISTINCT users.id) FROM badges INNER JOIN users ON badges.userid = users.id WHERE badges.name = 'Citizen Patrol';
SELECT count(*) FROM posts JOIN tags ON tags.id = posts.id WHERE tags.tagname = 'careers';
SELECT reputation, views FROM users WHERE displayname = 'Jarrod Dixon';
SELECT COUNT(*) FROM comments WHERE postid = (SELECT id FROM posts WHERE title = 'Clustering 1D data') UNION ALL SELECT COUNT(*) FROM posts WHERE parentid = (SELECT id FROM posts WHERE title = 'Clustering 1D data');
SELECT creationdate FROM users WHERE displayname = 'IrishStat';
SELECT COUNT(*) FROM posts JOIN votes ON posts.id = votes.postid WHERE votes.bountyamount >= 30;
SELECT ( SELECT SUM(CASE WHEN p.score >= 50 THEN 1 ELSE 0 END) * 100.0 / COUNT(p.id) FROM posts p WHERE p.owneruserid = ( SELECT id FROM users ORDER BY reputation DESC LIMIT 1 ) ) as percentage;
SELECT COUNT(*) FROM posts WHERE score < 20;
SELECT COUNT(*) FROM tags WHERE id < 15 AND count <= 20;
SELECT `excerptpostid`, `wikipostid` FROM tags WHERE tagname = 'sample';
SELECT reputation, upvotes FROM users WHERE id IN (SELECT userid FROM comments WHERE text = 'fine, you win :)');
SELECT comments.text FROM comments JOIN posts ON comments.postid = posts.id WHERE posts.title = 'How can I adapt ANOVA for binary data?';
SELECT comments.text FROM comments JOIN posts ON comments.postid = posts.id WHERE posts.viewcount BETWEEN 100 AND 150 ORDER BY comments.score DESC LIMIT 1;
SELECT creationdate, age FROM users WHERE id IN (SELECT userid FROM comments WHERE text LIKE '%http://%');
SELECT COUNT(DISTINCT posts.id) FROM comments JOIN posts ON comments.postid = posts.id WHERE comments.score = 0 AND posts.viewcount < 5;
SELECT COUNT(*) FROM comments WHERE score = 0 AND postid IN (SELECT id FROM posts WHERE commentcount = 1);
SELECT COUNT(DISTINCT users.id) FROM comments JOIN users ON comments.userid = users.id WHERE comments.score = 0 AND users.age = 40;
SELECT posts.id, comments.id, comments.text FROM posts JOIN comments ON comments.postid = posts.id WHERE posts.title = 'Group differences on a five point Likert item';
SELECT users.upvotes FROM comments JOIN users ON comments.userid = users.id WHERE comments.text = 'R is also lazy evaluated.';
SELECT text FROM comments WHERE userdisplayname = 'Harvey Motulsky';
SELECT users.displayname FROM comments JOIN users ON comments.userid = users.id WHERE users.downvotes = 0 AND comments.score BETWEEN 1 AND 5;
SELECT COUNT(CASE WHEN upvotes = 0 THEN 1 END) * 100.0 / COUNT(*) FROM comments JOIN users ON comments.userid = users.id WHERE score BETWEEN 5 AND 10;
SELECT superpower.power_name FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.superhero_name = '3-D Man';
SELECT COUNT(DISTINCT superhero.id) FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Super Strength';
SELECT superhero.superhero_name FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Super Strength' AND superhero.height_cm > 200;
SELECT superhero.full_name FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id GROUP BY superhero.id HAVING COUNT(hero_power.power_id) > 15;
SELECT COUNT(*) FROM superhero WHERE eye_colour_id = (SELECT id FROM colour WHERE colour = 'Blue');
SELECT colour FROM superhero JOIN colour ON superhero.skin_colour_id = colour.id WHERE superhero.superhero_name = 'Apocalypse';
SELECT superhero.superhero_name FROM superhero JOIN colour ON superhero.eye_colour_id = colour.id JOIN hero_power ON hero_power.hero_id = superhero.id JOIN superpower ON hero_power.power_id = superpower.id WHERE colour.colour = 'Blue' AND superpower.power_name = 'Agility';
SELECT superhero.superhero_name FROM superhero JOIN colour eye_color ON superhero.eye_colour_id = eye_color.id JOIN colour hair_color ON superhero.hair_colour_id = hair_color.id JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE eye_color.colour = 'Blue' AND hair_color.colour = 'Blond' AND superpower.power_name = 'Agility';
SELECT COUNT(*) FROM superhero WHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics');
SELECT superhero.full_name FROM superhero JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics' ORDER BY superhero.height_cm DESC LIMIT 1;
SELECT publisher.publisher_name FROM superhero JOIN publisher ON superhero.publisher_id = publisher.id WHERE superhero.superhero_name = 'Sauron';
SELECT COUNT(*) FROM superhero WHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics') AND eye_colour_id = (SELECT id FROM colour WHERE colour = 'Blue');
SELECT AVG(height_cm) FROM superhero WHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics');
SELECT (COUNT(superhero.id) * 100.0 / (SELECT COUNT(superhero.id) FROM superhero JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics')) FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics' AND superpower.power_name = 'Super Strength';
SELECT COUNT(superhero.id) FROM superhero WHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'DC Comics');
SELECT publisher.publisher_name FROM superhero JOIN publisher ON superhero.publisher_id = publisher.id JOIN hero_attribute ON superhero.id = hero_attribute.hero_id JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Speed' ORDER BY hero_attribute.attribute_value LIMIT 1;
SELECT count(*) FROM superhero JOIN colour ON superhero.eye_colour_id = colour.id JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher_name = 'Marvel Comics' AND colour = 'Gold';
SELECT publisher.publisher_name FROM superhero JOIN publisher ON superhero.publisher_id = publisher.id WHERE superhero.superhero_name = 'Blue Beetle II';
SELECT COUNT(*) FROM superhero WHERE hair_colour_id = (SELECT id FROM colour WHERE colour = 'Blond');
SELECT superhero.superhero_name FROM superhero JOIN hero_attribute ON superhero.id = hero_attribute.hero_id JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Intelligence' ORDER BY hero_attribute.attribute_value ASC LIMIT 1;
SELECT race.race FROM superhero JOIN race ON superhero.race_id = race.id WHERE superhero.superhero_name = 'Copycat';
SELECT COUNT(DISTINCT superhero.superhero_name) FROM superhero JOIN hero_attribute ON superhero.id = hero_attribute.hero_id JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Durability' AND hero_attribute.attribute_value < 50;
SELECT superhero.superhero_name FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Death Touch';
SELECT COUNT(DISTINCT superhero.id) FROM superhero JOIN gender ON superhero.gender_id = gender.id JOIN hero_attribute ON superhero.id = hero_attribute.hero_id JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE gender.gender = 'Female' AND attribute.attribute_name = 'Strength' AND hero_attribute.attribute_value = 100;
SELECT superhero_name FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id GROUP BY superhero.superhero_name ORDER BY COUNT(hero_power.power_id) DESC LIMIT 1;
SELECT COUNT(*) FROM superhero WHERE race_id = (SELECT id FROM race WHERE race = 'Vampire');
SELECT COUNT(superhero.id) * 100.0 / (SELECT COUNT(id) FROM superhero) AS percentage FROM superhero JOIN alignment ON superhero.alignment_id = alignment.id JOIN publisher ON superhero.publisher_id = publisher.id WHERE alignment.alignment = 'Bad';
SELECT SUM(CASE WHEN publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) - SUM(CASE WHEN publisher_name = 'DC Comics' THEN 1 ELSE 0 END) AS superhero_difference FROM superhero JOIN publisher ON superhero.publisher_id = publisher.id;
SELECT publisher.id FROM publisher WHERE publisher_name = 'Star Trek';
SELECT AVG(attribute_value) FROM hero_attribute;
SELECT COUNT(*) FROM superhero WHERE full_name IS NULL;
SELECT colour.colour FROM superhero JOIN colour ON superhero.eye_colour_id = colour.id WHERE superhero.id = 75;
SELECT superpower.power_name FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.superhero_name = 'Deathlok';
SELECT AVG(weight_kg) FROM superhero WHERE gender_id = 2;
SELECT sp.power_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id JOIN gender g ON s.gender_id = g.id WHERE g.gender = 'Male' LIMIT 5;
SELECT superhero_name FROM superhero WHERE race_id = (SELECT id FROM race WHERE race = 'Alien');
SELECT superhero_name FROM superhero WHERE height_cm BETWEEN 170 AND 190 AND eye_colour_id IS NULL;
SELECT power_name FROM superpower JOIN hero_power ON superpower.id = hero_power.power_id WHERE hero_id = 56;
SELECT superhero.full_name FROM superhero JOIN race ON superhero.race_id = race.id WHERE race.race = 'Demi-God';
SELECT COUNT(superhero_name) FROM superhero WHERE alignment_id = (SELECT id FROM alignment WHERE alignment = 'Bad');
SELECT race.race FROM superhero JOIN race ON superhero.race_id = race.id WHERE superhero.weight_kg = 169;
SELECT colour.colour FROM superhero JOIN colour ON superhero.hair_colour_id = colour.id JOIN race ON superhero.race_id = race.id WHERE superhero.height_cm = 185 AND race.race = 'Human';
SELECT MAX(weight_kg) as max_weight, c.colour as eye_colour FROM superhero s INNER JOIN colour c ON s.eye_colour_id = c.id WHERE weight_kg = (SELECT MAX(weight_kg) FROM superhero);
SELECT ROUND((COUNT(*) * 100.0) / (SELECT COUNT(*) FROM superhero WHERE height_cm BETWEEN 150 AND 180), 2) AS percentage_published_by_marvel FROM superhero WHERE publisher_id = 13 AND height_cm BETWEEN 150 AND 180;
SELECT superhero.full_name FROM superhero JOIN gender ON superhero.gender_id = gender.id WHERE gender.gender = 'Male' AND superhero.weight_kg > (SELECT 0.79 * AVG(weight_kg) FROM superhero);
SELECT superpower.power_name FROM superpower JOIN hero_power ON superpower.id = hero_power.power_id GROUP BY superpower.power_name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT attribute.attribute_name FROM superhero JOIN hero_attribute ON superhero.id = hero_attribute.hero_id JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE superhero.superhero_name = 'Abomination';
SELECT power_name FROM superpower JOIN hero_power ON superpower.id = hero_power.power_id WHERE hero_power.hero_id = 1;
SELECT COUNT(DISTINCT superhero.id) FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Stealth';
SELECT superhero.full_name FROM superhero JOIN hero_attribute ON superhero.id = hero_attribute.hero_id JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Strength' ORDER BY hero_attribute.attribute_value DESC LIMIT 1;
SELECT AVG(CASE WHEN skin_colour_id = 1 THEN 1 ELSE 0 END) FROM superhero;
SELECT COUNT(superhero.id) FROM superhero JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Dark Horse Comics';
SELECT superhero.superhero_name FROM superhero JOIN hero_attribute ON superhero.id = hero_attribute.hero_id JOIN publisher ON superhero.publisher_id = publisher.id JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE publisher.publisher_name = 'Dark Horse Comics' AND attribute.attribute_name = 'Durability' GROUP BY superhero.superhero_name ORDER BY MAX(hero_attribute.attribute_value) DESC LIMIT 1;
SELECT colour.colour FROM superhero JOIN colour ON superhero.eye_colour_id = colour.id WHERE superhero.full_name = "Abraham Sapien";
SELECT superhero.superhero_name FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Flight';
SELECT colour.colour AS eye_colour, c.colour AS hair_colour, sc.colour AS skin_colour FROM superhero AS s JOIN colour ON s.eye_colour_id = colour.id JOIN colour AS c ON s.hair_colour_id = c.id JOIN colour AS sc ON s.skin_colour_id = sc.id JOIN gender ON s.gender_id = gender.id JOIN publisher ON s.publisher_id = publisher.id WHERE gender.gender = 'Female' AND publisher.publisher_name = 'Dark Horse Comics';
SELECT superhero.superhero_name, publisher.publisher_name FROM superhero JOIN publisher ON superhero.publisher_id = publisher.id WHERE hair_colour_id = skin_colour_id AND hair_colour_id = eye_colour_id;
SELECT superhero.superhero_name FROM superhero JOIN race ON superhero.race_id = race.id WHERE superhero.superhero_name = 'A-Bomb';
SELECT COUNT(*) * 100.0 / (SELECT COUNT(*) FROM superhero WHERE gender_id = (SELECT id FROM gender WHERE gender = 'Female')) FROM superhero WHERE gender_id = (SELECT id FROM gender WHERE gender = 'Female') AND eye_colour_id = (SELECT id FROM colour WHERE colour = 'Blue');
SELECT superhero.superhero_name, race.race FROM superhero JOIN race ON superhero.race_id = race.id WHERE superhero.full_name = 'Charles Chandler';
SELECT gender.gender FROM superhero JOIN gender ON superhero.gender_id = gender.id WHERE superhero.superhero_name = 'Agent 13';
SELECT superhero.superhero_name FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Adaptation';
SELECT COUNT(*) FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id WHERE superhero.superhero_name = 'Amazo';
SELECT superpower.power_name FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.full_name = 'Hunter Zolomon';
SELECT height_cm FROM superhero JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'Amber';
SELECT superhero.superhero_name FROM superhero JOIN colour c1 ON superhero.eye_colour_id = c1.id JOIN colour c2 ON superhero.hair_colour_id = c2.id WHERE c1.colour = 'Black' AND c2.colour = 'Black';
SELECT colour.colour FROM superhero JOIN colour ON superhero.eye_colour_id = colour.id WHERE superhero.skin_colour_id = (SELECT id FROM colour WHERE colour = 'Gold');
SELECT full_name FROM superhero WHERE race_id = (SELECT id FROM race WHERE race = 'Vampire');
SELECT superhero.superhero_name FROM superhero INNER JOIN alignment ON superhero.alignment_id = alignment.id WHERE alignment.alignment = 'Neutral';
SELECT COUNT(DISTINCT superhero.superhero_name) FROM superhero JOIN hero_attribute ON superhero.id = hero_attribute.hero_id JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Strength' AND hero_attribute.attribute_value = (SELECT MAX(attribute_value) FROM hero_attribute WHERE attribute_id = (SELECT id FROM attribute WHERE attribute_name = 'Strength'));
SELECT race.race, alignment.alignment FROM superhero JOIN race ON superhero.race_id = race.id JOIN alignment ON superhero.alignment_id = alignment.id WHERE superhero.superhero_name = 'Cameron Hicks';
SELECT ( (SELECT COUNT(DISTINCT superhero.id) FROM superhero JOIN gender ON superhero.gender_id = gender.id JOIN publisher ON superhero.publisher_id = publisher.id WHERE gender.gender = 'Female' AND publisher.publisher_name = 'Marvel Comics') * 100.0 / (SELECT COUNT(*) FROM superhero WHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics')) );
SELECT AVG(weight_kg) FROM superhero JOIN race ON superhero.race_id = race.id WHERE race.race = 'Alien';
SELECT SUM(CASE WHEN full_name = 'Emil Blonsky' THEN weight_kg ELSE 0 END) - SUM(CASE WHEN full_name = 'Charles Chandler' THEN weight_kg ELSE 0 END) AS weight_difference FROM superhero;
SELECT superhero_name, AVG(height_cm) as average_height FROM superhero GROUP BY superhero_name;
SELECT superpower.power_name FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.superhero_name = 'Abomination';
SELECT COUNT(*) FROM superhero WHERE race_id = 21 AND gender_id = 1;
SELECT superhero.superhero_name FROM superhero JOIN hero_attribute ON superhero.id = hero_attribute.hero_id JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Speed' ORDER BY hero_attribute.attribute_value DESC LIMIT 1;
SELECT COUNT(*) FROM superhero WHERE alignment_id = 3;
SELECT superhero.superhero_name, attribute.attribute_name, hero_attribute.attribute_value FROM superhero JOIN hero_attribute ON superhero.id = hero_attribute.hero_id JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE superhero.superhero_name = '3-D Man';
SELECT superhero.superhero_name FROM superhero JOIN race ON superhero.race_id = race.id JOIN alignment ON superhero.alignment_id = alignment.id JOIN hero_attribute ON hero_attribute.hero_id = superhero.id WHERE eye_colour_id = 7 AND hair_colour_id = 9;
SELECT publisher.publisher_name FROM superhero JOIN publisher ON superhero.publisher_id = publisher.id WHERE superhero.superhero_name IN ('Hawkman', 'Karate Kid', 'Speedy');
SELECT COUNT(*) FROM superhero WHERE publisher_id IS NULL;
SELECT SUM(CASE WHEN eye_colour_id = 7 THEN 1 ELSE 0 END) * 1.0 / COUNT(superhero_name) * 100.0 as percentage FROM superhero;
SELECT SUM(CASE WHEN gender_id = 1 THEN 1 ELSE 0 END) * 1.0 / SUM(CASE WHEN gender_id = 2 THEN 1 ELSE 0 END) as gender_ratio FROM superhero;
SELECT superhero_name FROM superhero ORDER BY height_cm DESC LIMIT 1;
SELECT id FROM superpower WHERE power_name = 'Cryokinesis';
SELECT superhero_name FROM superhero WHERE id = 294;
SELECT full_name FROM superhero WHERE weight_kg = 0 OR weight_kg IS NULL;
SELECT colour.colour FROM superhero JOIN colour ON superhero.eye_colour_id = colour.id WHERE superhero.full_name = 'Karen Beecher-Duncan';
SELECT superpower.power_name FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.full_name = 'Helen Parr';
SELECT race.race FROM superhero JOIN race ON superhero.race_id = race.id WHERE weight_kg = 108 AND height_cm = 188;
SELECT publisher.publisher_name FROM superhero JOIN publisher ON superhero.publisher_id = publisher.id WHERE superhero.id = 38;
SELECT race.race FROM superhero JOIN race ON superhero.race_id = race.id JOIN hero_attribute ON superhero.id = hero_attribute.hero_id WHERE hero_attribute.attribute_value = (SELECT MAX(attribute_value) FROM hero_attribute);
SELECT alignment.alignment, superpower.power_name FROM superhero JOIN alignment ON superhero.alignment_id = alignment.id JOIN hero_power ON hero_power.hero_id = superhero.id JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.superhero_name = 'Atom IV';
SELECT full_name FROM superhero JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'Blue';
SELECT AVG(attribute_value) FROM hero_attribute INNER JOIN superhero ON hero_attribute.hero_id = superhero.id WHERE superhero.alignment_id = 3;
SELECT colour.colour FROM superhero JOIN colour ON superhero.skin_colour_id = colour.id JOIN hero_attribute ON superhero.id = hero_attribute.hero_id WHERE hero_attribute.attribute_value = 100;
SELECT COUNT(*) FROM superhero WHERE alignment_id = 1 AND gender_id = 2;
SELECT superhero.superhero_name FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id WHERE hero_attribute.attribute_value BETWEEN 75 AND 80;
SELECT race.race FROM superhero JOIN colour ON superhero.hair_colour_id = colour.id JOIN gender ON superhero.gender_id = gender.id JOIN race ON superhero.race_id = race.id JOIN colour c2 ON superhero.eye_colour_id = c2.id WHERE colour.colour = 'blue' AND gender.gender = 'Male';
SELECT ( SELECT (COUNT(*) * 100.0) / (SELECT COUNT(*) FROM superhero WHERE alignment_id = 2) FROM superhero WHERE alignment_id = 2 AND gender_id = 2 );
SELECT SUM(CASE WHEN eye_colour_id = 7 THEN 1 ELSE 0 END) - SUM(CASE WHEN eye_colour_id = 1 OR eye_colour_id IS NULL THEN 1 ELSE 0 END) AS weight_data_difference FROM superhero WHERE weight_kg = 0 OR weight_kg IS NULL;
SELECT attribute_value FROM hero_attribute JOIN attribute ON hero_attribute.attribute_id = attribute.id JOIN superhero ON hero_attribute.hero_id = superhero.id WHERE superhero.superhero_name = 'Hulk' AND attribute.attribute_name = 'Strength';
SELECT superpower.power_name FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.superhero_name = 'Ajax';
SELECT COUNT(*) FROM superhero INNER JOIN colour ON superhero.skin_colour_id = colour.id INNER JOIN alignment ON superhero.alignment_id = alignment.id WHERE colour.colour = 'Green' AND alignment.alignment = 'Bad';
SELECT COUNT(DISTINCT superhero.id) FROM superhero JOIN gender ON superhero.gender_id = gender.id JOIN publisher ON superhero.publisher_id = publisher.id WHERE gender.gender = 'Female' AND publisher.publisher_name = 'Marvel Comics';
SELECT superhero.superhero_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Wind Control' ORDER BY superhero.superhero_name ASC;
SELECT superhero.gender_id FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id JOIN gender ON superhero.gender_id = gender.id WHERE superpower.power_name = 'Phoenix Force';
SELECT superhero.superhero_name FROM superhero JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'DC Comics' ORDER BY superhero.weight_kg DESC LIMIT 1;
SELECT AVG(height_cm) FROM superhero JOIN race ON superhero.race_id = race.id JOIN publisher ON superhero.publisher_id = publisher.id WHERE race.race <> 'Human' AND publisher.publisher_name = 'Dark Horse Comics';
SELECT superhero.superhero_name FROM superhero JOIN hero_attribute ON superhero.id = hero_attribute.hero_id JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Speed' AND hero_attribute.attribute_value = 100;
SELECT SUM(CASE WHEN publisher_name = 'DC Comics' THEN 1 ELSE 0 END) AS dc_heroes, SUM(CASE WHEN publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) AS marvel_heroes FROM superhero JOIN publisher ON superhero.publisher_id = publisher.id;
SELECT attribute.attribute_name FROM superhero JOIN hero_attribute ON superhero.id = hero_attribute.hero_id JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE superhero.superhero_name = 'Black Panther' ORDER BY hero_attribute.attribute_value ASC LIMIT 1;
SELECT colour.colour FROM superhero JOIN colour ON superhero.eye_colour_id = colour.id WHERE superhero.superhero_name = 'Abomination';
SELECT superhero.superhero_name FROM superhero WHERE height_cm = (SELECT MAX(height_cm) FROM superhero);
SELECT superhero_name FROM superhero WHERE full_name = 'Charles Chandler';
SELECT SUM(CASE WHEN gender.gender = 'Female' THEN 1 ELSE 0 END) * 100.0 / COUNT(*) AS percentage_female FROM superhero JOIN publisher ON superhero.publisher_id = publisher.id JOIN gender ON superhero.gender_id = gender.id WHERE publisher.publisher_name = 'George Lucas';
SELECT (COUNT(*) * 100.0) / (SELECT COUNT(*) FROM superhero WHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics')) FROM superhero WHERE alignment_id = (SELECT id FROM alignment WHERE alignment = 'Good') AND publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics');
SELECT COUNT(*) FROM superhero WHERE full_name LIKE 'John%';
SELECT MIN(hero_attribute.attribute_value) as min_attribute_value FROM hero_attribute;
SELECT full_name FROM superhero WHERE superhero_name = 'Alien';
SELECT superhero.full_name FROM superhero JOIN colour ON superhero.eye_colour_id = colour.id WHERE superhero.weight_kg < 100 AND colour.colour = 'Brown';
SELECT attribute_value FROM hero_attribute WHERE hero_id = (SELECT id FROM superhero WHERE superhero_name = 'Aquababy');
SELECT weight_kg, race FROM superhero JOIN race ON superhero.race_id = race.id WHERE superhero.id = 40;
SELECT AVG(height_cm) FROM superhero WHERE alignment_id = (SELECT id FROM alignment WHERE alignment = 'Neutral');
SELECT superhero.id FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Intelligence';
SELECT colour.colour FROM superhero JOIN colour ON superhero.eye_colour_id = colour.id WHERE superhero.superhero_name = 'Blackwulf';
SELECT superpower.power_name FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.height_cm > (SELECT 0.8 * AVG(height_cm) FROM superhero);
SELECT driverref FROM qualifying JOIN drivers ON qualifying.driverid = drivers.driverid WHERE qualifyid = 'q1' AND raceid = 18 ORDER BY q1 DESC LIMIT 5;
SELECT drivers.surname FROM drivers JOIN laptimes ON laptimes.driverid = drivers.driverid JOIN races ON laptimes.raceid = races.raceid JOIN qualifying ON qualifying.driverid = drivers.driverid AND qualifying.raceid = races.raceid WHERE races.raceid = 19 AND qualifying.q2 = (SELECT MIN(q2) FROM qualifying WHERE raceid = 19)
SELECT year FROM races JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.location = 'Shanghai';
SELECT races.url FROM races JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.name = 'Circuit de Barcelona-Catalunya';
SELECT races.name FROM races JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.country = 'Germany';
SELECT constructorresults.points, races.name FROM constructorresults JOIN races ON constructorresults.raceid = races.raceid JOIN circuits ON races.circuitid = circuits.circuitid JOIN constructors ON constructors.constructorid = constructorresults.constructorid WHERE constructors.name = 'Renault';
SELECT COUNT(*) FROM races JOIN circuits ON races.circuitid = circuits.circuitid WHERE races.year = 2010 AND circuits.country NOT IN ('Asia', 'Europe');
SELECT races.name FROM races JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.country = 'Spain';
SELECT circuits.lat, circuits.lng FROM circuits JOIN races ON circuits.circuitid = races.circuitid WHERE races.name = "Australian Grand Prix";
SELECT races.url FROM races JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.name = 'Sepang International Circuit';
SELECT time FROM races JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.name = 'Sepang International Circuit';
SELECT c.lat, c.lng FROM races r JOIN circuits c ON r.circuitid = c.circuitid WHERE r.name = 'Abu Dhabi Grand Prix';
SELECT c.nationality FROM constructors c JOIN constructorresults cr ON c.constructorid = cr.constructorid WHERE cr.raceid = 24 AND cr.points = 1;
SELECT forename, surname, q1 FROM qualifying JOIN drivers ON qualifying.driverid = drivers.driverid WHERE drivers.forename = 'Bruno' AND drivers.surname = 'Senna' AND qualifying.raceid = 354;
SELECT nationality FROM drivers WHERE driverid IN (SELECT driverid FROM qualifying WHERE q2 = '0:01:40' AND raceid = 355);
SELECT number FROM qualifying WHERE raceid = 903 AND q3 = '0:01:54';
SELECT COUNT(*) FROM results WHERE raceid = (SELECT raceid FROM races WHERE name = "Bahrain Grand Prix" AND year = 2007) AND statusid NOT IN (SELECT statusid FROM status WHERE status = "Finished") AND time IS NULL;
SELECT seasons.url FROM seasons JOIN races ON seasons.year = races.year WHERE races.raceid = 901;
SELECT COUNT(*) FROM results WHERE raceid = (SELECT raceid FROM races WHERE date = '2015-11-29') AND statusid = (SELECT statusid FROM status WHERE status = 'Finished'); 
SELECT drivers.driverref FROM drivers JOIN results ON drivers.driverid = results.driverid WHERE results.raceid = 592 AND results.time IS NOT NULL ORDER BY drivers.dob LIMIT 1;
SELECT driverref, url FROM laptimes JOIN drivers ON laptimes.driverid = drivers.driverid WHERE time = '0:01:27' AND raceid = 161;
SELECT nationality FROM drivers WHERE driverid = (SELECT driverid FROM results WHERE raceid = 933 AND fastestlapspeed = (SELECT MAX(fastestlapspeed) FROM results WHERE raceid = 933));
SELECT circuits.lat, circuits.lng FROM circuits JOIN races ON circuits.circuitid = races.circuitid WHERE races.name = 'Malaysian Grand Prix';
SELECT url FROM constructors WHERE constructorid = (SELECT constructorid FROM constructorresults WHERE raceid = 9 GROUP BY constructorid ORDER BY SUM(points) DESC LIMIT 1);
SELECT forename, surname, q1 FROM drivers JOIN qualifying ON drivers.driverid = qualifying.driverid WHERE forename = 'Lucas' AND surname = 'di Grassi' AND raceid = 345;
SELECT d.nationality FROM qualifying q JOIN drivers d ON q.driverid = d.driverid WHERE q.q2 = '0:01:15' AND q.raceid = 347;
SELECT code FROM drivers WHERE driverid IN (SELECT driverid FROM qualifying WHERE raceid = 45 AND q3 = '0:01:33');
SELECT time FROM results WHERE raceid = 743 AND driverid = (SELECT driverid FROM drivers WHERE driverref = 'mclaren');
SELECT forename, surname FROM results JOIN drivers ON results.driverid = drivers.driverid JOIN races ON results.raceid = races.raceid WHERE races.name = "San Marino Grand Prix" AND races.year = 2006 AND results.position = 2;
SELECT seasons.url FROM seasons JOIN races ON seasons.year = races.year WHERE races.raceid = 901;
SELECT COUNT(DISTINCT results.driverid) FROM results JOIN races ON results.raceid = races.raceid JOIN status ON results.statusid = status.statusid WHERE races.date = '2015-11-29' AND status.status = 'Finished';
SELECT driverref FROM drivers JOIN results ON drivers.driverid = results.driverid WHERE results.raceid = 872 AND results.time IS NOT NULL ORDER BY dob DESC LIMIT 1;
SELECT drivers.forename, drivers.surname FROM laptimes JOIN drivers ON laptimes.driverid = drivers.driverid WHERE laptimes.raceid = 348 AND laptimes.time = (SELECT MIN(time) FROM laptimes WHERE raceid = 348);
SELECT nationality FROM drivers WHERE driverid = (SELECT driverid FROM results WHERE fastestlapspeed = (SELECT MAX(fastestlapspeed) FROM results));
SELECT fastestlapspeed FROM results WHERE raceid = 853;
SELECT COUNT(CASE WHEN time IS NOT NULL THEN driverid END) * 100.0 / COUNT(driverid) AS percentage FROM results WHERE raceid IN (SELECT raceid FROM races WHERE date = '1983-07-16');
SELECT min(year) from races where name = 'Singapore Grand Prix';
SELECT COUNT(*) as race_count FROM races WHERE year = 2005;
SELECT name FROM races WHERE date = (SELECT MIN(date) FROM races) UNION SELECT name FROM races WHERE strftime('%Y-%m', date) = (SELECT strftime('%Y-%m', date) FROM races WHERE date = (SELECT MIN(date) FROM races))
SELECT name, date FROM races WHERE year = 1999 AND round = (SELECT MAX(round) FROM races WHERE year = 1999);
SELECT MAX(year) AS year FROM races GROUP BY year ORDER BY MAX(round) DESC LIMIT 1;
SELECT race.name FROM races AS race WHERE race.year = 2017 EXCEPT SELECT r.name FROM races AS r WHERE r.year = 2000;
SELECT circuits.circuitid, circuits.name, circuits.location, circuits.country FROM races JOIN circuits ON races.circuitid = circuits.circuitid WHERE races.name = "European Grand Prix" ORDER BY races.year LIMIT 1;
SELECT max(seasons.year) FROM seasons JOIN races ON races.year = seasons.year JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.name = 'Brands Hatch' AND races.name = 'British Grand Prix';
SELECT COUNT(DISTINCT races.year) FROM races JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.name = 'Silverstone Circuit' AND races.name = 'British Grand Prix' AND circuits.country = 'United Kingdom';
SELECT drivers.surname, drivers.forename FROM drivers JOIN driverstandings ON drivers.driverid = driverstandings.driverid JOIN races ON races.raceid = driverstandings.raceid WHERE races.year = 2010 AND races.name = 'Singapore Grand Prix' ORDER BY driverstandings.position;
SELECT drivers.forename, drivers.surname, MAX(driverstandings.points) AS max_points FROM drivers JOIN driverstandings ON drivers.driverid = driverstandings.driverid;
SELECT drivers.forename, drivers.surname, results.points FROM drivers JOIN results ON drivers.driverid = results.driverid JOIN races ON results.raceid = races.raceid WHERE races.year = 2017 AND races.name = "Chinese Grand Prix" ORDER BY results.points DESC LIMIT 3;
SELECT MIN(time), driverid, raceid FROM laptimes;
SELECT AVG(time) FROM laptimes WHERE driverid = (SELECT driverid FROM drivers WHERE driverref = 'vettel') AND raceid = (SELECT raceid FROM races WHERE name = 'Chinese Grand Prix' AND year = 2009);
SELECT COUNT(*) as percentage FROM driverstandings JOIN races ON driverstandings.raceid = races.raceid JOIN drivers ON drivers.driverid = driverstandings.driverid WHERE drivers.surname = 'Hamilton' AND races.year >= 2010 AND driverstandings.position > 1;
SELECT drivers.forename, drivers.surname, drivers.nationality, AVG(driverstandings.points) as avg_points FROM driverstandings JOIN drivers ON driverstandings.driverid = drivers.driverid GROUP BY drivers.driverid ORDER BY COUNT(driverstandings.wins) DESC LIMIT 1;
SELECT MIN(2022 - strftime('%Y', dob) + 1) AS youngest_age, forename FROM drivers WHERE nationality = 'Japanese'
SELECT c.name FROM circuits c JOIN races r ON c.circuitid = r.circuitid WHERE r.year BETWEEN 1990 AND 2000 GROUP BY c.circuitid HAVING COUNT(r.raceid) = 4;
SELECT circuits.name, circuits.location, races.name FROM circuits JOIN races ON circuits.circuitid = races.circuitid WHERE circuits.country = "USA" AND races.year = 2006;
SELECT races.name, circuits.name, circuits.location FROM races JOIN circuits ON races.circuitid = circuits.circuitid JOIN seasons ON races.year = seasons.year WHERE strftime('%m', date) = '09' AND strftime('%Y', date) = '2005';
SELECT raceid FROM drivers JOIN results ON drivers.driverid = results.driverid WHERE forename = 'Alex' AND surname = 'Yoong' AND results.position < 10;
SELECT COUNT(*) FROM driverstandings JOIN results ON driverstandings.raceid = results.raceid AND driverstandings.driverid = results.driverid JOIN races ON results.raceid = races.raceid JOIN drivers ON driverstandings.driverid = drivers.driverid WHERE drivers.forename = 'Michael' AND drivers.surname = 'Schumacher' AND races.name = 'Sepang International Circuit' AND driverstandings.wins = 1;
SELECT raceid, year FROM races WHERE raceid IN (SELECT raceid FROM results WHERE driverid = (SELECT driverid FROM drivers WHERE forename = 'Michael' AND surname = 'Schumacher') AND fastestlap = 1 ORDER BY fastestlaptime LIMIT 1);
SELECT AVG(points) FROM driverstandings JOIN races ON driverstandings.raceid = races.raceid WHERE driverid = (SELECT driverid FROM drivers WHERE forename = 'Eddie' AND surname = 'Irvine') AND races.year = 2000;
SELECT races.name, results.points FROM races JOIN results ON races.raceid = results.raceid JOIN drivers ON results.driverid = drivers.driverid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' AND races.year = (SELECT MIN(year) FROM races)
SELECT races.name, circuits.country FROM races JOIN circuits ON races.circuitid = circuits.circuitid WHERE races.year = 2017 ORDER BY races.date;
SELECT MAX(laps) as max_laps, races.name, races.year, circuits.location FROM races JOIN circuits ON races.circuitid = circuits.circuitid JOIN results ON races.raceid = results.raceid GROUP BY races.raceid ORDER BY max_laps DESC LIMIT 1;
SELECT COUNT(*) * 100.0 / (SELECT COUNT(*) FROM races WHERE name = 'European Grand Prix') FROM races JOIN circuits ON races.circuitid = circuits.circuitid WHERE races.name = 'European Grand Prix' AND circuits.country = 'Germany';
SELECT lat, lng FROM circuits WHERE circuitref = 'silverstone';
SELECT name FROM circuits WHERE name IN ('Silverstone Circuit', 'Hockenheimring', 'Hungaroring') ORDER BY lat DESC LIMIT 1;
SELECT circuitRef FROM circuits WHERE name = 'Marina Bay Street Circuit';
SELECT country FROM circuits WHERE alt = (SELECT MAX(alt) FROM circuits);
SELECT Count(*) FROM drivers WHERE code IS NULL;
SELECT nationality FROM drivers WHERE dob = (SELECT MIN(dob) FROM drivers);
SELECT surname FROM drivers WHERE nationality = 'Italian';
SELECT `url` FROM drivers WHERE forename = 'Anthony' AND driverref = 'davidson';
SELECT driverref FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton';
SELECT c.name FROM races AS r JOIN circuits AS c ON r.circuitid = c.circuitid WHERE r.name = "Spanish Grand Prix" AND r.year = 2009;
SELECT year FROM races JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.name = 'Silverstone Circuit';
SELECT races.url FROM races JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.name = 'Silverstone Circuit';
SELECT races.time FROM races JOIN circuits ON races.circuitid = circuits.circuitid WHERE races.year BETWEEN 2010 AND 2019 AND circuits.name = 'Abu Dhabi';
SELECT COUNT(*) FROM races JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.country = 'Italy';
SELECT date FROM races WHERE circuitid IN (SELECT circuitid FROM circuits WHERE name = 'Barcelona-Catalunya');
SELECT circuits.url FROM circuits JOIN races ON circuits.circuitid = races.circuitid JOIN seasons ON races.year = seasons.year WHERE races.name = "Spanish Grand Prix" AND races.year = 2009;
SELECT MIN(fastestlaptime) FROM results WHERE driverid = (SELECT driverid FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton');
SELECT forename, surname FROM drivers JOIN results ON drivers.driverid = results.driverid ORDER BY fastestlapspeed DESC LIMIT 1;
SELECT drivers.driverref FROM drivers JOIN driverstandings ON drivers.driverid = driverstandings.driverid JOIN races ON driverstandings.raceid = races.raceid WHERE races.name = 'Australian Grand Prix' AND races.year = 2008 AND driverstandings.position = 1;
SELECT races.name FROM races JOIN results ON races.raceid = results.raceid JOIN drivers ON results.driverid = drivers.driverid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton';
SELECT races.name FROM races JOIN results ON results.raceid = races.raceid JOIN drivers ON results.driverid = drivers.driverid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' ORDER BY results.rank LIMIT 1;
SELECT MAX(fastestlapspeed) FROM results JOIN races ON results.raceid = races.raceid WHERE races.year = 2009 AND races.name = "Spanish Grand Prix";
SELECT races.year FROM drivers JOIN results ON drivers.driverid = results.driverid JOIN races ON results.raceid = races.raceid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton';
SELECT positionorder FROM results WHERE raceid = (SELECT raceid FROM races WHERE year = 2008 AND name = "Australian Grand Prix") AND driverid = (SELECT driverid FROM driverstandings WHERE driverid = "Lewis Hamilton" AND raceid = (SELECT raceid FROM races WHERE year = 2008 AND name = "Australian Grand Prix"));
SELECT forename, surname FROM drivers JOIN results ON drivers.driverid = results.driverid JOIN races ON results.raceid = races.raceid WHERE races.year = 2008 AND races.name = "Australian Grand Prix" AND results.grid = 4;
SELECT COUNT(DISTINCT results.driverid) FROM results JOIN races ON results.raceid = races.raceid JOIN status ON results.statusid = status.statusid WHERE races.year = 2008 AND races.name = "Australian Grand Prix" AND results.time IS NOT NULL;
SELECT fastestlaptime FROM results WHERE raceid = (SELECT raceid FROM races WHERE name = 'Australian Grand Prix' AND year = 2008) AND driverid = (SELECT driverid FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton');
SELECT time FROM results WHERE raceid = (SELECT raceid FROM races WHERE year = 2008 AND name = 'Australian Grand Prix') AND position = 2;
SELECT drivers.forename, drivers.surname, drivers.url FROM drivers JOIN driverstandings ON drivers.driverid = driverstandings.driverid JOIN races ON driverstandings.raceid = races.raceid JOIN results ON driverstandings.raceid = results.raceid AND driverstandings.driverid = results.driverid WHERE races.year = 2008 AND races.name = 'Australian Grand Prix' AND results.time = 'HH:MM:SS.mmm' AND driverstandings.position = 1;
SELECT COUNT(*) FROM drivers JOIN results ON drivers.driverid = results.driverid JOIN races ON results.raceid = races.raceid WHERE races.year = 2008 AND races.name = 'Australian Grand Prix' AND drivers.nationality = 'American';
SELECT COUNT(DISTINCT results.driverid) FROM results JOIN races ON results.raceid = races.raceid JOIN drivers ON results.driverid = drivers.driverid WHERE races.year = 2008 AND races.name = 'Australian Grand Prix' AND results.time IS NOT NULL;
SELECT SUM(points) as total_points FROM driverstandings WHERE driverid = (SELECT driverid FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton');
SELECT avg(strftime('%s', fastestLapTime) - strftime('%s', '00:00') + 0.0) FROM results JOIN drivers ON results.driverid = drivers.driverid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton';
SELECT COUNT(CASE WHEN time IS NOT NULL THEN raceid END) * 1.0 / COUNT(raceid) AS completion_rate FROM laptimes WHERE raceid IN (SELECT raceid FROM races WHERE year = 2008 AND name = 'Australian Grand Prix');
SELECT max((((lt.time - r.time) / r.time) * 100)) AS percentage_faster FROM results AS r JOIN laptimes AS lt ON r.raceid = lt.raceid AND r.driverid = lt.driverid JOIN races AS race ON r.raceid = race.raceid WHERE race.year = 2008 AND race.name = 'Australian Grand Prix' AND r.position = (SELECT MAX(position) FROM results WHERE raceid = r.raceid);
SELECT count(*) FROM circuits WHERE country = 'Australia' AND location = 'Melbourne';
SELECT location, lat, lng FROM circuits JOIN races ON circuits.circuitid = races.circuitid WHERE country = 'USA';
SELECT COUNT(*) FROM drivers WHERE nationality = 'British' AND dob > 1980;
SELECT AVG(points) FROM constructorresults JOIN constructors ON constructorresults.constructorid = constructors.constructorid WHERE constructors.nationality = 'British';
SELECT constructorid FROM constructorresults GROUP BY constructorid ORDER BY SUM(points) DESC LIMIT 1;
SELECT constructors.name FROM constructorresults JOIN constructors ON constructorresults.constructorid = constructors.constructorid WHERE constructorresults.points = 0 AND constructorresults.raceid = 291;
SELECT count(distinct constructorid) FROM constructorstandings WHERE points = 0 AND constructorid IN (SELECT constructorid FROM constructorstandings GROUP BY constructorid HAVING COUNT(DISTINCT raceid) = 2) AND constructorid IN (SELECT constructorid FROM constructors WHERE nationality = 'Japanese');
SELECT `constructors`.`name` FROM `constructors` JOIN `constructorstandings` ON `constructors`.`constructorid` = `constructorstandings`.`constructorid` WHERE `constructorstandings`.`position` = 1;
SELECT count(distinct c.constructorid) FROM constructorresults cr JOIN constructors c ON cr.constructorid = c.constructorid JOIN results r ON r.constructorid = c.constructorid AND r.raceid = cr.raceid WHERE c.nationality = 'French' AND r.laps > 50;
SELECT COUNT(driverid) * 100.0 / (SELECT COUNT(driverid) FROM races WHERE year BETWEEN 2007 AND 2009) FROM results WHERE driverid IN (SELECT driverid FROM drivers WHERE nationality = 'Japanese') AND raceid IN (SELECT raceid FROM races WHERE year BETWEEN 2007 AND 2009 AND time IS NOT NULL);
SELECT AVG(strftime('%s', results.time)) as average_time_seconds, races.year FROM races JOIN driverstandings ON races.raceid = driverstandings.raceid JOIN results ON results.raceid = races.raceid AND results.driverid = driverstandings.driverid WHERE results.time IS NOT NULL AND driverstandings.position = 1 GROUP BY races.year;
SELECT forename, surname FROM drivers JOIN driverstandings ON drivers.driverid = driverstandings.driverid WHERE drivers.dob > 1975 AND driverstandings.position = 2;
SELECT COUNT(*) FROM drivers JOIN results ON drivers.driverid = results.driverid JOIN status ON results.statusid = status.statusid WHERE drivers.nationality = 'Italian' AND results.time IS NULL;
SELECT forename, surname FROM drivers WHERE driverid IN (SELECT driverid FROM results WHERE fastestlaptime IS NOT NULL ORDER BY fastestlaptime LIMIT 1);
SELECT MAX(l.time) AS "Fastest Lap Time" FROM driverstandings ds JOIN races r ON ds.raceid = r.raceid JOIN laptimes l ON ds.raceid = l.raceid AND ds.driverid = l.driverid WHERE r.year = 2009 AND ds.position = 1;
SELECT avg(fastestlapspeed) FROM races JOIN results ON races.raceid = results.raceid WHERE races.name = 'Spanish Grand Prix' AND races.year = 2009;
SELECT name, year FROM races WHERE time = (SELECT MIN(milliseconds) FROM results WHERE milliseconds IS NOT NULL);
SELECT COUNT(driverid) * 100.0 / (SELECT COUNT(driverid) FROM drivers WHERE date(dob) < '1985-01-01') FROM results WHERE raceid IN (SELECT raceid FROM races WHERE year BETWEEN 2000 AND 2005) AND laps > 50;
SELECT COUNT(DISTINCT drivers.driverid) FROM drivers JOIN laptimes ON drivers.driverid = laptimes.driverid WHERE drivers.nationality = 'French' AND laptimes.time < '02:00.00';
SELECT `code` FROM drivers WHERE nationality = 'American';
SELECT raceid FROM races WHERE year = 2009;
SELECT COUNT(DISTINCT driverid) FROM results WHERE raceid = 18;
SELECT forename, dob from drivers order by dob desc limit 3;
SELECT driverref FROM drivers WHERE forename = 'Robert' AND surname = 'Kubica';
SELECT COUNT(*) FROM drivers WHERE nationality = 'Australian' AND dob LIKE '1980%';
SELECT forename, surname FROM drivers WHERE dob BETWEEN '1980-01-01' AND '1990-12-31' AND drivers.driverid IN (SELECT driverid FROM laptimes WHERE position = 1 AND laptimes.driverid = drivers.driverid) AND drivers.driverid IN (SELECT driverid FROM results WHERE position = 1) AND drivers.driverref = 'driver' LIMIT 3;
SELECT driverRef FROM drivers WHERE nationality = 'German' ORDER BY dob LIMIT 1;
SELECT results.driverid, code FROM drivers JOIN results ON drivers.driverid = results.driverid WHERE dob = '1971' AND fastestlaptime IS NOT NULL;
SELECT forename, surname FROM drivers WHERE nationality = 'Spanish' AND dob < 1982 ORDER BY (SELECT MAX(time) FROM laptimes WHERE laptimes.driverid = drivers.driverid) DESC LIMIT 10;
SELECT races.year FROM races JOIN results ON races.raceid = results.raceid WHERE results.fastestlaptime IS NOT NULL ORDER BY results.fastestlaptime LIMIT 1;
SELECT year FROM races WHERE raceid IN ( SELECT raceid FROM laptimes WHERE time = ( SELECT MIN(time) FROM laptimes ) );
SELECT laptimes.driverid FROM laptimes WHERE lap = 1 ORDER BY time LIMIT 5;
SELECT COUNT(*) FROM results WHERE raceid > 50 AND raceid < 100 AND time IS NOT NULL AND statusid = 2;
SELECT location, lat, lng FROM circuits WHERE circuits.circuitid IN (SELECT circuitid FROM races WHERE races.circuitid = circuits.circuitid AND races.year IN (SELECT year FROM seasons WHERE seasons.url = 'url_for_Austria_season'));
SELECT raceid, COUNT(*) AS finishers FROM results WHERE time IS NOT NULL GROUP BY raceid ORDER BY COUNT(*) DESC LIMIT 1;
SELECT driverRef, nationality, dob FROM drivers JOIN qualifying ON drivers.driverid = qualifying.driverid WHERE raceid = 23 AND q2 IS NOT NULL;
SELECT r.year, ra.name, ra.date FROM races ra JOIN qualifying q ON ra.raceid = q.raceid JOIN drivers d ON q.driverid = d.driverid WHERE d.dob = (SELECT MIN(dob) FROM drivers); 
SELECT COUNT(*) FROM drivers INNER JOIN results ON drivers.driverid = results.driverid WHERE results.statusid = 2 AND drivers.nationality = 'American';
SELECT `name`, `url` FROM constructors WHERE `nationality` = 'Italian' ORDER BY (SELECT SUM(`points`) FROM constructorresults WHERE constructorresults.constructorid = constructors.constructorid) DESC LIMIT 1;
SELECT constructorref FROM constructors WHERE constructorid = (SELECT constructorid FROM constructorstandings GROUP BY constructorid ORDER BY SUM(wins) DESC LIMIT 1);
SELECT drivers.driverref FROM laptimes JOIN drivers ON laptimes.driverid = drivers.driverid WHERE laptimes.raceid = (SELECT raceid FROM races WHERE name = "French Grand Prix") AND laptimes.lap = 3 ORDER BY laptimes.time DESC LIMIT 1;
SELECT raceid, MIN(time) AS fastest_1st_lap_time FROM laptimes WHERE lap = 1 GROUP BY raceid ORDER BY fastest_1st_lap_time LIMIT 1;
SELECT AVG(fastestlaptime) FROM results WHERE raceid = '2006 United States Grand Prix' AND rank < 11;
SELECT forename, surname, AVG(duration) as avg_duration FROM drivers JOIN pitstops ON drivers.driverid = pitstops.driverid WHERE dob BETWEEN '1980-01-01' AND '1985-12-31' AND drivers.driverref = 'German' GROUP BY drivers.driverid, drivers.forename, drivers.surname ORDER BY avg_duration LIMIT 5;
SELECT drivers.forename, drivers.surname, results.time FROM races JOIN results ON races.raceid = results.raceid JOIN drivers ON results.driverid = drivers.driverid WHERE races.name = 'Canadian Grand Prix' AND races.year = 2008 AND results.position = 1;
SELECT constructorRef, c.url FROM races r JOIN results rs ON r.raceid = rs.raceid JOIN constructors c ON rs.constructorid = c.constructorid WHERE r.year = 2009 AND r.name = "Singapore Grand Prix" AND rs.position = 1;
SELECT forename || ' ' || surname AS full_name, dob FROM drivers WHERE dob BETWEEN '1981-01-01' AND '1991-12-31' AND nationality = 'Austrian';
SELECT forename || ' ' || surname AS full_name, 'https://en.wikipedia.org/wiki/' || forename || '_' || surname AS wiki_link, dob FROM drivers WHERE nationality = 'German' AND dob BETWEEN '1971-01-01' AND '1985-12-31' ORDER BY dob DESC;
SELECT location, country, lat, lng FROM circuits WHERE circuitref = 'hungaroring';
SELECT constructorstandings.points, constructors.name, constructors.nationality FROM constructorstandings JOIN constructors ON constructorstandings.constructorid = constructors.constructorid JOIN races ON constructorstandings.raceid = races.raceid WHERE races.name = 'Monaco Grand Prix' AND races.year BETWEEN 1980 AND 2010 ORDER BY constructorstandings.points DESC LIMIT 1;
SELECT AVG(points) FROM driverstandings JOIN drivers ON driverstandings.driverid = drivers.driverid JOIN races ON driverstandings.raceid = races.raceid WHERE drivers.forename = 'Lewis' AND drivers.driverref = 'hamilton' AND races.name = "Turkish Grand Prix";
SELECT Avg(num_of_races) FROM (SELECT year, COUNT(*) AS num_of_races FROM races WHERE date BETWEEN '2000-01-01' AND '2010-12-31' GROUP BY year) avg_races;
SELECT MAX(nationality) FROM drivers;
SELECT COUNT(wins) as total_victories FROM driverstandings WHERE position = 91
SELECT races.name FROM results JOIN races ON results.raceid = races.raceid WHERE fastestlaptime = (SELECT MIN(fastestlaptime) FROM results);
SELECT circuits.circuitid, location || ', ' || country AS full_location FROM races JOIN circuits ON races.circuitid = circuits.circuitid WHERE date = (SELECT MAX(date) FROM races);
SELECT drivers.forename, drivers.surname FROM drivers JOIN qualifying ON drivers.driverid = qualifying.driverid JOIN races ON races.raceid = qualifying.raceid JOIN circuits ON circuits.circuitid = races.circuitid WHERE qualifying.q3 = (SELECT MIN(q3) FROM qualifying WHERE raceid = 3) AND races.year = 2008 AND circuits.name = "Marina Bay Street Circuit" AND qualifying.position = 1;
SELECT forename || ' ' || surname AS full_name, nationality, races.name AS first_race FROM drivers JOIN results ON drivers.driverid = results.driverid JOIN races ON results.raceid = races.raceid WHERE dob = (SELECT MIN(dob) FROM drivers);
SELECT (SELECT count(*) FROM results JOIN status ON results.statusid = status.statusid WHERE status.status = 'Accident' AND results.raceid = (SELECT raceid FROM races WHERE name = 'Canadian Grand Prix') AND results.driverid = (SELECT driverid FROM results JOIN status ON results.statusid = status.statusid JOIN races ON results.raceid = races.raceid WHERE races.name = 'Canadian Grand Prix' GROUP BY results.driverid ORDER BY count(*) DESC LIMIT 1));
SELECT forename, surname, MAX(wins) as total_wins FROM drivers JOIN driverstandings ON drivers.driverid = driverstandings.driverid WHERE dob = (SELECT MIN(dob) FROM drivers);
SELECT MAX(duration) AS longest_pitstop_duration FROM pitstops;
SELECT min(milliseconds) as fastest_lap_time FROM laptimes;
SELECT MAX(duration) FROM pitstops WHERE driverid IN (SELECT driverid FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton');
SELECT lap FROM pitstops WHERE driverid IN (SELECT driverid FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton') AND raceid IN (SELECT raceid FROM races WHERE year = 2011 AND name = 'Australian Grand Prix');
SELECT duration FROM pitstops JOIN races ON pitstops.raceid = races.raceid JOIN drivers ON pitstops.driverid = drivers.driverid WHERE races.year = 2011 AND races.name = 'Australian Grand Prix';
SELECT `fastestlaptime` FROM results WHERE driverid = (SELECT driverid FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton') ORDER BY fastestlaptime ASC LIMIT 1;
SELECT drivers.forename, drivers.surname FROM laptimes JOIN drivers ON laptimes.driverid = drivers.driverid WHERE time = (SELECT MIN(time) FROM laptimes)
SELECT drivers.forename, drivers.surname, circuits.name, laptimes.position FROM laptimes JOIN races ON laptimes.raceid = races.raceid JOIN drivers ON laptimes.driverid = drivers.driverid JOIN circuits ON races.circuitid = circuits.circuitid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' AND races.name = 'Formula_1' AND laptimes.time = (SELECT MIN(time) FROM laptimes WHERE driverid = drivers.driverid AND raceid = races.raceid);
SELECT MAX(time) FROM laptimes WHERE raceid = (SELECT raceid FROM races WHERE name = 'Austrian Grand Prix');
SELECT laptimes.time FROM laptimes JOIN races ON laptimes.raceid = races.raceid JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.country = 'Italy' ORDER BY laptimes.time LIMIT 1;
SELECT raceid FROM results WHERE fastestlaptime = (SELECT MIN(fastestlaptime) FROM results) AND raceid IN (SELECT raceid FROM races WHERE name = 'Austrian Grand Prix');
SELECT duration FROM pitstops INNER JOIN (SELECT raceid, MIN(time) AS fastest_time FROM laptimes GROUP BY raceid) AS fastest_lap ON pitstops.raceid = fastest_lap.raceid AND pitstops.duration = fastest_lap.fastest_time;
SELECT c.lat, c.lng FROM circuits c JOIN races r ON c.circuitid = r.circuitid JOIN laptimes lt ON r.raceid = lt.raceid WHERE lt.time = "1:29.488";
SELECT AVG(milliseconds) FROM pitstops JOIN drivers ON pitstops.driverid = drivers.driverid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton';
SELECT AVG(milliseconds) FROM laptimes JOIN races ON laptimes.raceid = races.raceid JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.country = 'Italy';
SELECT player_api_id FROM player_attributes WHERE overall_rating = (SELECT MAX(overall_rating) FROM player_attributes);
SELECT player.player_name, player.height FROM player WHERE player.height = (SELECT MAX(height) FROM player);
SELECT preferred_foot FROM player_attributes WHERE potential = (SELECT MIN(potential) FROM player_attributes);
SELECT COUNT(*) FROM player_attributes WHERE overall_rating >= 60 AND overall_rating < 65 AND defensive_work_rate = 'low';
SELECT player_api_id FROM player_attributes ORDER BY crossing DESC LIMIT 5;
SELECT l.name FROM match m JOIN league l ON m.league_id = l.id WHERE m.season = '2015/2016' GROUP BY l.name ORDER BY SUM(m.home_team_goal + m.away_team_goal) DESC LIMIT 1;
SELECT team.team_long_name FROM match JOIN team ON match.home_team_api_id = team.team_api_id WHERE season = '2015/2016' AND home_team_goal < away_team_goal GROUP BY match.home_team_api_id ORDER BY COUNT(*) ASC LIMIT 1;
SELECT player.player_name, MAX(player_attributes.penalties) as max_penalties FROM player JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id GROUP BY player.player_name ORDER BY max_penalties DESC LIMIT 10;
SELECT team.team_long_name FROM match JOIN team ON match.away_team_api_id = team.team_api_id JOIN league ON match.league_id = league.id WHERE league.name = 'Scotland Premier League' AND match.season = '2009/2010' AND match.away_team_goal > match.home_team_goal GROUP BY team.team_long_name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT team.team_long_name, team_attributes.buildupplayspeed FROM team JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id ORDER BY team_attributes.buildupplayspeed DESC LIMIT 4;
SELECT league.name FROM match JOIN league ON match.league_id = league.id WHERE season = '2015/2016' GROUP BY league.name ORDER BY SUM(CASE WHEN home_team_goal = away_team_goal THEN 1 ELSE 0 END) DESC LIMIT 1;
SELECT strftime('%Y', 'now') - strftime('%Y', birthday) - (strftime('%m-%d', 'now') < strftime('%m-%d', birthday)) AS age FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE sprint_speed >= 97 AND player.birthday <= '2015-12-31 00:00:00' AND player.birthday >= '2013-01-01 00:00:00';
SELECT name, COUNT(league_id) AS matches_played FROM match JOIN league ON match.league_id = league.id GROUP BY league.name ORDER BY matches_played DESC LIMIT 1;
SELECT AVG(height) FROM player WHERE birthday >= '1990-01-01 00:00:00' AND birthday < '1996-01-01 00:00:00';
SELECT player_api_id FROM player_attributes WHERE overall_rating > (SELECT AVG(overall_rating) FROM player_attributes WHERE substr(date,1,4) = '2010') AND substr(date,1,4) = '2010';
SELECT team_fifa_api_id FROM team_attributes WHERE buildUpPlaySpeed BETWEEN 51 AND 59;
SELECT team.team_long_name FROM team JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team_attributes.buildUpPlayPassing > (SELECT AVG(buildUpPlayPassing) FROM team_attributes WHERE buildUpPlayPassing IS NOT NULL) AND strftime('%Y', team_attributes.date) = '2012';
SELECT (SELECT (COUNT(player_fifa_api_id) * 1.0) / (SELECT COUNT(*) FROM player WHERE birthday BETWEEN '1987-01-01 00:00:00' AND '1992-12-31 00:00:00') FROM player_attributes WHERE preferred_foot = 'left' AND player_fifa_api_id IN (SELECT player_fifa_api_id FROM player WHERE birthday BETWEEN '1987-01-01 00:00:00' AND '1992-12-31 00:00:00')) as percentage_left_footed_players;
SELECT league.name, SUM(home_team_goal + away_team_goal) AS total_goals FROM match JOIN league ON match.league_id = league.id GROUP BY league.id ORDER BY total_goals ASC LIMIT 5;
SELECT AVG(long_shots) as average_long_shots FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = 'Ahmed Samir Farag';
SELECT player.player_name FROM player JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE height > 180 GROUP BY player.player_name ORDER BY AVG(player_attributes.heading_accuracy) DESC LIMIT 10;
SELECT team.team_long_name, AVG(team_attributes.chancecreationpassing) as avg_passing FROM team JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team_attributes.buildupplaydribblingclass = 'Normal' AND team_attributes.date >= '2014-01-01 00:00:00' AND team_attributes.date <= '2014-01-31 00:00:00' GROUP BY team.team_long_name HAVING AVG(team_attributes.chancecreationpassing) < (SELECT AVG(chancecreationpassing) FROM team_attributes) ORDER BY avg_passing DESC;
SELECT name FROM match JOIN league ON match.league_id = league.id WHERE season = "2009/2010" GROUP BY league.name HAVING AVG(home_team_goal) > AVG(away_team_goal);
SELECT team_short_name FROM team WHERE team_long_name = 'Queens Park Rangers';
SELECT player_name FROM player WHERE substr(birthday,1,4) = '1970' AND substr(birthday,6,2) = '10';
SELECT attacking_work_rate FROM player_attributes JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.player_name = 'Franco Zennaro';
SELECT team_attributes.buildupplaypositioningclass FROM team_attributes JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team.team_long_name = 'ADO Den Haag';
SELECT heading_accuracy FROM player_attributes pa JOIN player p ON pa.player_api_id = p.player_api_id WHERE p.player_name = 'Francois Affolter' AND pa.date = '2014-09-18 00:00:00';
SELECT overall_rating FROM player_attributes WHERE player_api_id = (SELECT player_api_id FROM player WHERE player_name = 'Gabriel Tamas') AND strftime('%Y', date) = '2011';
SELECT COUNT(*) FROM match JOIN league ON match.league_id = league.id WHERE league.name = 'Scotland Premier League' AND match.season = '2015/2016';
SELECT preferred_foot FROM player JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE birthday = (SELECT MAX(birthday) FROM player);
SELECT player.player_name FROM player JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_attributes.potential = (SELECT MAX(potential) FROM player_attributes);
SELECT COUNT(*) FROM player JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.weight < 130 AND player_attributes.preferred_foot = 'left';
SELECT team.team_short_name FROM team_attributes JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team_attributes.chancecreationpassingclass = 'Risky';
SELECT defensive_work_rate FROM player JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_name = "David Wilson";
SELECT player.birthday FROM player JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_attributes.overall_rating = (SELECT MAX(overall_rating) FROM player_attributes);
SELECT name FROM league WHERE country_id = (SELECT id FROM country WHERE name = 'Netherlands');
SELECT AVG(home_team_goal) FROM match JOIN country ON match.country_id = country.id WHERE country.name = 'Poland' AND match.season = '2010/2011';
SELECT player.player_name, AVG(player_attributes.finishing) as average_finishing_rate FROM player JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.height = (SELECT MAX(height) FROM player) OR player.height = (SELECT MIN(height) FROM player) GROUP BY player.player_name;
SELECT player.player_name FROM player WHERE player.height > 180;
SELECT COUNT(*) FROM player WHERE strftime('%Y', birthday) > '1990';
SELECT player.player_name FROM player WHERE player_name LIKE 'Adam%' AND weight > 170;
SELECT player.player_name FROM player JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_attributes.overall_rating > 80 AND strftime('%Y', player_attributes.date) BETWEEN '2008' AND '2010';
SELECT potential FROM player JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = 'Aaron Doran';
SELECT player.player_name FROM player JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_attributes.preferred_foot = 'left';
SELECT team_long_name FROM team JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team_attributes.buildupplayspeedclass = 'Fast';
SELECT buildupplaypassingclass FROM team JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team_short_name = 'CLB';
SELECT `team`.`team_short_name` FROM `team_attributes` JOIN `team` ON `team_attributes`.`team_api_id` = `team`.`team_api_id` AND `team_attributes`.`team_fifa_api_id` = `team`.`team_fifa_api_id` WHERE `buildupplaypassing` > 70;
SELECT AVG(overall_rating) FROM player_attributes JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE height > 170 AND strftime('%Y', date) BETWEEN '2010' AND '2015';
SELECT player_name FROM player ORDER BY height LIMIT 1;
SELECT country.name FROM league JOIN country ON league.country_id = country.id WHERE league.name = 'Italy Serie A';
SELECT team.team_short_name FROM team_attributes JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE buildupplayspeed = 31 AND buildupplaydribbling = 53 AND buildupplaypassing = 32;
SELECT AVG(overall_rating) FROM player_attributes WHERE player_api_id = (SELECT player_api_id FROM player WHERE player_name = "Aaron Doran");
SELECT COUNT(*) FROM match JOIN league ON match.league_id = league.id JOIN country ON league.country_id = country.id WHERE league.name = 'Germany 1. Bundesliga' AND strftime('%Y-%m', match.date) BETWEEN '2008-08' AND '2008-10';
SELECT team_short_name FROM team JOIN match ON team.team_api_id = match.home_team_api_id WHERE match.home_team_goal = 10;
SELECT player.player_name FROM player_attributes JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE balance = (SELECT MAX(balance) FROM player_attributes WHERE potential = 61) AND potential = 61;
SELECT AVG(ball_control) AS avg_ball_control FROM player_attributes JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.player_name = 'Abdou Diallo' OR player.player_name = 'Aaron Appindangoye' GROUP BY player.player_name;
SELECT team_long_name FROM team WHERE team_short_name = 'GEN';
SELECT player_name, birthday FROM player WHERE player_name IN ('Aaron Lennon', 'Abdelaziz Barrada') ORDER BY birthday ASC LIMIT 1;
SELECT player_name FROM player ORDER BY height DESC LIMIT 1;
SELECT player.player_api_id FROM player JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_attributes.preferred_foot = 'left' AND player_attributes.attacking_work_rate = 'low';
SELECT country.name FROM league JOIN country ON league.country_id = country.id WHERE league.name = 'Belgium Jupiler League';
SELECT name FROM league WHERE country_id = (SELECT id FROM country WHERE name = 'Germany');
SELECT player.player_name FROM player JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE overall_rating = (SELECT MAX(overall_rating) FROM player_attributes);
SELECT COUNT(*) FROM player JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE strftime('%Y', birthday) < '1986' AND defensive_work_rate = 'high';
SELECT player.player_name FROM player_attributes JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.player_name IN ('Alexis', 'Ariel Borysiuk', 'Arouna Kone') ORDER BY player_attributes.crossing DESC LIMIT 1;
SELECT heading_accuracy FROM player_attributes WHERE player_api_id = (SELECT player_api_id FROM player WHERE player_name = 'Ariel Borysiuk');
SELECT player.player_api_id FROM player JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE height > 180 AND volleys > 70;
SELECT player.player_name FROM player JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_attributes.volleys > 70 AND player_attributes.dribbling > 70;
SELECT COUNT(*) FROM match JOIN country ON match.country_id = country.id WHERE season = '2008/2009' AND country.name = 'Belgium';
SELECT player_attributes.long_passing FROM player JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.birthday = (SELECT MAX(birthday) FROM player);
SELECT COUNT(*) FROM match JOIN league ON match.league_id = league.id WHERE league.name = 'Belgium Jupiler League' AND strftime('%Y', date) = '2009' AND strftime('%m', date) = '04';
SELECT (SELECT league_id FROM match WHERE season = '2008/2009' GROUP BY league_id ORDER BY COUNT(*) DESC LIMIT 1);
SELECT AVG(pa.overall_rating) AS average_overall_rating FROM player AS p JOIN player_attributes AS pa ON p.player_api_id = pa.player_api_id WHERE strftime('%Y', p.birthday) < '1986';
SELECT (SELECT ((player_attributes_overall_rating1 - player_attributes_overall_rating2) / player_attributes_overall_rating2) * 100 FROM (SELECT overall_rating AS player_attributes_overall_rating1 FROM player_attributes JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.player_name = 'Ariel Borysiuk') JOIN (SELECT overall_rating AS player_attributes_overall_rating2 FROM player_attributes JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.player_name = 'Paulin Puel') ) AS rating_percentage_difference;
SELECT AVG(buildUpPlaySpeed) FROM team_attributes JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team_long_name = 'Heart of Midlothian';
SELECT AVG(pa.overall_rating) AS average_overall_rating FROM player AS p JOIN player_attributes AS pa ON p.player_api_id = pa.player_api_id WHERE p.player_name = 'Pietro Marino';
SELECT SUM(crossing) FROM player_attributes JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.player_name = 'Aaron Lennox';
SELECT team.team_long_name, MAX(chancecreationpassing) as highest_chance_creation_passing_score, chancecreationpassingclass FROM team JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team.team_long_name = 'Ajax';
SELECT preferred_foot FROM player JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = 'Abdou Diallo';
SELECT MAX(overall_rating) FROM player_attributes JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.player_name = 'Dorlan Pabon';
SELECT AVG(away_team_goal) FROM match JOIN team ON match.away_team_api_id = team.team_api_id JOIN country ON match.country_id = country.id WHERE team_long_name = 'Parma' AND country.name = 'Italy';
SELECT player.player_name FROM player JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_attributes.overall_rating = 77 AND player_attributes.date = '2016-06-23' ORDER BY player.birthday ASC LIMIT 1;
SELECT overall_rating FROM player_attributes WHERE player_api_id = (SELECT player_api_id FROM player WHERE player_name = 'Aaron Mooy') AND date = '2016-02-04 00:00:00';
SELECT pa.potential FROM player AS p JOIN player_attributes AS pa ON p.player_api_id = pa.player_api_id WHERE p.player_name = 'Francesco Parravicini' AND pa.date = '2010-08-30 00:00:00';
SELECT player_attributes.attacking_work_rate FROM player JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = 'Francesco Migliore' AND player_attributes.date = '2015-05-01 00:00:00';
SELECT player_attributes.defensive_work_rate FROM player JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = 'Kevin Berigaud';
SELECT MIN(date) FROM player_attributes WHERE player_api_id = (SELECT player_api_id FROM player WHERE player_name = 'Kevin Constant') AND crossing = (SELECT MAX(crossing) FROM player_attributes WHERE player_api_id = (SELECT player_api_id FROM player WHERE player_name = 'Kevin Constant'));
SELECT buildupplayspeedclass FROM team_attributes JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team_long_name = 'Willem II' AND date = '2012-02-22 00:00:00';
SELECT buildupplaydribblingclass FROM team_attributes WHERE team_api_id = (SELECT team_api_id FROM team WHERE team_short_name = 'LEI') AND date = '2015-09-10 00:00:00';
SELECT buildupplaypassingclass FROM team_attributes JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team.team_long_name = 'FC Lorient' AND team_attributes.date = '2010-02-22';
SELECT chancecreationpassingclass FROM team_attributes WHERE team_api_id = (SELECT team_api_id FROM team WHERE team_long_name = 'PEC Zwolle') AND date = '2013-09-20 00:00:00';
SELECT chancecreationcrossingclass FROM team_attributes JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team.team_long_name = 'Hull City' AND team_attributes.date = '2010-02-22 00:00:00';
SELECT defenceaggressionclass FROM team_attributes WHERE team_api_id = (SELECT team_api_id FROM team WHERE team_long_name = 'Hannover 96') AND date = '2015-09-10 00:00:00';
SELECT avg(overall_rating) as average_rating FROM player_attributes JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player_name = 'Marko Arnautovic' AND date BETWEEN '2007-02-22 00:00:00' AND '2016-04-21 00:00:00';
SELECT round(((pa1.overall_rating - pa2.overall_rating) / pa2.overall_rating)*100, 2) as rating_difference_percentage FROM player_attributes pa1 JOIN player p1 ON pa1.player_api_id = p1.player_api_id JOIN player_attributes pa2 ON pa2.player_api_id = p2.player_api_id JOIN player p2 ON pa2.player_api_id = p2.player_api_id WHERE p1.player_name = 'Landon Donovan' AND p2.player_name = 'Jordan Bowery' AND pa1.date = '2013-07-12' AND pa2.date = '2013-07-12';
SELECT player_name FROM player ORDER BY height DESC LIMIT 5;
SELECT player_api_id FROM player ORDER BY weight DESC LIMIT 10;
SELECT player.player_name FROM player WHERE strftime('%Y', 'now') - strftime('%Y', player.birthday) - (strftime('%m-%d', 'now') < strftime('%m-%d', player.birthday)) >= 35;
SELECT home_team_goal FROM match JOIN player ON match.home_player_1 = player.player_api_id WHERE player_name = 'Aaron Lennon';
SELECT player.player_name, sum(match.away_team_goal) as total_away_goals FROM player INNER JOIN match ON match.away_player_11 = player.player_api_id OR match.away_player_10 = player.player_api_id OR match.away_player_9 = player.player_api_id OR match.away_player_8 = player.player_api_id OR match.away_player_7 = player.player_api_id OR match.away_player_6 = player.player_api_id OR match.away_player_5 = player.player_api_id OR match.away_player_4 = player.player_api_id OR match.away_player_3 = player.player_api_id OR match.away_player_2 = player.player_api_id OR match.away_player_1 = player.player_api_id WHERE player.player_name = 'Daan Smith' OR player.player_name = 'Filipe Ferreira' GROUP BY player.player_name;
SELECT SUM(home_team_goal) FROM match JOIN player ON match.home_player_1 = player.player_api_id AND (julianday('now') - julianday(player.birthday)) / 365 < 31;
SELECT MAX(player_name) FROM player;
SELECT player.player_name FROM player JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE potential = (SELECT MAX(potential) FROM player_attributes);
SELECT player.player_name FROM player JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id JOIN match ON player.player_api_id IN (match.home_player_x1, match.home_player_x2, match.home_player_x3, match.home_player_x4, match.away_player_11, match.away_player_10, match.away_player_9, match.away_player_8, match.away_player_7, match.away_player_6, match.away_player_5, match.away_player_4, match.away_player_3, match.away_player_2, match.away_player_1, match.home_player_11, match.home_player_10, match.home_player_9, match.home_player_8, match.home_player_7, match.home_player_6, match.home_player_5, match.home_player_4, match.home_player_3, match.home_player_2, match.home_player_1) WHERE player_attributes.attacking_work_rate = 'high';
SELECT player.player_name FROM player JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_attributes.finishing = 1 ORDER BY (CAST(STRFTIME('%Y.%m%d', 'now') - STRFTIME('%Y.%m%d', player.birthday) AS INT)) DESC LIMIT 1;
SELECT player.player_name FROM player JOIN country ON player.player_name = country.name WHERE country.name = 'Belgium';
SELECT player.player_name, country.name FROM player JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id JOIN country ON player.id = country.id WHERE player_attributes.vision > 89;
SELECT country.name FROM player JOIN match ON match.away_player_11 = player.player_api_id JOIN country ON match.country_id = country.id GROUP BY country.name ORDER BY AVG(weight) DESC LIMIT 1;
SELECT team.team_long_name FROM team JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team_attributes.buildupplayspeedclass = 'Slow';
SELECT team.team_short_name FROM team JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team_attributes.chancecreationpassingclass = 'Safe';
SELECT AVG(player.height) AS avg_height FROM player JOIN country ON player.player_api_id = country.id WHERE country.name = 'Italy';
SELECT player_name FROM player WHERE height > 180 ORDER BY player_name LIMIT 3;
SELECT COUNT(*) FROM player WHERE player_name LIKE 'Aaron%' AND birthday > '1990-01-01';
SELECT player_attributes.jumping AS player_6_jumping, (player_attributes.jumping - player_attributes.jumping) AS player_23_jumping_difference FROM player_attributes WHERE player_api_id = 6 UNION SELECT player_attributes.jumping AS player_6_jumping, (player_attributes.jumping - player_attributes.jumping) AS player_23_jumping_difference FROM player_attributes WHERE player_api_id = 23;
SELECT player_attributes.player_api_id FROM player_attributes WHERE preferred_foot = 'right' ORDER BY potential LIMIT 3;
SELECT player.player_name FROM player_attributes JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE crossing = (SELECT MAX(crossing) FROM player_attributes) AND preferred_foot = 'left';
SELECT COUNT(*) * 100.0 / (SELECT COUNT(*) FROM player_attributes WHERE stamina > 80 AND strength > 80) FROM player_attributes WHERE stamina > 80 AND strength > 80;
SELECT country.name FROM country JOIN league ON league.country_id = country.id WHERE league.name = "Poland Ekstraklasa";
SELECT home_team_goal, away_team_goal FROM match WHERE date LIKE '2008-09-24%' AND league_id = 'Belgium Jupiler League';
SELECT sprint_speed, agility, acceleration FROM player_attributes WHERE player_api_id = (SELECT player_api_id FROM player WHERE player_name = 'Alexis Blin');
SELECT team_long_name, buildupplayspeedclass FROM team JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team_long_name = 'KSV Cercle Brugge';
SELECT COUNT(*) FROM match JOIN league ON match.league_id = league.id JOIN country ON league.country_id = country.id JOIN team ON match.home_team_api_id = team.team_api_id WHERE season = '2015/2016' AND league.name = 'Italian Serie A';
SELECT MAX(home_team_goal) FROM match JOIN league ON match.league_id = league.country_id WHERE league.name = 'Netherlands Eredivisie';
SELECT player.player_name, player_attributes.finishing, player_attributes.curve FROM player JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.weight = (SELECT MAX(weight) FROM player);
SELECT league.name, COUNT(match.id) as game_count FROM match JOIN league ON match.league_id = league.id WHERE match.season = '2015/2016' GROUP BY match.league_id ORDER BY game_count DESC LIMIT 1;
SELECT team.team_long_name FROM team JOIN match ON match.away_team_api_id = team.team_api_id WHERE away_team_goal = (SELECT MAX(away_team_goal) FROM match);
SELECT player.player_name FROM player JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE overall_rating = (SELECT MAX(overall_rating) FROM player_attributes);
SELECT COUNT(*) * 100.0 / COUNT(*) FROM player WHERE height < 180 AND player_api_id IN (SELECT player_api_id FROM player_attributes WHERE overall_rating > 70);
SELECT COUNT(CASE WHEN sex = 'M' AND admission = '+' THEN id ELSE NULL END) - COUNT(CASE WHEN sex = 'M' AND admission = '-' THEN id ELSE NULL END) AS deviation_percentage FROM patient;
SELECT COUNT(id) * 100.0 / (SELECT COUNT(id) FROM patient WHERE sex = 'F') FROM patient WHERE sex = 'F' AND strftime('%Y', birthday) > '1930';
SELECT COUNT(*) * 100.0 / (SELECT COUNT(*) FROM patient WHERE birthday BETWEEN '1930-01-01' AND '1940-12-31') AS percent_inpatient FROM patient WHERE birthday BETWEEN '1930-01-01' AND '1940-12-31' AND admission = '+';
SELECT COUNT(CASE WHEN admission = '+' THEN id END) * 1.0 / COUNT(CASE WHEN admission = '-' THEN id END) AS "Outpatient to Inpatient Ratio" FROM patient WHERE diagnosis = 'SLE';
SELECT diagnosis FROM patient WHERE id = '30609';
SELECT sex, birthday, `examination date`, symptoms FROM patient JOIN examination ON patient.id = examination.id WHERE patient.id = '163109';
SELECT laboratory.id, patient.sex, patient.birthday FROM laboratory JOIN patient ON laboratory.id = patient.id WHERE laboratory.ldh > 500;
SELECT patient.id, (strftime('%Y', 'now') - strftime('%Y', birthday)) as age FROM patient INNER JOIN examination ON patient.id = examination.id WHERE rvvt = '+';
SELECT id, sex, diagnosis FROM patient WHERE id IN (SELECT id FROM examination WHERE thrombosis = 2);
SELECT patient.id FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE strftime('%Y', birthday) = '1937' AND laboratory."t-cho" >= 250;
SELECT id, sex, diagnosis FROM patient WHERE id IN (SELECT id FROM laboratory WHERE alb < 3.5);
SELECT COUNT(DISTINCT patient.id) * 100.0 / (SELECT COUNT(*) FROM patient WHERE sex = 'F' ) AS percentage FROM laboratory JOIN patient ON laboratory.id = patient.id WHERE sex = 'F' AND (tp < 6.0 OR tp > 8.5);
SELECT AVG(igG) as average_igG_concentration FROM laboratory JOIN patient ON laboratory.id = patient.id WHERE admission = '+' AND (strftime('%Y', 'now') - strftime('%Y', birthday)) >= 50;
SELECT COUNT(*) FROM patient WHERE sex = 'F' AND admission = '-' AND strftime('%Y', description) = '1997';
SELECT MIN( strftime('%Y', `first date`) - strftime('%Y', birthday)) AS age FROM patient;
SELECT COUNT(patient.id) FROM examination JOIN patient ON examination.id = patient.id WHERE examination.`examination date` LIKE '1997%' AND examination.thrombosis = '1' AND patient.sex = 'F';
SELECT MAX(strftime('%Y', birthday)) - MIN(strftime('%Y', birthday)) AS age_gap FROM patient WHERE id IN (SELECT id FROM laboratory WHERE tg >= 200) AND diagnosis = 'Normal';
SELECT examination.symptoms, examination.diagnosis FROM examination JOIN patient ON examination.id = patient.id WHERE patient.birthday = (SELECT MIN(birthday) FROM patient);
SELECT COUNT(id)/12 as avg_male_tested_per_month FROM patient WHERE sex = 'M' AND id IN (SELECT id FROM laboratory WHERE date BETWEEN '1998-01-01' AND '1998-12-31');
SELECT MAX(laboratory.date) AS "Latest Lab Completion Date", (CAST(strftime('%Y', "first date") as integer) - CAST(strftime('%Y', birthday) as integer)) AS "Age at Hospital Admission" FROM patient JOIN laboratory ON patient.id = laboratory.id WHERE diagnosis = 'SJS' ORDER BY birthday ASC LIMIT 1;
SELECT SUM(CASE WHEN sex = 'M' AND ua <= 8.0 THEN 1 ELSE 0 END) * 1.0 / SUM(CASE WHEN sex = 'F' AND ua <= 6.5 THEN 1 ELSE 0 END) AS ratio_male_to_female FROM patient JOIN laboratory ON patient.id = laboratory.id;
SELECT COUNT(*) FROM patient WHERE id NOT IN (SELECT id FROM examination WHERE (strftime('%Y', `examination date`) - strftime('%Y', `first date`)) >= 1);
SELECT count(*) FROM patient JOIN examination ON patient.id = examination.id WHERE strftime('%Y', birthday) > strftime('%Y', '1993-12-31', '-18 years') AND "examination date" BETWEEN '1990-01-01' AND '1993-12-31';
SELECT COUNT(*) FROM patient JOIN laboratory ON patient.id = laboratory.id WHERE sex = 'M' AND "T-BIL" > 2.0;
SELECT diagnosis FROM examination WHERE `examination date` BETWEEN '1985-01-01' AND '1995-12-31' GROUP BY diagnosis ORDER BY COUNT(diagnosis) DESC LIMIT 1;
SELECT AVG(strftime('%Y', 'now') - strftime('%Y', birthday) - (strftime('%m-%d', 'now') < strftime('%m-%d', birthday))) AS average_age FROM patient WHERE id IN (SELECT id FROM examination WHERE strftime('%Y-%m-%d', "examination date") BETWEEN '1991-10-01' AND '1991-10-30');
SELECT MAX(l.hgb) as highest_hgb, (strftime('%Y', e."examination date") - strftime('%Y', p.birthday)) as patient_age, e.diagnosis as doctor_diagnosis FROM laboratory l JOIN examination e ON l.id = e.id JOIN patient p ON l.id = p.id;
SELECT ana FROM examination WHERE id = 3605340 AND `examination date` = '1996-12-02';
SELECT laboratory.`t-cho` FROM laboratory WHERE id = 2927464 AND date = '1995-9-4' AND `t-cho` < 250;
SELECT sex FROM patient WHERE diagnosis = 'AORTITIS' ORDER BY "first date" LIMIT 1;
SELECT examination.`acl igm` FROM patient JOIN examination ON patient.id = examination.id WHERE patient.diagnosis = 'SLE' AND patient.description = '1994-02-19';
SELECT sex FROM patient WHERE id IN (SELECT id FROM laboratory WHERE gpt = '9' AND date = '1992-06-12');
SELECT birthday, (CAST(strftime('%Y', '1991-10-21') AS INTEGER) - CAST(strftime('%Y', birthday) AS INTEGER)) AS age_at_lab_test FROM patient JOIN laboratory ON patient.id = laboratory.id WHERE ua = '8.4' AND date = '1991-10-21';
SELECT COUNT(id) FROM laboratory WHERE id IN (SELECT id FROM patient WHERE "first date" = '1991-06-13' AND diagnosis = 'SJS') AND date LIKE '1995%';
SELECT diagnosis FROM patient WHERE "first date" = '1997-01-27' AND diagnosis = 'SLE';
SELECT symptoms FROM examination WHERE id = (SELECT id FROM patient WHERE birthday = '1959-03-01') AND "examination date" = '1993-09-27';
SELECT SUM(CASE WHEN date LIKE '1981-11-%' THEN `t-cho` ELSE 0 END) - SUM(CASE WHEN date LIKE '1981-12-%' THEN `t-cho` ELSE 0 END) AS decrease_rate FROM laboratory WHERE id = (SELECT id FROM patient WHERE birthday = '1959-02-18');
SELECT patient.id FROM patient JOIN examination ON patient.id = examination.id WHERE patient.diagnosis = 'BEHCET' AND examination.`examination date` BETWEEN '1997-01-01' AND '1997-12-31';
SELECT patient.id FROM patient JOIN examination ON patient.id = examination.id JOIN laboratory ON patient.id = laboratory.id WHERE examination.`examination date` BETWEEN '1987-07-06' AND '1996-01-31' AND laboratory.gpt > 30 AND laboratory.alb < 4;
SELECT COUNT(id) FROM patient WHERE sex = 'F' AND strftime('%Y', birthday) = '1964' AND admission = '+';
SELECT COUNT(DISTINCT patient.id) FROM patient JOIN examination ON patient.id = examination.id JOIN laboratory ON patient.id = laboratory.id WHERE examination.diagnosis = 'thrombosis' AND examination.ana = 'S' AND laboratory.igm > (SELECT AVG(igm) * 1.2 FROM laboratory)
SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM laboratory WHERE `ua` <= 6.5 AND `u-pro` > 0 AND `u-pro` < 30)) FROM laboratory WHERE `ua` <= 6.5 AND `u-pro` > 0 AND `u-pro` < 30;
SELECT COUNT(*) * 100.0 / (SELECT COUNT(*) FROM patient WHERE sex = 'M' AND strftime('%Y', `first date`) = '1981') FROM patient WHERE sex = 'M' AND strftime('%Y', `first date`) = '1981' AND diagnosis = 'BEHCET';
SELECT id FROM patient WHERE admission = '-' AND id IN (SELECT id FROM laboratory WHERE date LIKE '1991-10%' AND "t-bil" < 2.0);
SELECT COUNT(*) FROM patient JOIN examination ON patient.id = examination.id JOIN laboratory ON patient.id = laboratory.id WHERE examination.`ana pattern` != 'P' AND patient.sex = 'F' AND patient.birthday BETWEEN '1980-01-01' AND '1989-12-31';
SELECT sex FROM patient WHERE id IN ( SELECT id FROM examination WHERE diagnosis = 'PSS' INTERSECT SELECT id FROM laboratory WHERE cre = 1 AND ldh = 123 );
SELECT AVG(alb) FROM laboratory WHERE id IN (SELECT id FROM patient WHERE sex = 'F' AND diagnosis = 'SLE') AND plt > 400;
SELECT MAX(symptoms) AS most_common_sign FROM examination WHERE diagnosis = 'SLE';
SELECT "first date", diagnosis FROM patient WHERE id = 48473;
SELECT COUNT(DISTINCT id) FROM patient WHERE sex = 'F' AND diagnosis = 'APS';
SELECT count(distinct patient.id) FROM laboratory JOIN patient ON laboratory.id = patient.id WHERE DATE(date) LIKE '1997%' AND tp NOT BETWEEN 6 AND 8.5;
SELECT SUM(CASE WHEN examination.diagnosis = 'SLE' THEN 1 ELSE 0 END) * 100.0 / NULLIF(SUM(CASE WHEN examination.symptoms = 'thrombocytopenia' THEN 1 ELSE 0 END), 0) AS proportion_diagnosed_with_SLE FROM examination WHERE examination.symptoms = 'thrombocytopenia';
SELECT 100 * SUM(CASE WHEN sex = 'F' THEN 1 ELSE 0 END) / COUNT(*) as percentage FROM patient WHERE strftime('%Y', birthday) = '1980' AND diagnosis = 'RA';
SELECT COUNT(*) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE patient.sex = 'M' AND examination.`examination date` BETWEEN '1995-01-01' AND '1997-12-31' AND patient.admission = '-' AND patient.diagnosis = 'BEHCET';
SELECT COUNT(DISTINCT patient.id) FROM patient JOIN laboratory ON patient.id = laboratory.id WHERE patient.sex = 'F' AND laboratory.wbc < 3.5;
SELECT strftime('%s', examination.`examination date`) - strftime('%s', patient.`first date`) AS days_between FROM patient JOIN examination ON patient.id = examination.id WHERE patient.id = 821298;
SELECT ua FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.id = 57266 AND (patient.sex = 'M' AND laboratory.ua > 8.0 OR patient.sex = 'F' AND laboratory.ua > 6.5);
SELECT laboratory.date FROM laboratory WHERE laboratory.got >= 60 AND laboratory.id = '48473';
SELECT patient.sex, patient.birthday FROM patient JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.got < 60 AND strftime('%Y', laboratory.date) = '1994';
SELECT id FROM patient WHERE sex = 'M' AND id IN (SELECT id FROM laboratory WHERE gpt >= 60);
SELECT patient.diagnosis FROM patient JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.gpt > 60 ORDER BY patient.birthday ASC;
SELECT AVG(ldh) FROM laboratory WHERE ldh < 500;
SELECT patient.id, (strftime('%Y', 'now') - strftime('%Y', birthday)) AS age FROM patient JOIN laboratory ON patient.id = laboratory.id WHERE ldh BETWEEN 600 AND 800;
SELECT patient.admission FROM patient JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.alp < 300
SELECT id FROM patient WHERE birthday = '1982-04-01';
SELECT id, sex, birthday FROM patient WHERE id IN (SELECT id FROM laboratory WHERE tp < 6.0);
SELECT id, tp - 8.5 AS tp_deviation FROM laboratory WHERE id IN (SELECT id FROM patient WHERE sex = 'F') AND tp > 8.5;
SELECT patient.id, patient.sex, patient.birthday FROM patient JOIN laboratory ON patient.id = laboratory.id WHERE patient.sex = 'M' AND (laboratory.alb <= 3.5 OR laboratory.alb >= 5.5) ORDER BY patient.birthday DESC;
SELECT alb FROM patient JOIN laboratory ON patient.id = laboratory.id WHERE strftime("%Y", birthday) = '1982' AND alb BETWEEN 3.5 AND 5.5;
SELECT COUNT(*) * 100.0 / (SELECT COUNT(*) FROM patient WHERE sex = 'F') FROM laboratory JOIN patient ON laboratory.id = patient.id WHERE (sex = 'F' AND (ua > 6.5 AND sex = 'F') OR (ua > 8.0 AND sex = 'M'));
SELECT avg(ua) as avg_ua FROM ( SELECT id, ua, date, ROW_NUMBER() OVER(PARTITION BY id ORDER BY date DESC) AS rn FROM laboratory ) sub JOIN patient ON sub.id = patient.id WHERE rn = 1 AND (sex = 'M' AND ua < 8.0 OR sex = 'F' AND ua < 6.5);
SELECT laboratory.id, sex, birthday FROM patient JOIN laboratory ON patient.id = laboratory.id WHERE ua = 29;
SELECT id, sex, birthday FROM patient WHERE diagnosis = 'RA' AND id IN (SELECT id FROM laboratory WHERE un < 30);
SELECT COUNT(*) FROM patient JOIN laboratory ON patient.id = laboratory.id WHERE sex = 'M' AND cre >= 1.5;
SELECT (SUM(CASE WHEN sex = 'M' AND cre >= 1.5 THEN 1 ELSE 0 END) > SUM(CASE WHEN sex = 'F' AND cre >= 1.5 THEN 1 ELSE 0 END)) as result FROM patient JOIN laboratory ON patient.id = laboratory.id;
SELECT MAX(`t-bil`) AS max_bilirubin, patient.id, patient.sex, patient.birthday FROM laboratory JOIN patient ON laboratory.id = patient.id WHERE `t-bil` = (SELECT MAX(`t-bil`) FROM laboratory);
SELECT sex, count(*) FROM patient JOIN laboratory ON patient.id = laboratory.id WHERE "t-bil" >= 2.0 GROUP BY sex;
SELECT MIN(patient.birthday) as oldest_birthday, laboratory.id, MAX(laboratory."T-CHO") as highest_T_CHO FROM patient JOIN laboratory ON patient.id = laboratory.id GROUP BY laboratory.id ORDER BY oldest_birthday ASC, highest_T_CHO DESC LIMIT 1;
SELECT AVG(STRFTIME('%Y', 'now') - STRFTIME('%Y', birthday)) AS average_age FROM patient WHERE sex = 'M' AND id IN (SELECT id FROM laboratory WHERE "T-CHO" >= 250);
SELECT patient.id, patient.diagnosis FROM patient JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.tg > 300;
SELECT COUNT(*) FROM patient JOIN laboratory ON patient.id = laboratory.id WHERE tg >= 200 AND (strftime('%Y', 'now') - strftime('%Y', birthday)) > 50;
SELECT DISTINCT patient.id FROM patient WHERE admission = '-' AND patient.id IN (SELECT id FROM laboratory WHERE cpk < 250);
SELECT count(*) FROM patient p JOIN laboratory l ON p.id = l.id WHERE p.birthday BETWEEN '1936' AND '1956' AND p.sex = 'M' AND l.cpk >= 250;
SELECT id, sex, (strftime('%Y', 'now') - strftime('%Y', birthday)) AS age FROM patient WHERE id IN (SELECT id FROM laboratory WHERE glu >= 180 AND `t-cho` < 250)
SELECT patient.id, laboratory.glu FROM patient JOIN laboratory ON patient.id = laboratory.id WHERE strftime('%Y', "first date") >= '1991' AND laboratory.glu < 180;
SELECT patient.id, patient.sex, patient.birthday FROM patient JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.WBC <= 3.5 OR laboratory.WBC >= 9.0 GROUP BY patient.sex ORDER BY patient.birthday ASC;
SELECT patient.id, (CAST(STRFTIME('%Y', 'now') AS INTEGER) - CAST(STRFTIME('%Y', patient.birthday) AS INTEGER)) AS age, patient.diagnosis FROM patient JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.rbc < 3.5;
SELECT patient.admission FROM patient JOIN laboratory ON patient.id = laboratory.id WHERE patient.sex = 'F' AND (CAST(strftime('%Y', 'now') - strftime('%Y', patient.birthday) AS INTEGER) >= 50) AND (laboratory.rbc <= 3.5 OR laboratory.rbc >= 6.0);
SELECT id, sex FROM patient WHERE admission = '-' AND id IN (SELECT id FROM laboratory WHERE hgb < 10);
SELECT id, sex FROM patient WHERE diagnosis = 'SLE' AND birthday = (SELECT MIN(birthday) FROM patient WHERE diagnosis = 'SLE') AND id IN (SELECT id FROM laboratory WHERE hgb > 10 AND hgb < 17);
SELECT id, (strftime('%Y', 'now') - strftime('%Y', birthday)) AS age FROM patient WHERE id IN ( SELECT id FROM laboratory WHERE hct >= 52 GROUP BY id HAVING COUNT(id) > 2 );
SELECT AVG(hct) FROM laboratory WHERE date LIKE '1991%' AND hct < 29;
SELECT COUNT(CASE WHEN plt < 100 THEN 1 ELSE NULL END) - COUNT(CASE WHEN plt > 400 THEN 1 ELSE NULL END) as platelet_level_comparison FROM laboratory;
SELECT patient.id FROM laboratory JOIN patient ON laboratory.id = patient.id WHERE date LIKE '1984%' AND (strftime('%Y', 'now') - strftime('%Y', patient.birthday)) < 50 AND plt BETWEEN 100 AND 400;
SELECT (SUM(CASE WHEN PT >= 14 AND sex = 'F' THEN 1 ELSE 0 END) * 1.0 / SUM(CASE WHEN birthday < date('now', '-55 years') THEN 1 ELSE 0 END)) * 100 as percentage_female_abnormal_PT FROM patient JOIN laboratory ON patient.id = laboratory.id;
SELECT patient.id, patient.`first date`, patient.diagnosis, patient.sex FROM patient INNER JOIN laboratory ON patient.id = laboratory.id INNER JOIN examination ON patient.id = examination.id WHERE strftime('%Y', `first date`) > '1992' AND laboratory.pt < 14 AND examination.diagnosis = 'Normal';
SELECT COUNT(*) FROM examination JOIN laboratory ON examination.id = laboratory.id JOIN patient ON examination.id = patient.id WHERE `examination date` > '1997-01-01' AND `aptt` < 45;
SELECT COUNT(DISTINCT patient.id) FROM patient JOIN laboratory ON patient.id = laboratory.id JOIN examination ON patient.id = examination.id WHERE laboratory.aptt > 45 AND examination.thrombosis = 3;
SELECT COUNT(DISTINCT p.id) FROM patient p JOIN laboratory l ON p.id = l.id JOIN examination e ON p.id = e.id WHERE p.sex = 'M' AND l.fg <= 150 OR l.fg >= 450 AND l.wbc BETWEEN 3.5 AND 9.0 AND e.diagnosis = 'Normal';
SELECT COUNT(DISTINCT patient.id) FROM patient JOIN laboratory ON patient.id = laboratory.id WHERE birthday > '1980-01-01' AND (fg < 150 OR fg > 450);
SELECT diagnosis FROM patient WHERE id IN (SELECT id FROM laboratory WHERE `u-pro` >= 30);
SELECT patient.id FROM patient JOIN laboratory ON patient.id = laboratory.id JOIN examination ON patient.id = examination.id WHERE laboratory."u-pro" > 0 AND laboratory."u-pro" < 30 AND patient.diagnosis = 'SLE' AND examination.diagnosis = 'SLE';
SELECT COUNT(*) FROM laboratory l JOIN patient p ON l.id = p.id JOIN examination e ON e.id = p.id WHERE l.igg < 900 AND e.symptoms = 'abortion';
SELECT COUNT(*) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id INNER JOIN examination ON patient.id = examination.id WHERE laboratory.igg BETWEEN 900 AND 2000 AND examination.symptoms IS NOT NULL;
SELECT diagnosis FROM patient JOIN laboratory ON patient.id = laboratory.id WHERE iga BETWEEN 80 AND 500 ORDER BY iga DESC LIMIT 1;
SELECT COUNT(DISTINCT patient.id) FROM patient JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.iga BETWEEN 80 AND 500 AND strftime('%Y', `first date`) >= '1990';
SELECT diagnosis FROM patient WHERE id IN (SELECT id FROM laboratory WHERE igm NOT BETWEEN 40 AND 400) GROUP BY diagnosis ORDER BY COUNT(diagnosis) DESC LIMIT 1;
SELECT COUNT(DISTINCT patient.id) FROM patient LEFT JOIN laboratory ON patient.id = laboratory.id LEFT JOIN examination ON patient.id = examination.id WHERE (crp LIKE '+' OR crp LIKE '-' OR crp < 1.0) AND (description IS NULL);
SELECT COUNT(DISTINCT patient.id) FROM laboratory JOIN patient ON laboratory.id = patient.id WHERE CRP NOT IN ('+-', '-') AND CRP >= 1.0 AND (strftime('%Y', 'now') - strftime('%Y', patient.birthday)) < 18;
SELECT COUNT(DISTINCT patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id INNER JOIN laboratory ON patient.id = laboratory.id WHERE examination.diagnosis = 'Normal' AND patient.diagnosis = 'RA' AND examination.kct = '+';
SELECT diagnosis FROM patient WHERE birthday >= '1995-01-01' AND diagnosis = 'Normal';
SELECT laboratory.id FROM patient JOIN laboratory ON patient.id = laboratory.id WHERE RF < 20 AND (strftime('%Y', 'now') - strftime('%Y', birthday)) > 60;
SELECT COUNT(*) FROM laboratory WHERE rf < 20 AND id NOT IN (SELECT id FROM examination WHERE thrombosis = '1');
SELECT COUNT(DISTINCT patient.id) FROM patient JOIN laboratory ON patient.id = laboratory.id JOIN examination ON patient.id = examination.id WHERE laboratory.c3 > 35 AND examination.`ana pattern` = 'P';
SELECT MAX(id) FROM examination WHERE id IN (SELECT id FROM laboratory WHERE hct < 29 OR hct > 52);
SELECT patient.id FROM patient JOIN examination ON patient.id = examination.id JOIN laboratory ON patient.id = laboratory.id WHERE examination.thrombosis = 'Blood Clots in veins' AND (examination.diagnosis = 'Normal' OR (examination.diagnosis = 'APS' AND laboratory.c4 > 10)) GROUP BY patient.id;
SELECT COUNT(DISTINCT patient.id) FROM examination INNER JOIN patient ON examination.id = patient.id INNER JOIN laboratory ON laboratory.id = patient.id WHERE examination.diagnosis IN ('Normal') AND (laboratory.rnp = '-' OR laboratory.rnp = '+-') AND patient.admission = '+';
SELECT MIN(birthday) as date_of_birth FROM patient WHERE id IN (SELECT id FROM laboratory WHERE rnp NOT IN ('-', '+-'));
SELECT COUNT(*) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id INNER JOIN examination ON patient.id = examination.id WHERE sm = 'negative' AND thrombosis = '1';
SELECT id FROM patient WHERE id IN (SELECT id FROM laboratory WHERE sm NOT IN ('-', '+-')) ORDER BY birthday DESC LIMIT 3;
SELECT id FROM patient WHERE "examination date" > '1997-01-01' AND "sc170" IN ('-', '+-');
SELECT count(distinct patient.id) FROM patient JOIN examination ON patient.id = examination.id JOIN laboratory ON patient.id = laboratory.id WHERE sex = 'M' AND examination.diagnosis = 'Normal' AND laboratory.SC170 IN ('-', '+-') AND examination.symptoms = 'vertigo';
SELECT COUNT(DISTINCT patient.id) FROM patient JOIN examination ON patient.id = examination.id JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.ssa IN ('-', '+-') AND strftime('%Y', patient.`first date`) < '1990';
SELECT id FROM laboratory WHERE ssa NOT IN ('-', '+-') ORDER BY date LIMIT 1;
SELECT count(DISTINCT patient.id) FROM patient JOIN laboratory ON patient.id = laboratory.id JOIN examination ON patient.id = examination.id WHERE laboratory.ssb IN ('negative', '0') AND examination.diagnosis = 'SLE';
SELECT COUNT(DISTINCT patient.id) FROM patient JOIN laboratory ON laboratory.id = patient.id JOIN examination ON examination.id = patient.id WHERE laboratory.ssb IN ('-', '+-') AND examination.symptoms IS NOT NULL;
SELECT COUNT(*) FROM patient WHERE id IN (SELECT id FROM laboratory WHERE centromea IN ('-', '+-') AND ssb IN ('-', '+-')) AND sex = 'M';
SELECT diagnosis FROM patient WHERE id IN (SELECT id FROM laboratory WHERE dna >= 8);
SELECT COUNT(DISTINCT patient.id) FROM patient LEFT JOIN laboratory ON patient.id = laboratory.id LEFT JOIN examination ON patient.id = examination.id WHERE laboratory.dna < 8 AND patient.description IS NULL;
SELECT COUNT(*) FROM patient WHERE id IN (SELECT id FROM laboratory WHERE `dna-ii` > 8) AND admission = '+';
SELECT COUNT(id) * 100.0 / (SELECT COUNT(id) FROM laboratory WHERE got >= 60 AND id IN (SELECT id FROM patient WHERE diagnosis = 'SLE')) FROM laboratory WHERE got >= 60 AND id IN (SELECT id FROM patient WHERE diagnosis = 'SLE');
SELECT COUNT(*) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE sex = 'M' AND got < 60;
SELECT MIN(birthday) FROM patient WHERE id IN (SELECT id FROM laboratory WHERE got >= 60);
SELECT MAX(birthday) FROM patient WHERE id IN (SELECT id FROM laboratory WHERE gpt < 60) LIMIT 3;
SELECT count(*) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE sex = 'M' AND got < 60;
SELECT MIN(`first date`) FROM patient WHERE `id` IN (SELECT `id` FROM laboratory WHERE `ldh` < 500);
SELECT MAX("First Date") AS "Latest Medical Data Recorded" FROM patient WHERE "id" IN (SELECT "id" FROM laboratory WHERE "ldh" >= 500);
SELECT COUNT(*) FROM patient WHERE admission = '+' AND id IN (SELECT id FROM laboratory WHERE alp >= 300);
SELECT COUNT(*) FROM patient LEFT JOIN laboratory ON patient.id = laboratory.id WHERE admission = '-' AND alp < 300;
SELECT diagnosis FROM patient WHERE id IN (SELECT id FROM laboratory WHERE tp < 6.0);
SELECT COUNT(*) FROM patient JOIN laboratory ON patient.id = laboratory.id WHERE diagnosis = 'SJS' AND tp > 6.0 AND tp < 8.5;
SELECT MAX(`examination date`) FROM examination WHERE `id` IN (SELECT `id` FROM laboratory WHERE `alb` > 3.5 AND `alb` < 5.5);
SELECT COUNT(*) FROM patient WHERE sex = 'M' AND id IN (SELECT id FROM laboratory WHERE (alb > 3.5 AND alb < 5.5) AND (tp > 6.0 AND tp < 8.5));
SELECT examination."aCL IgG", examination."aCL IgM", examination."aCL IgA" FROM examination WHERE examination.id IN (SELECT patient.id FROM patient WHERE patient.sex = 'F') AND examination.id IN (SELECT laboratory.id FROM laboratory WHERE laboratory.ua <= 6.50);
SELECT MAX(ANA) FROM examination WHERE examination.id IN (SELECT id FROM laboratory WHERE cre < 1.5);
SELECT id FROM patient WHERE id IN ( 	SELECT id 	FROM laboratory 	WHERE cre < 1.5 ) AND id IN ( 	SELECT id 	FROM examination 	WHERE "acl igg" = (SELECT MAX("acl igg") FROM examination) );
SELECT COUNT(DISTINCT patient.id) FROM patient JOIN examination ON patient.id = examination.id JOIN laboratory ON patient.id = laboratory.id WHERE laboratory."t-bil" >= 2.0 AND examination."ana pattern" LIKE '%P%';
SELECT MAX(ana) FROM examination WHERE id IN (SELECT id FROM laboratory WHERE `T-BIL` < 2.0);
SELECT COUNT(*) FROM laboratory JOIN examination ON laboratory.id = examination.id WHERE `t-cho` >= 250 AND `kct` = '-';
SELECT COUNT(*) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id INNER JOIN examination ON patient.id = examination.id WHERE laboratory.`t-cho` < 250 AND examination.`ana pattern` = 'P';
SELECT count(*) FROM patient JOIN laboratory ON patient.id = laboratory.id LEFT JOIN examination ON patient.id = examination.id WHERE laboratory.tg < 200 AND examination.symptoms IS NOT NULL;
SELECT diagnosis FROM patient WHERE id = (SELECT id FROM laboratory WHERE tg < 200 ORDER BY tg DESC LIMIT 1);
SELECT patient.id FROM patient WHERE diagnosis != 'thrombosis' AND EXISTS (SELECT 1 FROM laboratory WHERE laboratory.id = patient.id AND cpk > 250);
SELECT count(*) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id INNER JOIN examination ON patient.id = examination.id WHERE cpk < 250 AND (kct = '+' OR rvvt = '+' OR lac = '+');
SELECT MIN(birthday) as oldest_birthday FROM patient JOIN laboratory ON patient.id = laboratory.id WHERE glu > 180;
SELECT count(*) FROM patient WHERE id NOT IN (SELECT id FROM examination WHERE diagnosis = 'thrombosis') AND id IN (SELECT id FROM laboratory WHERE glu < 180);
SELECT COUNT(*) FROM patient JOIN laboratory ON patient.id = laboratory.id WHERE patient.admission = '+' and laboratory.wbc >= 3.5 and laboratory.wbc <= 9.0;
SELECT count(*) FROM patient WHERE diagnosis = 'SLE' AND id IN (SELECT id FROM laboratory WHERE wbc >= 3.5 AND wbc <= 9.0)
SELECT laboratory.id FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE (rbc <= 3.5 OR rbc >= 6.0) AND admission = '-';
SELECT COUNT(*) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id INNER JOIN examination ON patient.id = examination.id WHERE laboratory.plt > 100 AND laboratory.plt < 400 AND examination.diagnosis IS NOT NULL;
SELECT plt FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE diagnosis = 'MCTD' AND plt > 100 AND plt < 400;
SELECT avg(pt) FROM laboratory WHERE id IN (SELECT id FROM patient WHERE sex = 'M') AND pt < 14;
SELECT COUNT(DISTINCT patient.id) FROM patient JOIN examination ON patient.id = examination.id JOIN laboratory ON patient.id = laboratory.id WHERE (examination.thrombosis = 1 OR examination.thrombosis = 2) AND laboratory.pt < 14;
SELECT major.major_name FROM member JOIN major ON member.link_to_major = major.major_id WHERE member.first_name = 'Angela' AND member.last_name = 'Sanders';
SELECT COUNT(DISTINCT member.member_id) FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.college = 'College of Engineering';
SELECT `first_name`, `last_name` FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.department = 'Art and Design Department';
SELECT COUNT(DISTINCT member.member_id) FROM member JOIN attendance ON member.member_id = attendance.link_to_member JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = "Women's Soccer";
SELECT phone FROM member JOIN attendance ON member.member_id = attendance.link_to_member JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = "Women's Soccer";
SELECT COUNT(DISTINCT member.member_id) FROM member JOIN attendance ON member.member_id = attendance.link_to_member JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = "Women's Soccer" AND member.t_shirt_size = 'Medium';
SELECT event.event_name FROM event JOIN attendance ON event.event_id = attendance.link_to_event JOIN member ON attendance.link_to_member = member.member_id WHERE member.link_to_major = 'Student_Club' GROUP BY event.event_id ORDER BY COUNT(attendance.link_to_member) DESC LIMIT 1;
SELECT major.college FROM major JOIN member ON major.major_id = member.link_to_major WHERE member.position = 'Vice President';
SELECT event.event_name FROM member JOIN attendance ON member.member_id = attendance.link_to_member JOIN event ON attendance.link_to_event = event.event_id WHERE member.first_name = 'Maya' AND member.last_name = 'Mclean';
SELECT COUNT(DISTINCT event.event_id) FROM attendance JOIN member ON attendance.link_to_member = member.member_id JOIN event ON attendance.link_to_event = event.event_id WHERE member.first_name = 'Sacha' AND member.last_name = 'Harrison' AND event.type = 'Student_Club' AND strftime('%Y', event.event_date) = '2019';
SELECT event.event_id, event.event_name FROM event JOIN attendance ON event.event_id = attendance.link_to_event WHERE type = 'Meeting' GROUP BY event.event_id, event.event_name HAVING COUNT(attendance.link_to_member) > 10;
SELECT event_name FROM event WHERE event_id IN (SELECT link_to_event FROM attendance GROUP BY link_to_event HAVING COUNT(link_to_member) > 20)
SELECT AVG(1.0 * a.count_attendees / e.count_meetings) FROM (SELECT COUNT(*) AS count_attendees FROM attendance WHERE link_to_event IN (SELECT event_id FROM event WHERE type = 'Meeting' AND strftime('%Y', event_date) = '2020')) a, (SELECT COUNT(DISTINCT event_name) AS count_meetings FROM event WHERE type = 'Meeting' AND strftime('%Y', event_date) = '2020') e;
SELECT expense.expense_description FROM expense JOIN budget ON expense.link_to_budget = budget.budget_id JOIN event ON budget.link_to_event = event.event_id WHERE event.type = 'club' ORDER BY expense.cost DESC LIMIT 1;
SELECT count(*) FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Environmental Engineering';
SELECT first_name, last_name FROM member JOIN attendance ON member.member_id = attendance.link_to_member JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Laugh Out Loud';
SELECT last_name FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Law and Constitutional Studies';
SELECT county FROM member JOIN zip_code ON member.zip = zip_code.zip_code WHERE first_name = 'Sherri' AND last_name = 'Ramsey';
SELECT college FROM major WHERE major_id = (SELECT link_to_major FROM member WHERE first_name = 'Tyler' AND last_name = 'Hewitt');
SELECT amount FROM income JOIN member ON income.link_to_member = member.member_id WHERE position = 'Vice President';
SELECT SUM(e.cost) AS total_food_expense FROM expense e JOIN event ev ON e.link_to_budget = ev.event_id JOIN member m ON e.link_to_member = m.member_id JOIN budget b ON e.link_to_budget = b.budget_id WHERE m.position = 'Member' AND b.category = 'Food' AND ev.event_name = 'September Meeting';
SELECT city, state FROM member JOIN zip_code ON member.zip = zip_code.zip_code WHERE position = 'President';
SELECT `first_name`, `last_name` FROM member JOIN zip_code ON member.zip = zip_code.zip_code WHERE zip_code.state = 'Illinois';
SELECT Sum(spent) FROM budget JOIN event ON budget.link_to_event = event.event_id JOIN expense ON budget.budget_id = expense.link_to_budget JOIN member ON expense.link_to_member = member.member_id WHERE event.event_name = 'September Meeting' AND category = 'Advertisement' AND member.position = 'Student_Club';
SELECT major.department FROM major JOIN member ON member.link_to_major = major.major_id WHERE member.last_name = 'Guidi' OR member.last_name = 'Pierce';
SELECT SUM(amount) FROM budget JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'October Speaker';
SELECT expense.expense_description FROM expense JOIN event ON expense.link_to_member = event.event_id WHERE event.event_name = 'October Meeting' AND event.event_date = '2019-10-08' AND expense.approved = 'true';
SELECT AVG(expense.cost) AS average_cost FROM expense JOIN member ON expense.link_to_member = member.member_id JOIN budget ON expense.link_to_budget = budget.budget_id JOIN event ON budget.link_to_event = event.event_id WHERE member.first_name = 'Elijah' AND member.last_name = 'Allen' AND (strftime('%m', expense.expense_date) = '09' OR strftime('%m', expense.expense_date) = '10');
SELECT SUM(CASE WHEN strftime('%Y', event.event_date) = '2019' THEN budget.spent ELSE 0 END) - SUM(CASE WHEN strftime('%Y', event.event_date) = '2020' THEN budget.spent ELSE 0 END) AS difference FROM budget JOIN event ON budget.link_to_event = event.event_id WHERE event.type = 'Student_Club';
SELECT event.location FROM event WHERE event_name = 'Spring Budget Review';
SELECT cost FROM expense WHERE expense_description = 'Posters' AND expense_date = '2019-09-04';
SELECT MAX(remaining) FROM budget WHERE category = 'Food';
SELECT notes FROM income WHERE source = 'Fundraising' AND date_received = '2019-09-14';
SELECT COUNT(major_id) FROM major WHERE college = 'College of Humanities and Social Sciences';
SELECT phone FROM member WHERE first_name = 'Carlo' AND last_name = 'Jacobs';
SELECT County FROM member JOIN zip_code ON member.zip = zip_code.zip_code WHERE first_name = 'Adela' AND last_name = 'O''Gallagher' AND city = 'Hometown';
SELECT count(*) FROM budget JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'November Meeting' AND budget.remaining < 0;
SELECT SUM(amount) FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'September Speaker';
SELECT event.status FROM event JOIN budget ON event.event_id = budget.link_to_event JOIN expense ON budget.budget_id = expense.link_to_budget WHERE expense.expense_description = 'Post Cards, Posters' AND expense.expense_date = '2019-8-20';
SELECT `major_name` FROM member JOIN major ON member.link_to_major = major.major_id WHERE first_name = 'Brent' AND last_name = 'Thomason';
SELECT COUNT(*) FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Human Development and Family Studies' AND member.t_shirt_size = 'Large';
SELECT zip_code.type FROM member JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.first_name = 'Christof' AND member.last_name = 'Nielson';
SELECT major.major_name FROM member JOIN major ON member.link_to_major = major.major_id WHERE member.position = 'Vice President';
SELECT state FROM member JOIN zip_code ON member.zip = zip_code.zip_code WHERE first_name = 'Sacha' AND last_name = 'Harrison';
SELECT department FROM major WHERE major_id = (SELECT link_to_major FROM member WHERE position = 'President');
SELECT date_received FROM income WHERE source = 'Dues' AND link_to_member = (SELECT member_id FROM member WHERE first_name = 'Connor' AND last_name = 'Hilton');
SELECT first_name, last_name FROM member JOIN income ON member.member_id = income.link_to_member WHERE source = 'Dues' ORDER BY date_received LIMIT 1;
SELECT SUM(CASE WHEN event_name = 'Yearly Kickoff' THEN amount ELSE 0 END) / SUM(CASE WHEN event_name = 'October Meeting' THEN amount ELSE 0 END) FROM budget JOIN event ON budget.link_to_event = event.event_id WHERE category = 'Advertisement';
SELECT SUM(b1.amount) / (SELECT SUM(amount) FROM budget b2 JOIN event e ON b2.link_to_event = e.event_id WHERE e.event_name = 'November Speaker') * 100 FROM budget b1 JOIN event e ON b1.link_to_event = e.event_id WHERE b1.category = 'Parking' AND e.event_name = 'November Speaker';
SELECT SUM(cost) FROM expense JOIN budget ON expense.link_to_budget = budget.budget_id JOIN event ON budget.link_to_event = event.event_id WHERE expense_description = 'Pizza';
SELECT COUNT(DISTINCT city) FROM zip_code WHERE county = 'Orange County' AND state = 'Virginia';
SELECT `department` FROM `major` WHERE `college` = 'College of Humanities and Social Sciences';
SELECT zip_code.city, zip_code.county, zip_code.state FROM member JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.first_name = 'Amy' AND member.last_name = 'Firth';
SELECT expense.expense_description FROM expense JOIN budget ON expense.link_to_budget = budget.budget_id WHERE budget.remaining = (SELECT MIN(remaining) FROM budget);
SELECT member.first_name, member.last_name FROM event JOIN attendance ON event.event_id = attendance.link_to_event JOIN member ON attendance.link_to_member = member.member_id WHERE event.event_name = 'October Meeting';
SELECT college FROM major JOIN member ON member.link_to_major = major.major_id GROUP BY college ORDER BY COUNT(member.member_id) DESC LIMIT 1;
SELECT major.major_name FROM member JOIN major ON member.link_to_major = major.major_id WHERE member.phone = "809-555-3360";
SELECT event_name FROM event WHERE event_id IN (SELECT link_to_event FROM budget WHERE amount = (SELECT MAX(amount) FROM budget));
SELECT expense.expense_description FROM expense JOIN member ON expense.link_to_member = member.member_id WHERE member.position = 'Vice President';
SELECT COUNT(DISTINCT attendance.link_to_member) FROM event JOIN attendance ON event.event_id = attendance.link_to_event WHERE event.event_name = "Women's Soccer";
SELECT date_received FROM income WHERE link_to_member = (SELECT member_id FROM member WHERE first_name = 'Casey' AND last_name = 'Mason');
SELECT COUNT(DISTINCT member.zip) FROM member JOIN zip_code ON member.zip = zip_code.zip_code WHERE zip_code.state = 'Maryland';
SELECT COUNT(*) FROM attendance WHERE link_to_member = (SELECT member_id FROM member WHERE phone = '954-555-6240');
SELECT first_name, last_name FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.department = 'School of Applied Sciences, Technology and Education';
SELECT event.event_name FROM event JOIN budget ON budget.link_to_event = event.event_id WHERE event.status = 'Closed' ORDER BY budget.spent / budget.amount DESC LIMIT 1;
SELECT COUNT(*) FROM member WHERE position = 'President';
SELECT MAX(spent) FROM budget;
SELECT COUNT(*) FROM event WHERE type = 'Meeting' AND strftime('%Y', event_date) = '2020';
SELECT SUM(spent) FROM budget WHERE category = 'Food';
SELECT first_name, last_name FROM member JOIN attendance ON member.member_id = attendance.link_to_member GROUP BY first_name, last_name HAVING COUNT(link_to_event) > 7;
SELECT first_name, last_name FROM member JOIN major ON member.link_to_major = major.major_id JOIN attendance ON member.member_id = attendance.link_to_member JOIN event ON attendance.link_to_event = event.event_id WHERE major.major_name = 'Interior Design' AND event.event_name = 'Community Theater';
SELECT first_name || ' ' || last_name AS full_name FROM member JOIN zip_code ON member.zip = zip_code.zip_code WHERE zip_code.city = 'Georgetown' AND zip_code.state = 'South Carolina';
SELECT COUNT(amount) FROM income INNER JOIN member ON income.link_to_member = member.member_id WHERE member.first_name = 'Grant' AND member.last_name = 'Gilmour';
SELECT `first_name`, `last_name` FROM member WHERE member_id IN (SELECT link_to_member FROM income WHERE amount > 40);
SELECT SUM(cost) FROM expense JOIN budget ON expense.link_to_budget = budget.budget_id JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'Yearly Kickoff';
SELECT first_name, last_name FROM member JOIN budget ON budget.link_to_event = event.event_id JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'Yearly Kickoff' AND budget.category = 'Budget';
SELECT first_name, last_name, source FROM member JOIN income ON member.member_id = income.link_to_member WHERE amount = (SELECT MAX(amount) FROM income);
SELECT event_name FROM event WHERE event_id = ( SELECT link_to_event FROM budget WHERE spent = ( SELECT MIN(spent) FROM budget ) );
SELECT SUM(cost) * 100.0 / (SELECT SUM(cost) FROM expense) FROM expense JOIN budget ON expense.link_to_budget = budget.budget_id JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'Yearly Kickoff';
SELECT SUM(CASE WHEN major_name = 'Finance' THEN 1 ELSE 0 END) * 1.0 / SUM(CASE WHEN major_name = 'Physics' THEN 1 ELSE 0 END) AS ratio FROM member JOIN major ON member.link_to_major = major.major_id;
SELECT source, SUM(amount) as total_amount FROM income WHERE date_received BETWEEN '2019-09-01' AND '2019-09-30' GROUP BY source ORDER BY total_amount DESC LIMIT 1;
SELECT first_name || ' ' || last_name as full_name, email FROM member WHERE position = 'Secretary';
SELECT count(*) FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Physics Teaching' AND member.position = 'Member'
SELECT COUNT(DISTINCT attendance.link_to_member) FROM attendance JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Community Theater' AND strftime('%Y', event.event_date) = '2019';
SELECT COUNT(*) as num_events_attended, major.major_name FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member INNER JOIN event ON attendance.link_to_event = event.event_id LEFT JOIN major ON member.link_to_major = major.major_id WHERE first_name = 'Luisa' AND last_name = 'Guidi';
SELECT ROUND(AVG(budget.spent), 2) AS average_food_spending FROM budget JOIN event ON budget.link_to_event = event.event_id WHERE budget.category = 'Food' AND event.status = 'Closed';
SELECT event_name FROM event WHERE event_id IN (SELECT link_to_event FROM budget WHERE category = 'Advertisement' ORDER BY spent DESC LIMIT 1);
SELECT member.first_name, member.last_name FROM member JOIN attendance ON attendance.link_to_member = member.member_id JOIN event ON attendance.link_to_event = event.event_id WHERE member.first_name = 'Maya' AND member.last_name = 'Mclean' AND event.event_name = 'Women''s Soccer';
SELECT SUM(CASE WHEN type = 'Community Service' THEN 1 ELSE 0 END) * 100.0 / COUNT(event_id) as percentage_share FROM event WHERE event_date BETWEEN '2019-01-01' and '2019-12-31';
SELECT expense.cost FROM expense JOIN budget ON expense.link_to_budget = budget.budget_id JOIN event ON budget.link_to_event = event.event_id WHERE expense.expense_description = 'Posters' AND event.event_name = 'September Speaker';
SELECT MAX(t_shirt_size) AS popular_t_shirt_size FROM member GROUP BY t_shirt_size ORDER BY COUNT(t_shirt_size) DESC LIMIT 1;
SELECT event.event_name FROM event JOIN budget ON budget.link_to_event = event.event_id WHERE budget.event_status = 'Closed' AND budget.remaining < 0 ORDER BY budget.remaining LIMIT 1;
SELECT SUM(cost), expense_description FROM expense JOIN budget ON expense.link_to_budget = budget.budget_id JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'October Meeting' and approved = 'yes' GROUP BY expense_description;
SELECT category, amount FROM budget JOIN event ON budget.link_to_event = event.event_id WHERE event_name = 'April Speaker' ORDER BY amount ASC;
SELECT MAX(amount) FROM budget WHERE category = 'Food';
SELECT budget_id, category, amount FROM budget WHERE category = 'Advertisement' ORDER BY amount DESC LIMIT 3;
SELECT SUM(cost) FROM expense WHERE expense_description = 'Parking';
SELECT SUM(cost) FROM expense WHERE expense_date = '2019-08-20';
SELECT first_name, last_name, SUM(cost) AS total_cost FROM member JOIN expense ON member.member_id = expense.link_to_member WHERE member.member_id = "rec4BLdZHS2Blfp4v";
SELECT expense.expense_description FROM member JOIN expense ON expense.link_to_member = member.member_id WHERE member.first_name = 'Sacha' AND member.last_name = 'Harrison';
SELECT expense.expense_description FROM expense JOIN member ON expense.link_to_member = member.member_id WHERE member.t_shirt_size = 'X-Large';
SELECT member.zip FROM member JOIN expense ON member.member_id = expense.link_to_member JOIN zip_code ON member.zip = zip_code.zip_code WHERE cost < 50;
SELECT major.major_name FROM member JOIN major ON member.link_to_major = major.major_id WHERE first_name = 'Phillip' AND last_name = 'Cullen';
SELECT `position` FROM member JOIN major ON member.link_to_major = major.major_id WHERE major_name = 'Business';
SELECT count(*) FROM member WHERE t_shirt_size = 'Medium' AND link_to_major = (SELECT major_id FROM major WHERE major_name = 'Business');
SELECT type FROM budget JOIN event ON budget.link_to_event = event.event_id WHERE remaining > 30;
SELECT category FROM event INNER JOIN budget ON event.event_id = budget.link_to_event WHERE event.location = 'MU 215';
SELECT category FROM event JOIN budget ON event.event_id = budget.link_to_event WHERE event_date = '2020-03-24T12:00:00';
SELECT major.major_name FROM member JOIN major ON member.link_to_major = major.major_id WHERE member.position = 'Vice President';
SELECT SUM(CASE WHEN position = 'Member' AND major_name = 'Mathematics' THEN 1 ELSE 0 END) * 100.0 / COUNT(member_id) AS percentage_of_mathematics_major_members FROM member JOIN major ON member.link_to_major = major.major_id;
SELECT event_name FROM event WHERE location = 'MU 215';
SELECT COUNT(*) FROM income WHERE amount = 50;
SELECT count(*) as total_x_large_tshirt_members FROM member WHERE position = 'Member' AND t_shirt_size = 'X-Large';
SELECT count(*) FROM major WHERE college = 'College of Agriculture and Applied Sciences' AND department = 'School of Applied Sciences, Technology and Education';
SELECT last_name, department, college FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Environmental Engineering';
SELECT category FROM budget JOIN event ON budget.link_to_event = event.event_id WHERE event.location = 'MU 215' AND event.type = 'Guest Speaker' AND budget.spent = 0;
SELECT city, state FROM member JOIN major ON member.link_to_major = major.major_id JOIN zip_code ON member.zip = zip_code.zip_code WHERE major.department = 'Electrical and Computer Engineering Department' AND member.position = 'Member';
SELECT event_name FROM event WHERE type = 'Social' AND location = '900 E. Washington St.' AND event_id IN (SELECT event_id FROM member WHERE position = 'Vice President' AND link_to_major = (SELECT major_id FROM major WHERE major_name = 'Student_Club'));
SELECT member.last_name, member.position FROM member INNER JOIN expense ON member.member_id = expense.link_to_member WHERE expense.expense_description = 'Pizza' AND expense.expense_date = '2019-09-10';
SELECT last_name FROM member JOIN attendance ON member.member_id = attendance.link_to_member JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = "Women's Soccer" AND member.position = "Member";
SELECT COUNT(income.amount = 50) * 100.0 / COUNT(member.member_id) AS percentage FROM income JOIN member ON income.link_to_member = member.member_id WHERE member.position = 'Member' AND member.t_shirt_size = 'Medium';
SELECT DISTINCT state FROM zip_code WHERE type = 'PO Box';
SELECT zip_code FROM zip_code WHERE type = 'PO Box' AND county = 'San Juan Municipio' AND state = 'Puerto Rico';
SELECT event_name FROM event WHERE type = 'Game' AND status = 'Closed' AND event_date BETWEEN '2019-03-15' AND '2020-03-20';
SELECT link_to_event FROM attendance JOIN expense ON expense.link_to_member = attendance.link_to_member WHERE expense.cost > 50;
SELECT member.first_name, member.last_name, event.event_id FROM expense JOIN member ON expense.link_to_member = member.member_id JOIN attendance ON attendance.link_to_member = member.member_id JOIN event ON attendance.link_to_event = event.event_id WHERE expense.approved = 'true' AND expense.expense_date BETWEEN '2019-01-10' and '2019-11-19';
SELECT major.college FROM member JOIN major ON member.link_to_major = major.major_id WHERE member.first_name = 'Katy' AND member.link_to_major = 'rec1N0upiVLy5esTO';
SELECT phone FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Business' AND major.college = 'College of Agriculture and Applied Sciences';
SELECT email FROM member WHERE member_id IN (SELECT link_to_member FROM expense WHERE cost > 20 AND expense_date BETWEEN '2019-09-10' AND '2019-11-19');
SELECT COUNT(*) FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'education' AND member.position = 'Member' AND major.college = 'College of Education & Human Services';
SELECT SUM(CASE WHEN remaining < 0 THEN 1 ELSE 0 END) * 100.0 / COUNT(event_id) AS percentage_of_over_budget_events FROM budget INNER JOIN event ON budget.link_to_event = event.event_id;
SELECT event_id, location, status FROM event WHERE event_date BETWEEN '2019-11-01' AND '2020-03-31';
SELECT expense_description FROM expense GROUP BY expense_description HAVING SUM(cost) / COUNT(expense_id) > 50;
SELECT first_name, last_name FROM member WHERE t_shirt_size = 'X-Large';
SELECT SUM(CASE WHEN type = 'PO Box' THEN 1 ELSE 0 END) * 100.0 / COUNT(zip_code) AS po_box_percentage FROM zip_code;
SELECT event.event_name, event.location FROM event JOIN budget ON budget.link_to_event = event.event_id WHERE budget.remaining > 0;
SELECT event_name, event_date FROM event JOIN budget ON event.event_id = budget.link_to_event JOIN expense ON expense.link_to_budget = budget.budget_id WHERE expense.expense_description = 'Pizza' AND expense.cost > 50 AND expense.cost < 100;
SELECT member.first_name, member.last_name, major.major_name FROM member JOIN major ON member.link_to_major = major.major_id JOIN expense ON expense.link_to_member = member.member_id WHERE expense.cost > 100;
SELECT event.city, event.county FROM event JOIN (SELECT event_id, COUNT(*) as num_income FROM income GROUP BY event_id HAVING num_income > 40) as income_counts ON event.event_id = income_counts.event_id;
SELECT link_to_member FROM expense WHERE link_to_member IN ( SELECT link_to_member FROM expense GROUP BY link_to_member HAVING COUNT(DISTINCT link_to_event) > 1 ) ORDER BY cost DESC LIMIT 1;
SELECT AVG(cost) FROM expense JOIN member ON expense.link_to_member = member.member_id WHERE member.position != 'Member';
SELECT event_name FROM event INNER JOIN budget ON budget.link_to_event = event.event_id INNER JOIN expense ON expense.link_to_budget = budget.budget_id WHERE category = 'Parking' GROUP BY event.event_id HAVING cost < (SELECT SUM(cost) / COUNT(event_id) FROM expense WHERE category = 'Parking');
SELECT SUM(cost) * 100 / (SELECT COUNT(event_id) FROM event WHERE type = 'Game') FROM expense JOIN budget ON expense.link_to_budget = budget.budget_id JOIN event ON budget.link_to_event = event.event_id WHERE event.type = 'Game';
SELECT MAX(b.amount) FROM budget b JOIN expense e ON b.budget_id = e.link_to_budget WHERE e.expense_description = 'Water, chips, cookies';
SELECT first_name || ' ' || last_name AS full_name FROM member JOIN expense ON expense.link_to_member = member.member_id ORDER BY expense.cost DESC LIMIT 5;
SELECT member.first_name || ' ' || member.last_name AS full_name, member.phone AS contact_number FROM expense JOIN member ON expense.link_to_member = member.member_id WHERE expense.cost > (SELECT AVG(cost) FROM expense);
SELECT SUM(CASE WHEN state = 'Maine' THEN 1 ELSE 0 END) / CAST(COUNT(CASE WHEN position = 'Member' THEN 1 ELSE NULL END) AS FLOAT) - SUM(CASE WHEN state = 'Vermont' THEN 1 ELSE 0 END) / CAST(COUNT(CASE WHEN position = 'Member' THEN 1 ELSE NULL END) AS FLOAT) AS percentage_difference FROM member JOIN zip_code ON member.zip = zip_code.zip_code;
SELECT major.major_name, major.department FROM member JOIN major ON member.link_to_major = major.major_id WHERE member.first_name = 'Garrett' AND member.last_name = 'Gerke';
SELECT first_name || ' ' || last_name AS full_name, cost FROM member JOIN expense ON member.member_id = expense.link_to_member WHERE expense.expense_description = 'Water, Veggie tray, supplies';
SELECT member.last_name, member.phone FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Elementary Education';
SELECT category, amount FROM budget JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'January Speaker';
SELECT event.event_name FROM event JOIN budget ON event.event_id = budget.link_to_event WHERE budget.category = 'Food';
SELECT first_name, last_name, amount FROM income JOIN member ON income.link_to_member = member.member_id WHERE date_received = '9/9/2019';
SELECT budget.category FROM expense JOIN budget ON expense.link_to_budget = budget.budget_id WHERE expense.expense_description = 'Posters';
SELECT first_name || ' ' || last_name AS full_name, major.college FROM member JOIN major ON member.link_to_major = major.major_id WHERE position = 'Secretary';
SELECT SUM(spent) as total_spent, event.event_name FROM budget JOIN event ON budget.link_to_event = event.event_id WHERE budget.category = 'Speaker Gifts';
SELECT zip_code.city FROM member JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.last_name = 'Girke' AND member.first_name = 'Garrett';
SELECT first_name, last_name, position FROM member JOIN zip_code ON member.zip = zip_code.zip_code WHERE city = 'Lincolnton' AND state = 'North Carolina' AND zip_code = 28092;
SELECT COUNT(*) FROM gasstations WHERE country = 'CZE' AND segment = 'Premium';
SELECT COUNT(CASE WHEN currency = 'EUR' THEN 1 END) * 1.0 / COUNT(CASE WHEN currency = 'CZK' THEN 1 END) as ratio FROM customers;
SELECT customers.customerid FROM yearmonth JOIN customers ON yearmonth.customerid = customers.customerid WHERE segment = "LAM" AND date BETWEEN 201201 AND 201212 ORDER BY consumption ASC LIMIT 1;
SELECT AVG(consumption / 12) as avg_monthly_consumption FROM yearmonth JOIN customers ON yearmonth.customerid = customers.customerid WHERE customers.segment = 'SME' AND yearmonth.date BETWEEN 201301 AND 201312;
SELECT customerid FROM yearmonth WHERE date BETWEEN 201101 AND 201112 GROUP BY customerid ORDER BY SUM(consumption) DESC LIMIT 1;
SELECT COUNT(DISTINCT customers.customerid) FROM customers JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE segment = 'KAM' AND date BETWEEN 201201 AND 201212 AND consumption < 30000;
SELECT SUM(CASE WHEN currency = 'CZK' THEN consumption ELSE 0 END) - SUM(CASE WHEN currency = 'EUR' THEN consumption ELSE 0 END) AS Difference_in_Consumption FROM yearmonth JOIN customers ON yearmonth.customerid = customers.customerid WHERE date BETWEEN 201201 AND 201212;
SELECT MAX(date) FROM yearmonth WHERE consumption = (SELECT MAX(consumption) FROM yearmonth)
SELECT segment FROM yearmonth GROUP BY segment ORDER BY SUM(consumption) LIMIT 1;
SELECT substr(date, 1, 4) as year, sum(consumption) as total_consumption FROM yearmonth JOIN customers ON yearmonth.customerid = customers.customerid WHERE customers.currency = 'CZK' GROUP BY year ORDER BY total_consumption DESC LIMIT 1;
SELECT MAX(yearmonth.consumption) AS max_consumption FROM yearmonth JOIN customers ON yearmonth.customerid = customers.customerid WHERE customers.segment = 'SME' AND yearmonth.date LIKE '2013%' ORDER BY max_consumption DESC LIMIT 1;
SELECT MIN(yearmonth.consumption) as min_consumption, AVG(CASE WHEN customers.segment = 'KAM' THEN yearmonth.consumption END) - AVG(CASE WHEN customers.segment = 'LAM' THEN yearmonth.consumption END) as kam_lam_difference, AVG(CASE WHEN customers.segment = 'LAM' THEN yearmonth.consumption END) - AVG(CASE WHEN customers.segment = 'SME' THEN yearmonth.consumption END) as lam_sme_difference FROM yearmonth JOIN customers ON yearmonth.customerid = customers.customerid WHERE yearmonth.date BETWEEN '201301' AND '201312' AND customers.currency = 'CZK' GROUP BY customers.segment;
SELECT segment, ((MAX(consumption) - MIN(consumption)) / MIN(consumption) * 100) AS percentage_increase FROM yearmonth y JOIN customers c ON y.customerid = c.customerid WHERE date BETWEEN 201201 AND 201312 GROUP BY segment;
SELECT SUM(consumption) FROM yearmonth WHERE customerid = 6 AND date BETWEEN 201308 AND 201311;
SELECT count(*) as more_discount_gas_stations FROM gasstations WHERE segment = 'Discount' AND country = 'Czech Republic' EXCEPT SELECT count(*) as more_discount_gas_stations FROM gasstations WHERE segment = 'Discount' AND country = 'Slovakia';
SELECT consumption FROM yearmonth WHERE customerid = 7 AND date = 201304 EXCEPT SELECT consumption FROM yearmonth WHERE customerid = 5 AND date = 201304 LIMIT 1;
SELECT customers.currency, count(distinct customers.customerid) FROM customers WHERE segment = 'SME' AND currency = 'CZK' UNION SELECT customers.currency, count(distinct customers.customerid) FROM customers WHERE segment = 'SME' AND currency = 'EUR';
SELECT customers.customerid FROM customers JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE customers.segment = 'LAM' AND customers.currency = 'Euro' AND yearmonth.date = 201310 ORDER BY yearmonth.consumption DESC LIMIT 1;
SELECT MAX(consumption) AS max_consumption, customerid FROM yearmonth WHERE customerid IN (SELECT customerid FROM customers WHERE segment = 'KAM');
SELECT SUM(yearmonth.consumption) FROM yearmonth JOIN customers ON yearmonth.customerid = customers.customerid WHERE yearmonth.date = 201305 AND customers.segment = 'KAM';
SELECT COUNT(*) * 100.0 / (SELECT COUNT(*) FROM customers WHERE segment = 'LAM') AS percentage_consumed_over_46_73 FROM yearmonth JOIN customers ON yearmonth.customerid = customers.customerid WHERE segment = 'LAM' AND consumption > 46.73;
SELECT Country, COUNT(*) AS Total_Value_for_money_gas_stations FROM gasstations WHERE segment = "Value for money" GROUP BY country ORDER BY Total_Value_for_money_gas_stations DESC;
SELECT (COUNT(DISTINCT customers.customerid) * 100.0 / (SELECT COUNT(customerid) FROM customers WHERE segment = 'KAM')) AS percentage_euro FROM transactions_1k JOIN customers ON transactions_1k.customerid = customers.customerid WHERE customers.segment = 'KAM' AND customers.currency = 'euro';
SELECT (COUNT(DISTINCT yearmonth.customerid) * 100.0 / (SELECT COUNT(DISTINCT customerid) FROM yearmonth WHERE date = '201202' AND consumption > 528.3)) AS percentage FROM yearmonth JOIN customers ON yearmonth.customerid = customers.customerid WHERE yearmonth.date = '201202' AND yearmonth.consumption > 528.3;
SELECT (CAST(SUM(CASE WHEN segment = 'Premium' THEN 1 ELSE 0 END) AS FLOAT) / COUNT(*)) * 100 AS percentage_premium FROM gasstations WHERE country = 'Slovakia';
SELECT customerid FROM yearmonth WHERE date = '201309' ORDER BY consumption DESC LIMIT 1;
SELECT segment FROM customers WHERE customerid IN (SELECT customerid FROM yearmonth WHERE date = '201309' ORDER BY consumption LIMIT 1);
SELECT customerid FROM yearmonth WHERE date = '201206' AND customerid IN (SELECT customerid FROM customers WHERE segment = 'SME') ORDER BY consumption ASC LIMIT 1;
SELECT MAX(consumption) as highest_monthly_consumption FROM yearmonth WHERE date LIKE '2012%'
SELECT SUM(consumption)/12 AS monthly_consumption FROM yearmonth JOIN customers ON yearmonth.customerid = customers.customerid WHERE currency = 'euro' GROUP BY yearmonth.customerid ORDER BY monthly_consumption DESC LIMIT 1;
SELECT products.description FROM products JOIN transactions_1k ON products.productid = transactions_1k.productid JOIN yearmonth ON transactions_1k.date = yearmonth.date WHERE strftime('%Y%m', yearmonth.date) = '201309';
SELECT gasstations.country FROM transactions_1k JOIN gasstations ON transactions_1k.gasstationid = gasstations.gasstationid WHERE substr(transactions_1k.date, 1, 6) = '201306';
SELECT gasstations.chainid FROM gasstations JOIN transactions_1k ON gasstations.gasstationid = transactions_1k.gasstationid JOIN customers ON transactions_1k.customerid = customers.customerid WHERE customers.currency = 'euro';
SELECT products.description FROM products JOIN transactions_1k ON products.productid = transactions_1k.productid JOIN customers ON transactions_1k.customerid = customers.customerid WHERE customers.currency = 'euro';
SELECT avg(price) as average_total_price FROM transactions_1k WHERE date LIKE '2012-01%';
SELECT customerid FROM customers WHERE currency = 'euro' AND customerid IN (SELECT customerid FROM yearmonth WHERE consumption > 1000);
SELECT description FROM products p JOIN transactions_1k t ON p.productid = t.productid JOIN gasstations g ON t.gasstationid = g.gasstationid WHERE g.country = 'CZE';
SELECT time FROM transactions_1k WHERE gasstationid IN ( SELECT gasstationid FROM gasstations WHERE chainid = 11 ) ORDER BY time;
SELECT COUNT(*) FROM transactions_1k t JOIN gasstations g ON t.gasstationid = g.gasstationid WHERE g.country = 'CZE' AND t.price > 1000;
SELECT COUNT(*) FROM transactions_1k t JOIN gasstations g ON t.gasstationid = g.gasstationid WHERE g.country = 'CZE' AND t.date > '2012-01-01';
SELECT AVG(price * amount) as avg_total_price FROM transactions_1k WHERE gasstationid IN (SELECT gasstationid FROM gasstations WHERE country = 'CZE');
SELECT AVG(amount * price) AS avg_total_price FROM transactions_1k JOIN customers ON transactions_1k.customerid = customers.customerid WHERE customers.currency = 'euro';
SELECT customerid FROM transactions_1k WHERE date = '2012-08-25' ORDER BY amount DESC LIMIT 1;
SELECT gasstations.country FROM transactions_1k JOIN gasstations ON transactions_1k.gasstationid = gasstations.gasstationid WHERE transactions_1k.date = '2012-08-25' ORDER BY transactions_1k.time LIMIT 1;
SELECT currency FROM customers WHERE customerid IN ( SELECT customerid FROM transactions_1k WHERE date = '2012-08-24' AND time = '16:25:00' );
SELECT segment FROM customers JOIN transactions_1k T1 ON customers.customerid = T1.customerid WHERE T1.date = '2012-08-23' AND T1.time = '21:20:00';
SELECT COUNT(*) FROM transactions_1k WHERE date = '2012-08-26' AND time < '13:00:00' AND currency = 'EUR';
SELECT segment FROM customers ORDER BY customerid LIMIT 1;
SELECT gasstations.country FROM transactions_1k T1 JOIN gasstations ON T1.gasstationid = gasstations.gasstationid WHERE T1.date = '2012-08-24' AND T1.time = '12:42:00';
SELECT productid FROM transactions_1k WHERE date = '2012-08-23' AND time = '21:20:00';
SELECT amount, date FROM transactions_1k WHERE customerid IN ( SELECT customerid FROM transactions_1k WHERE date = '2012-08-24' AND amount = 124.05 ) AND date LIKE '2012-01%'
SELECT COUNT(*) FROM transactions_1k t JOIN gasstations g ON t.gasstationid = g.gasstationid WHERE t.date = '2012-08-26' AND t.time >= '08:00' AND t.time < '09:00' AND g.country = 'CZE';
SELECT currency FROM customers WHERE customerid IN (SELECT customerid FROM yearmonth WHERE date LIKE '201306' AND consumption = 214582.17);
SELECT country FROM gasstations WHERE gasstationid IN (SELECT gasstationid FROM transactions_1k WHERE cardid = 667467) LIMIT 1;
SELECT gasstations.country FROM transactions_1k JOIN gasstations ON transactions_1k.gasstationid = gasstations.gasstationid WHERE transactions_1k.date = '2012-08-24' AND transactions_1k.amount = 548.4;
SELECT COUNT(DISTINCT customers.customerid) * 100.0 / (SELECT COUNT(DISTINCT customerid) FROM transactions_1k WHERE date = '2012-08-25') FROM customers WHERE currency = 'EUR';
SELECT consumption_2012,consumption_2013 FROM (select consumption as consumption_2012 from yearmonth where date between '2012-01-01' and '2012-12-31') t1 JOIN (select consumption as consumption_2013 from yearmonth where date between '2013-01-01' and '2013-12-31') t2 ON 1 = 1;
SELECT gasstationid FROM transactions_1k GROUP BY gasstationid ORDER BY SUM(amount*price) DESC LIMIT 1;
SELECT count(*) * 100.0 / (SELECT count(*) from gasstations where country = 'SVK') FROM gasstations WHERE segment = 'Premium' and country = 'SVK';
SELECT sum(amount) FROM transactions_1k WHERE customerid = '38508';
SELECT products.description, SUM(transactions_1k.amount) as total_amount FROM transactions_1k JOIN products ON transactions_1k.productid = products.productid GROUP BY products.description ORDER BY total_amount DESC LIMIT 5;
SELECT customers.customerid, MAX(transactions_1k.amount * transactions_1k.price) AS total_spending, AVG(transactions_1k.price/transactions_1k.amount) AS average_price_per_item, customers.currency FROM transactions_1k JOIN customers ON transactions_1k.customerid = customers.customerid WHERE transactions_1k.customerid = (SELECT customerid FROM transactions_1k GROUP BY customerid ORDER BY SUM(amount*price) DESC LIMIT 1)
SELECT gasstations.country FROM gasstations WHERE gasstationid IN (SELECT gasstationid FROM transactions_1k WHERE productid = 2 ORDER BY price DESC LIMIT 1);
SELECT customers.segment, yearmonth.consumption FROM transactions_1k JOIN products ON transactions_1k.productid = products.productid JOIN yearmonth ON transactions_1k.customerid = yearmonth.customerid JOIN customers ON transactions_1k.customerid = customers.customerid WHERE products.productid = 5 AND transactions_1k.price/transactions_1k.amount > 29.00 AND yearmonth.date LIKE '201208%';
